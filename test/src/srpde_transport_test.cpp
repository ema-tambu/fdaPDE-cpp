// This file is part of fdaPDE, a C++ library for physics-informed
// spatial and functional data analysis.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <cstddef>
#include <gtest/gtest.h>   // testing framework

#include <fdaPDE/core.h>
using fdapde::core::advection;
using fdapde::core::diffusion;
using fdapde::core::FEM;
using fdapde::core::fem_order;
using fdapde::core::laplacian;
using fdapde::core::reaction;
using fdapde::core::DiscretizedMatrixField;
using fdapde::core::PDE;
using fdapde::core::DiscretizedVectorField;

#include "../../fdaPDE/models/regression/srpde.h"
#include "../../fdaPDE/models/sampling_design.h"
using fdapde::models::SRPDE;
using fdapde::models::Sampling;

#include "utils/constants.h"
#include "utils/mesh_loader.h"
#include "utils/utils.h"
using fdapde::testing::almost_equal;
using fdapde::testing::MeshLoader;
using fdapde::testing::read_csv;

using fdapde::core::PDEparameters;
using fdapde::models::ExactEDF;
using fdapde::core::Grid;

#include "../../fdaPDE/calibration/kfold_cv.h"
#include "../../fdaPDE/calibration/rmse.h"
using fdapde::calibration::KCV;
using fdapde::calibration::RMSE;

void writeEigenVectorToCSV(const std::string& filename, const Eigen::VectorXd& vector) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Error: Could not open file " << filename << std::endl;
        return;
    }
    for (int i = 0; i < vector.size(); ++i) {
        file << vector(i) << "\n";
    }
    file.close();
}

void writeEigenMatrixToCSV(const std::string& filename, const Eigen::MatrixXd& matrix) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Error: Could not open file " << filename << std::endl;
        return;
    }
    for (int i = 0; i < matrix.rows(); ++i) {
        for (int j = 0; j < matrix.cols(); ++j) {
            file << matrix(i, j) << ",";
        }
        file << "\n";
    }
    file.close();
}
/*
TEST(srpde_test, TestPsi){

    constexpr std::size_t femOrder = 1;
    std::cout << "femOrder: " << femOrder << std::endl;

    MeshLoader<Mesh2D> domain("unit_square_5");
    std::cout << "domain loaded" << std::endl;

    // auto L = - nu * laplacian<FEM>() + advection<FEM>(b);
    auto L = - laplacian<FEM>(); 
    
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>> pde_(domain.mesh, L, boundary_matrix);
    std::cout << "pde_ created" << std::endl;
    
    DMatrix<double> test_points = read_csv<double>("../data/transport/testPsi/locs.csv");
    std::cout << "test_points loaded: dimensions " << test_points.rows() << " x " << test_points.cols() << std::endl;
    
    SRPDE model_test(pde_, Sampling::pointwise);
    std::cout << "model_test created" << std::endl;
    
    model_test.set_spatial_locations(test_points);
    std::cout << "spatial locations set" << std::endl;
    
    model_test.init_sampling(true); // evaluate Psi() in the new grid
    std::cout << "sampling initialized" << std::endl;

    DMatrix<double> Psi = model_test.Psi();
    std::cout << "Psi dimensions: " << Psi.rows() << " x " << Psi.cols() << std::endl;

    for (int i = 0; i < Psi.rows(); ++i) {
        for (int j = 0; j < Psi.cols(); ++j) {
            if (Psi(i, j) != 0.0)
                std::cout << "Psi(" << i << ", " << j << ") = " << Psi(i, j) << std::endl;
        }
        std::cout << std::endl;
    }

    // compute Psi'*Psi
    DMatrix<double> PsiT_Psi = Psi.transpose() * Psi;
    std::cout << "PsiT_Psi dimensions: " << PsiT_Psi.rows() << " x " << PsiT_Psi.cols() << std::endl;
    for (int i = 0; i < PsiT_Psi.rows(); ++i) {
        for (int j = 0; j < PsiT_Psi.cols(); ++j) {
            if (PsiT_Psi(i, j) != 0.0)
                std::cout << "PsiT_Psi(" << i << ", " << j << ") = " << PsiT_Psi(i, j) << std::endl;
        }
        std::cout << std::endl;
    }

    // save Psi to file
    writeEigenMatrixToCSV("../scripts/Psi()/Psi_fdaPDE.csv", Psi);       
}
*/
/*
TEST(srpde_test, TransportTestCase0) {
    // define exact solution
    auto solutionExpr = [](SVector<2> x) -> double {
        return 3*sin(x[0]) + 2*x[1];
    };

    constexpr std::size_t femOrder = 1;
    std::default_random_engine generator(123);
    
    // define domain 
    MeshLoader<Mesh2D> domain("unit_square_32");

    // define PDE coefficients
    SVector<2> b;  b << 1., 1.;
    SVector<2> b_exact;  b_exact << 1., 1.;
    double nu = 1e-9;
    auto forcingExpr = [&nu, &b_exact](SVector<2> x) -> double {
        return 2*b_exact[1] + 3*b_exact[0]*cos(x[0]) + 3*nu*sin(x[0]);
    };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object
        
    //define regularizing PDE
    PDEparameters<decltype(nu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b)>::getInstance(nu, b);
    
    auto L = - nu * laplacian<FEM>() + advection<FEM>(b);
    // auto L = - nu * laplacian<FEM>(); 
    
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b)> pde_(domain.mesh, L, boundary_matrix);
    pde_.set_forcing(forcing);

    pde_.set_stab_param(1e5);
    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    // set dirichlet conditions at PDE level
    for (int i = 0; i < nodes_.rows(); ++i) {
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);

    // define smoothing parameter
    double lambda = 1e3; //1; //1e3;

    // load expected once outside of loop
    DMatrix<double> expected = read_csv<double>("../data/transport/TransportTestCase0/expected.csv");
    // load test points and values once outside of loop (grid 100x100)
    DMatrix<double> test_points = read_csv<double>("../data/transport/TransportTestCase0/test_locs.csv");
    DMatrix<double> test_values = read_csv<double>("../data/transport/TransportTestCase0/test_values.csv");

    // loop on the number of observations
    for (int n = 30; n <= 70; n += 10){
        std::cout << "n: " << n << std::endl;
    
    DMatrix<double> locs = read_csv<double>("../data/transport/TransportTestCase0/locs" + std::to_string(n) + ".csv");
    DMatrix<double> observations = read_csv<double>("../data/transport/TransportTestCase0/observations" + std::to_string(n) + ".csv");
    std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));        

    std::size_t constexpr Ntests = 50;
    DVector<double> RMSEs_test(Ntests);
    DVector<double> RMSEs_nodes(Ntests);
    for (int i = 0; i < Ntests; i++){
        // add noise to observations (5% of the range of the exact solution values)        
        DMatrix<double> y(n*n, 1);
        for (int j = 0; j < n*n; ++j)
            y(j, 0) = observations(j, 0) + distribution(generator);
        // begin test 
        {   
        SRPDE model(pde_, Sampling::pointwise);
        model.set_lambda_D(lambda);
        model.set_spatial_locations(locs);
        // set model's data
        BlockFrame<double, int> df;
        df.insert(OBSERVATIONS_BLK, y);
        model.set_data(df);
        // solve smoothing problem
        model.init();

        // // optimize GCV index here
        // auto GCV = model.gcv<ExactEDF>();
        // std::vector<DVector<double>> lambdas = {SVector<1>(1e-6), SVector<1>(1e-3), SVector<1>(1e-2), SVector<1>(1e-1),
        //                                         SVector<1>(1.), SVector<1>(5.), SVector<1>(10.), SVector<1>(25.), 
        //                                         SVector<1>(50.), SVector<1>(1e2), SVector<1>(1e3)};
        // Grid<fdapde::Dynamic> opt;
        // std::cout << "Optimizing GCV..." << std::endl;
        // opt.optimize(GCV, lambdas);
        // auto best_lambda = opt.optimum()(0,0);
        // std::cout << "Best lambda: " << best_lambda << std::endl;
        // model.set_lambda_D(best_lambda);

        // model.set_dirichlet_bc(model.A(), model.b());
        model.solve();

        // test correctness 
        // evaluate MSE at mesh nodes   
        // // std::cout << "f size: " << model.f().size() << std::endl;
        // // std::cout << "expected size: " << expected.size() << std::endl;
        
        // compute RMSE at mesh nodes
        // skip boundary nodes
        auto boundary_dofs_Dirichlet = pde_.matrix_bc_Dirichlet();
        std::cout << "boundary dofs: " << boundary_dofs_Dirichlet.rows() << " x " << boundary_dofs_Dirichlet.cols() << std::endl;
        std::cout << "f size: " << model.f().size() << std::endl;
        double rmse = 0;
        for (int i = 0; i < model.f().size(); ++i) {
            // if (boundary_dofs_Dirichlet_.coeffRef(i, 0) == 0)
            // {
            //     rmse += (model.f()(i) - expected(i, 0)) * (model.f()(i) - expected(i, 0));
            // }
            // else
            // {
            //     std::cout << "skipping boundary node" << std::endl;
            // }
            rmse += (model.f()(i) - expected(i, 0)) * (model.f()(i) - expected(i, 0));
        }
        double size = model.f().size(); // - boundary_dofs_Dirichlet_.rows();
        rmse = std::sqrt(rmse / size);
        RMSEs_nodes(i) = rmse;

        {
        // std::cout << "saving model to file" << std::endl;
        std::ofstream file("modelf" + std::to_string(n) + ".txt");
        if (file.is_open()){
            for(int i = 0; i < model.f().size(); ++i)
                file << std::setprecision(17) << model.f()(i) << '\n';
            file.close();
        } else {
            std::cerr << "transport test unable to save solution" << std::endl;
        }
        }

        // evaluate MSE in another grid of test points
        SRPDE model_test(pde_, Sampling::pointwise);
        model_test.set_spatial_locations(test_points);
        model_test.init_sampling(true); // evaluate Psi() in the new grid
        DVector<double> f_test(test_points.rows());
        f_test = model_test.Psi() * model.f();
        double mse = 0;
        for (int j = 0; j < test_points.rows(); ++j) {
            mse += (f_test(j) - test_values(j, 0)) * (f_test(j) - test_values(j, 0));
        }
        mse /= test_points.rows();
        RMSEs_test(i) = std::sqrt(mse);

        {
        // std::cout << "saving model to file" << std::endl;
        std::ofstream file("gridf" + std::to_string(n) + ".txt");
        if (file.is_open()){
            for(int j = 0; j < test_points.rows(); ++j)
                file << std::setprecision(17) << f_test(j) << '\n';
            file.close();
        } else {
            std::cerr << "transport test unable to save solution" << std::endl;
        }
        }
        // EXPECT_TRUE(rmse < 100);
        EXPECT_TRUE(1);
        }
    } // end for
    // save MRSEs to file
    writeEigenVectorToCSV("RMSE_" + std::to_string(n) + ".csv", RMSEs_nodes);
    writeEigenVectorToCSV("RMSE_test_" + std::to_string(n) + ".csv", RMSEs_test);
    } // end for n loop 
}
*/
/*
TEST(srpde_test, TransportTestCase0_covariates) {

    // define exact solution
    auto solutionExpr = [](SVector<2> x) -> double {
        return 3*sin(x[0]) + 2*x[1];
    };

    for (int n = 35; n <= 180; n += 5){
        std::cout << "n: " << n << std::endl;

    constexpr std::size_t femOrder = 1;
    std::default_random_engine generator(123);
    
    // define domain 
    MeshLoader<Mesh2D> domain("unit_square_32");

    // define PDE coefficients
    SVector<2> b;  b << 1., 1.;
    double nu = 1e-9;
    auto forcingExpr = [&nu, &b](SVector<2> x) -> double {
        return 2*b[1] + 3*b[0]*cos(x[0]) + 3*nu*sin(x[0]);
    };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object
        
    //define regularizing PDE
    PDEparameters<decltype(nu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b)>::getInstance(nu, b);
    
    auto L = - nu * laplacian<FEM>() + advection<FEM>(b);
    
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b)> pde_(domain.mesh, L, boundary_matrix);
    pde_.set_forcing(forcing);

    // pde_.set_stab_param(2.285);
    pde_.set_stab_param(1.0);
    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    // set dirichlet conditions at PDE level
    for (int i = 0; i < nodes_.rows(); ++i) {
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);

    // define smoothing parameter
    double lambda = 0.1;

    // prepare data for testing 
    // const int n = 240;          // number of observations in each dimension
    const double minVal = 0.0;  // min domain value (unit square)
    const double maxVal = 1.0;  // max domain value (unit square)
    DVector<double> x = DVector<double>::LinSpaced(n, minVal, maxVal);
    DMatrix<double> observations = read_csv<double>("../data/transport/TransportTestCase0/observations" + std::to_string(n) + ".csv");
    DMatrix<double> locs(n*n, 2);   // matrix of spatial locations p_1, p2_, ... p_n
    DMatrix<double> X(n*n, 1);      // matrix of covariates
    double beta1 = 1.5;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            locs(i*n + j, 0) = x(i);
            locs(i*n + j, 1) = x(j);
            X(i*n + j, 0) = x(i)+x(j);
        }
    }

    std::size_t constexpr Ntests = 50;
    DVector<double> RMSEs_f(Ntests);
    DVector<double> RMSEs_beta(Ntests);
    for (int i = 0; i < Ntests; i++){
        // add noise to observations (5% of the range of the exact solution values)        
        std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));        
        DMatrix<double> y(n*n, 1);
        for (int j = 0; j < n*n; ++j) {
            // y(j, 0) = observations(j, 0) + distribution(generator);
            y(j, 0) = beta1*X(j,0) + observations(j, 0) + distribution(generator);
        }  
        // begin test 
        {   
        SRPDE model(pde_, Sampling::pointwise);
        model.set_lambda_D(lambda);
        model.set_spatial_locations(locs);
        // set model's data
        BlockFrame<double, int> df;
        df.insert(OBSERVATIONS_BLK, y);
        df.insert(DESIGN_MATRIX_BLK, X);
        model.set_data(df);
        // solve smoothing problem
        model.init();
        model.set_dirichlet_bc(model.A(), model.b());
        model.solve();
        
        // test correctness    
        std::vector<double> expected({
            -2.6913046320438945e-34, 0.093734741956067472, 0.18737795352731895, 0.28083819370680613, 0.37402420015603932, 0.46684497832111227, 0.55920989028734136, 0.65102874328565075, 0.74221187776427522, 0.83267025493980162, 0.92231554374202063, 1.0110602070677224, 1.0988175872591885, 1.1855019907239313, 1.2710287716130249, 1.3553144144763412, 1.4382766158139779, 1.5198343644442194, 1.5999080206095841, 1.6784193937436982, 1.7552918188230562, 1.8304502312291164, 1.9038212400476202, 1.9753331997335832, 2.044916280071948, 2.1125025343656132, 2.1780259657842107, 2.2414225918089157, 2.3026305067102766, 2.3615899419980959, 2.4182433247843806, 2.4725353340022651, 2.5244129544260949, 0.062500000000059536, 0.16709862828146077, 0.25802661811446664, 0.35195284613846728, 0.44492687959698951, 0.5376000254120018, 0.62977359368066788, 0.72136492847078593, 0.81228649528996411, 0.90244860402916516, 0.99176341892579822, 1.0801436937308317, 1.1675031441559782, 1.2537564282052618, 1.3388193934790704, 1.4226088414118363, 1.5050432072314712, 1.5860415189245411, 1.665525578403781, 1.7434160808716823, 1.8196401711871621, 1.8941173146563823, 1.966786478858267, 2.037554152255503, 2.106395060970927, 2.1731560073019849, 2.2379423636816433, 2.3003476691528024, 2.3610143863544986, 2.4184048602683075, 2.475687694942112, 2.5253290824135979, 2.5869129544261531, 0.12500000000011907, 0.23895364826658433, 0.32944246441767039, 0.42282980899056799, 0.51591926218862505, 0.60836973645410819, 0.70037377083171881, 0.79174127058413579, 0.88240707328698365, 0.97227873843204493, 1.0612687326412216, 1.149290249780142, 1.2362573419159322, 1.32208499464436, 1.4066895910422041, 1.4899881559583581, 1.5719000212663079, 1.6523439454588833, 1.7312437336951954, 1.8085179009005661, 1.8840993904618062, 1.9578984339814858, 2.0298734686243072, 2.0998955823058383, 2.1680099046924566, 2.2339283231097076, 2.2980235232728465, 2.3593600595129787, 2.4196492793898638, 2.4751612599788766, 2.5336795122869322, 2.5776345050217926, 2.6494129544262104, 0.18750000000017839, 0.30936861150713163, 0.40132312817977045, 0.49367863990185423, 0.58690600790057657, 0.67918568367015142, 0.77100035157448288, 0.86215885101678513, 0.95257230901509682, 1.0421597322563279, 1.1308305492482085, 1.2184989364914829, 1.305079259982914, 1.3904867753963672, 1.4746384703357567, 1.5574514626822089, 1.6388462037084806, 1.7187407553612266, 1.7970617042738204, 1.8737239224879145, 1.9486688660844917, 2.021792442916313, 2.0930820916298232, 2.1623555601799165, 2.2297622019973815, 2.2948150216394105, 2.3582752325619003, 2.4184484676122109, 2.478550227221012, 2.531841664917053, 2.5922123542795785, 2.6295572549280752, 2.7119129544262708, 0.25000000000023814, 0.37843598503245751, 0.47337937339945779, 0.56464737443351232, 0.65784580808935655, 0.75004958481038619, 0.84165583749311745, 0.93261443348613793, 1.0227821327071196, 1.1120903678468537, 1.2004479841619859, 1.2877688079053122, 1.3739679756802179, 1.4589608535664749, 1.5426651365548549, 1.6249978613196194, 1.7058809024551531, 1.7852310494742178, 1.8629787189082061, 1.9390331880583178, 2.013348023881985, 2.0857981274217656, 2.1564123292717916, 2.2249320005048148, 2.2916535416578756, 2.3558114418879716, 2.4187032581075454, 2.4776024432316377, 2.537729082291261, 2.5884369406762837, 2.6512650475683341, 2.6812011496969927, 2.7744129544263298, 0.31250000000029732, 0.44626686099612645, 0.54534529666003484, 0.63582255444041313, 0.72873942956093951, 0.82094637722197494, 0.91234670297106046, 1.0031047204313908, 1.0930359912876504, 1.1820697187033806, 1.2701200357283846, 1.3570989513945286, 1.442922556612102, 1.5275063107849058, 1.610768694395972, 1.692626446324323, 1.7730032681822501, 1.8518139172599317, 1.9289940186453356, 2.0044447123058675, 2.0781363272782012, 2.1499142066392287, 2.2198642545382659, 2.2876226869426537, 2.3536856462471571, 2.4169128690949746, 2.4793130440033528, 2.536812911173691, 2.5971938300108599, 2.6449463346759723, 2.7108045108392451, 2.7326652945774508, 2.8369129544263916, 0.37500000000035677, 0.5129856876649217, 0.61698648151624491, 0.70723270254585391, 0.79961672654540994, 0.89185525096622631, 0.98307776897888377, 1.0736283010661574, 1.1633324487814045, 1.2520971244376848, 1.3398456542127608, 1.4264884486592861, 1.5119420760977109, 1.5961222223264167, 1.6789482495157142, 1.7603363062794535, 1.8402124549729437, 1.9184884360279366, 1.9951068577922131, 2.0699574814205275, 2.1430332769768339, 2.214139336868429, 2.2834380188072489, 2.3504253066291589, 2.4158602934620381, 2.4781146973192922, 2.54010941264626, 2.5960726285005089, 2.6569481615604307, 2.7013770301889872, 2.7707887498992361, 2.7840417252397831, 2.8994129544264515, 0.43750000000041644, 0.57872502283845362, 0.68810591248466835, 0.77885466092800038, 0.87052365493203465, 0.96275810878679347, 1.0538493017036699, 1.144185914655401, 1.2336695220180982, 1.3221719373144578, 1.4096238500497313, 1.4959363440341065, 1.5810256186499654, 1.6648076575145971, 1.747202907932113, 1.8281265239733679, 1.9075076207067361, 1.9852536703805559, 2.0613165044703381, 2.1355704531975559, 2.2080384088894691, 2.278472118810142, 2.3471338329892992, 2.413337493363934, 2.4781792265279949, 2.5394125982666282, 2.6010962861702867, 2.6553765415705488, 2.7169913071683931, 2.7577432990003019, 2.8311698414248569, 2.8354136115814592, 2.9619129544265101, 0.50000000000047629, 0.64362054008912262, 0.75854759520696502, 0.85062211074272653, 0.9415101926124082, 1.0336452046802398, 1.1246563906353058, 1.2147796604275245, 1.3040452856713061, 1.3922932830458881, 1.4794537463263537, 1.5654416468564558, 1.6501722719145488, 1.7335616839390462, 1.8155317748031419, 1.8959961764357398, 1.9748879274522986, 2.0521086718535733, 2.1276222406691456, 2.2012825581676876, 2.2731512901584208, 2.3429111081318332, 2.4109519433927975, 2.4763568779563956, 2.5406440581138283, 2.6008026865914879, 2.6622764456944976, 2.7147220237012797, 2.7773181214281863, 2.8140653499547201, 2.8918967629841461, 2.8868540321262262, 3.0244129544265701, 0.56250000000053479, 0.70780648066761109, 0.82819795447811784, 0.92243553849019466, 1.0126198954714809, 1.1045179756351244, 1.1954900348409321, 1.2854117305946069, 1.374458415652259, 1.4624599581552555, 1.5493345536309895, 1.6350033607152381, 1.7193811136578918, 1.8023833709117205, 1.8839339542851232, 1.9639443344925929, 2.0423525418936932, 2.1190524788257203, 2.1940233616953235, 2.2670927018580818, 2.3383715132042107, 2.4074548292252862, 2.4748926030332772, 2.539481143588604, 2.6032561727481043, 2.6622816720346925, 2.7236513426577105, 2.7741089832803629, 2.837919396715495, 2.8703679759865084, 2.9529179531485892, 2.9384252998606986, 3.0869129544266278, 0.62500000000059464, 0.77141170059629049, 0.89698518926627446, 0.99417291469905766, 1.0838816170930046, 1.1753893064777847, 1.2663393112204848, 1.3560831416372248, 1.4449084764297249, 1.5326704914358094, 1.6192654895579386, 1.7046205189876953, 1.7886512035980382, 1.8712717891467696, 1.9524085508979427, 2.0319700620164038, 2.1099006356014449, 2.1860841168224114, 2.2605191749257578, 2.3329997682470016, 2.4036986878296793, 2.4721017918338921, 2.5389560394251616, 2.6027080836463399, 2.6660166329731756, 2.7238469895586279, 2.7852209727671626, 2.8335398411546762, 2.8987823685452563, 2.926679100871278, 3.0141835146647709, 2.9901787961842405, 3.1494129544266856, 0.68750000000065459, 0.83455641638533606, 0.96487684948885688, 1.0657003929535076, 1.1553037080796504, 1.2462816441156148, 1.3371940084290219, 1.4267928090560056, 1.515395881247108, 1.6029233321075804, 1.6892456841249752, 1.7742922067457187, 1.8579815854922519, 1.9402260065724111, 2.0209546715994429, 2.1000724153860753, 2.1775313849274438, 2.2532025993045521, 2.3271089978157731, 2.3990026244148135, 2.4691324315189203, 2.536850510046567, 2.6031424201596201, 2.6660356592078638, 2.7289260943590232, 2.7854969000446337, 2.846983818820636, 2.8930193844902647, 2.9598913681335959, 2.9830283198255656, 3.0756470037724304, 3.042155250745, 3.2119129544267482, 0.75000000000071354, 0.89734970676727466, 1.0318759607932275, 1.1368824159898532, 1.2268708032687845, 1.317223498173548, 1.4080471744836343, 1.4975371696271578, 1.5859215538215536, 1.6732170923052911, 1.7592741119517294, 1.84401755762797, 1.9273712990452418, 2.0092450825119261, 2.0895714272750845, 2.1682504436085703, 2.2452439704238421, 2.3204069289615972, 2.3937921551604808, 2.4651001263356247, 2.534672358168482, 2.6016995229993753, 2.6674518177615809, 2.729462053312699, 2.7919847340445236, 2.8472305559496576, 2.9089368641744668, 2.9525545115752774, 3.0212285726969483, 3.0394455163027194, 3.1372667779544399, 3.0943853916739834, 3.2744129544268064, 0.81250000000077327, 0.95988778435470334, 1.098016060202518, 1.207590721430712, 1.2985431152214353, 1.3882449283087683, 1.4788971315737072, 1.5683104184585914, 1.656486389607648, 1.7435507632053828, 1.829349579005062, 1.9137957253284312, 1.9968193965613057, 2.0783280633347974, 2.1582579326250468, 2.2365031892276677, 2.313037575840712, 2.3876960994699465, 2.4605679756369785, 2.5312911257106165, 2.6003180655638678, 2.6666474165135035, 2.7318841753994825, 2.7929857192458076, 2.8551921967210556, 2.9090480285339995, 2.9710756742286817, 3.0121538876892093, 3.0827748029285273, 3.0959596223586505, 3.1990069012501996, 3.1468908830606952, 3.3369129544268668, 0.87500000000083289, 1.0222530122197959, 1.1633555181211508, 1.277711863195133, 1.370257990533875, 1.459372626897026, 1.5497486435137413, 1.6391053087779681, 1.727090652075058, 1.8139238366729264, 1.8994707726326123, 1.9836258389779462, 2.0663249572096714, 2.1474739820943558, 2.2270133042005642, 2.3048296897849445, 2.380911386861531, 2.4550690976757616, 2.5274357876484186, 2.597574477723211, 2.6660691219623067, 2.7316928448668167, 2.7964392749813074, 2.8566054204110456, 2.9185475608852514, 2.9709502956345863, 3.0333945393716411, 3.0718275362209315, 3.1445103192177934, 3.1525975727735007, 3.2608376294945147, 3.1996854642737058, 3.3994129544269236, 0.93750000000089229, 1.0845136076252775, 1.2279715129039683, 1.3471529962297744, 1.4419333592420114, 1.5306251655468752, 1.6206130645568309, 1.7099143695420917, 1.7977334462824306, 1.884336290832727, 1.9696363643539634, 2.0535069574329761, 2.1358870924025521, 2.2166818630284366, 2.295836657176237, 2.3732289793754084, 2.4488645897061798, 2.5225249062135693, 2.594394914478209, 2.6639490496140983, 2.7319250521041303, 2.796834551961628, 2.8611167089493961, 2.9203202599953095, 2.9820493268899013, 3.032939191421212, 3.0958866692498179, 3.1315863913760076, 3.2064155733215625, 3.2093834855707914, 3.3227355164931578, 3.2527762080563933, 3.4619129544269844, 1.0000000000009526, 1.1467239495295882, 1.2919539962627757, 1.4158458029466183, 1.5134726208444405, 1.6020088940674466, 1.6915074393813381, 1.7807313355398766, 1.8684123929176324, 1.9547884307938725, 2.0398451397133148, 2.1234380385418068, 2.2055049387729326, 2.285950729950927, 2.36472710201391, 2.441700089867926, 2.5168963696171436, 2.590062506646817, 2.6614446686507929, 2.7304137300590781, 2.797885322866668, 2.8620713914158733, 2.9259158565187233, 2.984129699540758, 3.045695426572347, 3.0950173222842348, 3.1585444254430137, 3.1914418392517687, 3.2684718787280373, 3.2663380842937433, 3.3846831963056117, 3.3061648208718784, 3.5244129544270457, 1.0625000000010119, 1.2089253885341855, 1.3553999447932388, 1.4837485622271083, 1.5847704643322951, 1.6735148713555708, 1.7624526504005198, 1.8515525578671013, 1.939123588034029, 2.025280608648298, 2.1100961211791138, 2.1934179356585561, 2.2751776389669347, 2.3552796159525622, 2.4336837422987783, 2.5102420516178858, 2.5850059090248108, 2.6576808834074384, 2.728584345340443, 2.7969674395088742, 2.863949328373971, 2.9274023457329412, 2.9908358642465225, 3.0480335672434946, 3.1094832517750479, 3.157187955949333, 3.2213595769242573, 3.2514052740144237, 3.3306619713154433, 3.3234783616917354, 3.4466689049771384, 3.3598489185513674, 3.5869129544271026, 1.1250000000010696, 1.2711474474951896, 1.4184081397306212, 1.5508464691489487, 1.6557191125369082, 1.7451170822157811, 1.8334708117709577, 1.9223781682798435, 2.0098618836104705, 2.0958128732125729, 2.1803886501127741, 2.263445427487186, 2.3449043147415876, 2.4246675711353989, 2.5027056744975309, 2.5788538939387555, 2.6531923849669696, 2.7253790288775721, 2.7958132142986729, 2.8636091421804375, 2.9301163737825013, 2.9928265457157712, 3.0558756286903903, 3.1120320596268671, 3.1734096953122952, 3.2194548956513374, 3.2843235585570252, 3.3114876950699252, 3.3929704390205573, 3.3808174726877485, 3.5086858091467805, 3.413823221768673, 3.6494129544271625, 1.1875000000011302, 1.3334092979474037, 1.4810746569798803, 1.6171504012274835, 1.7262145082301554, 1.8167720609096609, 1.9045821823882949, 1.9932128049225681, 2.080621472076011, 2.1663846170120955, 2.250722399771103, 2.33351927780119, 2.414684039256092, 2.4941136656612644, 2.5717919897728101, 2.6475346459944422, 2.7214549649945572, 2.7931559504736678, 2.8631305093489532, 2.9303378609043773, 2.9963856554729529, 3.0583432937384245, 3.1210337759263886, 3.1761257452176013, 3.2374711902187019, 3.2818223600719625, 3.3474277057829802, 3.3716993755245208, 3.4553840022666158, 3.4383648358775956, 3.5707312067206036, 3.4680806301768543, 3.7119129544272265, 1.2500000000011893, 1.3957214011955246, 1.5434891880637536, 1.6826943931390625, 1.7961620171819179, 1.8884199154154346, 1.9758019104985507, 2.0640657604232278, 2.1513967075567084, 2.236994293912252, 2.3210973065594951, 2.4036383155120342, 2.4845158165473396, 2.5636169859769118, 2.6409417766939414, 2.7162833396419073, 2.7897928006284509, 2.8610106809011575, 2.9305354136243258, 2.9971526983145815, 3.0627562331998255, 3.1239520976129636, 3.1863086262754705, 3.2403155891984565, 3.3016637195220668, 3.3442949077532802, 3.4106634167832226, 3.4320496485324576, 3.5178916202546628, 3.496126427401443, 3.6328056542626612, 3.5226131476514806, 3.7744129544272824, 1.312500000001249, 1.4580872102808933, 1.6057322505246421, 1.7475321242444619, 1.8654812978764055, 1.9599866326744118, 2.0471369312062238, 2.134950482224248, 2.2221830591929868, 2.3076392706107254, 2.3915134179652475, 2.4738015175261858, 2.5543985761428174, 2.6331766257897482, 2.7101541226015704, 2.7850990150667649, 2.858205016337132, 2.9289422941116974, 2.9980270363221666, 3.0640528692138194, 3.1292269851594958, 3.1896527296778738, 3.2516981222068937, 3.3046030329373819, 3.3659827411384033, 3.4068774869406826, 3.4740221445789743, 3.4925469090423031, 3.580484352939548, 3.5541052801671587, 3.6949120532834341, 3.5774126512170863, 3.8369129544273406, 1.3750000000013092, 1.5205048436273219, 1.6678732976319497, 1.8117327388176949, 1.934110084349262, 2.0313874518950286, 2.1185833117093602, 2.2058834298396963, 2.2929780662355155, 2.3783158641796258, 2.4619706796062295, 2.5440080748851295, 2.6243311840849524, 2.7027916729961818, 2.7794281118603914, 2.8539807335667984, 2.9266906918340165, 2.9969499313106316, 3.0656043750996549, 3.1310377567267338, 3.1957965288926373, 3.2554453359623787, 3.3171996798673886, 3.368990194358235, 3.4304229239560411, 3.4695757682258654, 3.5374949989882309, 3.5531990777987956, 3.643154773844838, 3.6123023050996959, 3.7570546561563671, 3.6324715273034331, 3.8994129544274037, 1.4375000000013682, 1.5829686586805052, 1.7299696743455848, 1.8753763196996702, 2.0020067268950497, 2.1025310206154955, 2.1901242965137375, 2.2768823593965952, 2.363782154496084, 2.4490195826799992, 2.5324686877192528, 2.6142574272745316, 2.6943124756118197, 2.7724611987070671, 2.8487628133311396, 2.9229275967712569, 2.9952488320212725, 3.0650328451017481, 3.1332662488967071, 3.1981070099189113, 3.2624630776906445, 3.3213306451485298, 3.3828098891878851, 3.4334802989498487, 3.4949775165308279, 3.5323970693069757, 3.6010714849686605, 3.6140151344460301, 3.7058953198133637, 3.6707178898067263, 3.8192377549803576, 3.6877832748205184, 3.9619129544274596, 1.5000000000014271, 1.6454706750656614, 1.7920663371140684, 1.9385493278220494, 2.0691514210258726, 2.1733240129714662, 2.2617292404780658, 2.3479641738511501, 2.4345991858438678, 2.5197455690169357, 2.6030064527071084, 2.6845492448744661, 2.7643412950779918, 2.8421842570249054, 2.9181572618393439, 2.9919387843462464, 3.0638783162471976, 3.1331904761841116, 3.2010111822265648, 3.2652607227985966, 3.3292241731535164, 3.387310362828921, 3.4485239315969549, 3.4980785453057988, 3.5596370349205402, 3.5953523832860488, 3.6647364465173262, 3.6750091830020595, 3.768693850891248, 3.7293557516277063, 3.8814631605333045, 3.7433434219984685, 4.0244129544275182, 1.5625000000014873, 1.7080018256194891, 1.8541962327389463, 2.0013402518703498, 2.1355461420384168, 2.2436758948497024, 2.3333535158588958, 2.419142512927277, 2.505436640139628, 2.590489202957678, 2.6735822159046077, 2.7548833666490316, 2.834416543115494, 2.9119598945348946, 2.9876104088523476, 3.0610136093046321, 3.1325778132642088, 3.2014225879561962, 3.2688371927107487, 3.3324997558592675, 3.3960761962525718, 3.4533879140816621, 3.5143344649392985, 3.5627937767683249, 3.6243867469244355, 3.6584603260571882, 3.7284636628428443, 3.7362100892489076, 3.831521875600076, 3.7882336806917594, 3.9437233865682426, 3.7991519413201225, 4.0869129544275857, 1.6250000000015465, 1.7705532240893416, 1.9163811407155151, 2.0638356586327662, 2.201213428847681, 2.3135034867051516, 2.4049394416028433, 2.4904253066996072, 2.57630533088905, 2.6612468118362478, 2.7441933624801602, 2.8252596796531195, 2.9045372084849177, 2.9817872019229719, 3.0571210652645471, 3.1301516163088259, 3.2013456292009494, 3.2697295033199612, 3.3367414223618597, 3.3998263189397138, 3.4630134639303845, 3.5195698178987933, 3.580229535323439, 3.6276416358465813, 3.6892018949715708, 3.7217543397252477, 3.7922041207668507, 3.7976817269742433, 3.8943047598017615, 3.8474150145654096, 4.0059798870697456, 3.8552215111349089, 4.149412954427639, 1.6875000000016065, 1.8331182403692594, 1.9786324947457703, 2.1261166308776085, 2.2661940315806506, 2.382735242637271, 2.4764182154936165, 2.5618124166000937, 2.6472186813603669, 2.7320164038581103, 2.8148364468561837, 2.8956779810351905, 2.9747023673989417, 3.0516653756747765, 3.1266877773528527, 3.1993527421466657, 3.2701794593102793, 3.3381125155626523, 3.404719472808639, 3.4672450138389834, 3.5300266076505111, 3.5858682143347287, 3.6461887029174265, 3.6926504641836564, 3.7540388053507483, 3.7852961103987051, 3.8558662174980851, 3.8595581981496059, 3.9568548928952052, 3.9070993561152054, 4.0680890002735932, 3.9116084106068811, 4.2119129544277012, 1.7500000000016658, 1.8956980078877061, 2.040949146594742, 2.188253964549721, 2.3305444732734597, 2.451316180147995, 2.5477127033084832, 2.6332933881322926, 2.7181915024449328, 2.8027983970240955, 2.8855073781431382, 2.9661378140907986, 3.0449111452454583, 3.1215938738948656, 3.1963086719000287, 3.26861757945561, 3.3390759478584982, 3.4065746076925478, 3.4727642669468128, 3.5347646747771515, 3.5970996489846518, 3.6523054407041968, 3.7121759489564865, 3.757872189350651, 3.8188183430504736, 3.8492004316213224, 3.9192785909661572, 3.9220934091096882, 4.0187582911975346, 3.967859726908348, 4.1295446011266366, 3.9685362788359315, 4.2744129544277607, 1.8125000000017246, 1.9583048915873327, 2.103291439076246, 2.2503008625362257, 2.3943480757022892, 2.5192226199459049, 2.618740859419844, 2.704843131933945, 2.7892379422785614, 2.873596241214345, 2.9562013198448032, 3.0366379127265564, 3.1151622149994052, 3.1915721860646169, 3.2659807365182489, 3.3379473813923393, 3.4080295047788405, 3.4751211813541496, 3.5408635661949854, 3.6024010820729435, 3.6642043352009024, 3.7189216840927628, 3.7781262622349483, 3.8234017107365785, 3.8833948070098399, 3.9136807347308151, 3.9821207773742926, 3.9857630862974123, 4.0792878457803043, 4.0310898942723448, 4.1886019272303221, 4.0269389791258652, 4.3369129544278149, 1.8750000000017846, 2.0209519267510667, 2.1655700995193583, 2.3124694343152292, 2.457945689987743, 2.5865854593610855, 2.6894285833640437, 2.7764134840707557, 2.8603824891155631, 2.9444360885778904, 3.0269314527709761, 3.1071961249269915, 3.1854761883470495, 3.2616248624576647, 3.3357261786514525, 3.4073737309385064, 3.4770622089454695, 3.5437954145983395, 3.6090321094771918, 3.6702201806260639, 3.7313310479459196, 3.7858315551655912, 3.8439669681370141, 3.8894595486910299, 3.9475486937632334, 3.9791854193079352, 4.0438481602483467, 4.0515086728505523, 4.1371632459418182, 4.0988402940840798, 4.2397788624032584, 4.0911753626303691, 4.3994129544278788, 1.9375000000018456, 2.0909919289238172, 2.2346387602693647, 2.3817105038784128, 2.5267758123579953, 2.6563075811452306, 2.7609929176324686, 2.8488985117504542, 2.9325948823104944, 3.0161590886416625, 3.0983127348886148, 3.1782329495963566, 3.2560797187510517, 3.3317779866042834, 3.4053527089894091, 3.4765002349520158, 3.5455361112944734, 3.6117641830902558, 3.6761515327629288, 3.7369510175366063, 3.7968301466462893, 3.8513546498163769, 3.9074269272923221, 3.9540465323681349, 4.0082117765318532, 4.0436143421891995, 4.1002425836176988, 4.1176091207020056, 4.1862761115184188, 4.1708639909189422, 4.2744001974886308, 4.1852515967316091, 4.4619129544279339, 2.0000000000019051, 2.093734741957971, 2.1873779535292228, 2.2808381937087105, 2.3740242001579439, 2.4668449783230173, 2.5592098902892468, 2.6510287432875561, 2.7422118777661799, 2.8326702549417071, 2.9223155437439239, 3.0110602070696229, 3.0988175872610926, 3.1855019907258355, 3.2710287716149291, 3.3553144144782441, 3.4382766158158833, 3.5198343644461243, 3.5999080206114886, 3.678419393745604, 3.7552918188249595, 3.8304502312310165, 3.9038212400495231, 3.9753331997354842, 4.0449162800738563, 4.1125025343675192, 4.178025965786115, 4.2414225918108226, 4.3026305067121786, 4.3615899420000019, 4.4182433247862853, 4.4725353340041663, 4.5244129544279925
        });
        // std::cout << "f size: " << model.f().size() << std::endl;
        // std::cout << "expected size: " << expected.size() << std::endl;
        
        // double rmse = 0;
        // for (int i = 0; i < model.f().size(); ++i) {
        //     rmse += (model.f()(i) - expected[i]) * (model.f()(i) - expected[i]);
        // }
        // rmse = std::sqrt(rmse / model.f().size());

        double rmse_f = 0;
        for (int j = 0; j < model.f().size(); ++j) {
            rmse_f += (model.f()(j) - expected[j]) * (model.f()(j) - expected[j]);
        }
        
        rmse_f = std::sqrt(rmse_f / model.f().size());

        double rmse_beta = std::sqrt((model.beta()(0) - beta1)*(model.beta()(0) - beta1));

        // std::cout << "dim of beta: " << model.beta().size() << std::endl;
        if(i==0){
            std::cout << "beta: " << model.beta()(0) << std::endl;
        }
        RMSEs_f(i) = rmse_f;
        RMSEs_beta(i) = rmse_beta;
        // EXPECT_TRUE(rmse < 100);
        EXPECT_TRUE(1);
        }
    } // end for
    // save MRSEs to file
    writeEigenVectorToCSV("RMSE_f_" + std::to_string(n) + ".csv", RMSEs_f);
    writeEigenVectorToCSV("RMSE_beta_" + std::to_string(n) + ".csv", RMSEs_beta);
    } // end for n loop 
}
*/


TEST(srpde, TransportTestCase1){

    for (int n = 6; n <= 14; n += 2){
        std::cout << "n: " << n << std::endl;
    constexpr std::size_t femOrder = 1;
    
    // define PDE coefficients
    SVector<2> bExact;  bExact << 1., 1.;
    SVector<2> b;  b << 1., 1.;
    double nu = 1e-3;
    double BL = nu;
    double stabParam = 1.3672; //1e5; //23.294; //6.03;
    // define exact solution
    auto solutionExpr = [&BL](SVector<2> x) -> double {
        return x[0]*x[1]*x[1] - x[1]*x[1]*exp((2*(x[0] - 1))/BL) - x[0]*exp(3*(x[1] - 1)/BL) + exp((2*(x[0] - 1) + 3*(x[1] - 1))/BL);
    };
    // forcing term
    using std::exp;
    auto forcingExpr = [&nu, &bExact, &BL](SVector<2> x) -> double {
        return bExact[0]*(x[1]*x[1] - exp((3*x[1] - 3)/BL) - 2*x[1]*x[1]*exp((2*x[0] - 2)/BL)/BL + 2*exp((2*x[0] + 3*x[1] - 5)/BL)/BL) + bExact[1]*(2*x[0]*x[1] - 2*x[1]*exp((2*x[0] - 2)/BL) - 3*x[0]*exp((3*x[1] - 3)/BL)/BL + 3*exp((2*x[0] + 3*x[1] - 5)/BL)/BL) - nu*(2*x[0] - 2*exp((2*x[0] - 2)/BL) - 9*x[0]*exp((3*x[1] - 3)/BL)/(BL*BL) - 4*x[1]*x[1]*exp((2*x[0] - 2)/BL)/(BL*BL) + 13*exp((2*x[0] + 3*x[1] - 5)/BL)/(BL*BL));
    };
    ScalarField<2> forcing(forcingExpr);
    
    // define domain 
    MeshLoader<Mesh2D> domain("unit_square_64");
        
    //define regularizing PDE
    PDEparameters<decltype(nu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b)>::getInstance(nu, b);
    
    auto L = - nu * laplacian<FEM>() + advection<FEM>(b);
    
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b)> pde_(domain.mesh, L, boundary_matrix);
    pde_.set_forcing(forcing);
    pde_.set_stab_param(stabParam); //1.075);
    
    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    // DMatrix<double> sol_at_nodes(nodes_.rows(), 1);
    // set exact sol & dirichlet conditions at PDE level
    for (int i = 0; i < nodes_.rows(); ++i) {
        // sol_at_nodes(i) = solutionExpr(nodes_.row(i));
        dirichletBC(i) = 0.; //solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    
    // define smoothing parameter
    double lambda = 1e-3; //1e3; //0.1;
    
    // prepare data for testing 
    std::default_random_engine generator(123);

    DMatrix<double> locs = read_csv<double>("../data/transport/TransportTestCase1/locs" + std::to_string(n) + ".csv");
    DMatrix<double> observations = read_csv<double>("../data/transport/TransportTestCase1/observations" + std::to_string(n) + ".csv");
    std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));        
    
    std::size_t constexpr Ntests = 50;
    DVector<double> RMSEs(Ntests);
    for (int i = 0; i < Ntests; i++){
        // add noise to observations (5% of the range of the exact solution values)        
        DMatrix<double> y(n*n, 1);
        // std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));
        for (int j = 0; j < n*n; ++j)
            y(j, 0) = observations(j) + distribution(generator);  // generate noisy observations

        // begin test 
        {   
        SRPDE model(pde_, Sampling::pointwise);
        model.set_lambda_D(lambda);
        model.set_spatial_locations(locs);
        // set model's data
        BlockFrame<double, int> df;
        df.insert(OBSERVATIONS_BLK, y);
        model.set_data(df);
        // solve smoothing problem
        model.init();
        // model.set_dirichlet_bc(model.A(), model.b());
        model.solve();
        
        // result from the perturbed PDE
        DVector<double> expected = read_csv<double>("../data/transport/TransportTestCase1/expected.csv");
        // std::cout << "f size: " << model.f().size() << std::endl;
        // std::cout << "expected size: " << expected.size() << std::endl;

        // double rmse = 0;
        // for (int i = 0; i < model.f().size(); ++i) {
        //     rmse += (model.f()(i) - expected(i, 0)) * (model.f()(i) - expected(i, 0));
        // }
        // rmse = std::sqrt(rmse / model.f().size());
        // RMSEs(i) = rmse;

        // compute the RMSE just by doing the L2 norm of the difference between expected and model.f()
        double rmse = (expected - model.f()).norm(); // / expected.norm();
        RMSEs(i) = rmse;

        if(i==0){
        // std::cout << "saving model to file" << std::endl;
        std::ofstream file("modelf" + std::to_string(n) + ".txt");
        if (file.is_open()){
            for(int i = 0; i < model.f().size(); ++i)
                file << std::setprecision(17) << model.f()(i) << '\n';
            file.close();
        } else {
            std::cerr << "transport test unable to save solution" << std::endl;
        }
        }
        // EXPECT_TRUE(RMSE < 100);
        EXPECT_TRUE(1);
        }
    } // end for
    // save MRSEs to file
    writeEigenVectorToCSV("RMSE_" + std::to_string(n) + ".csv", RMSEs);
    }
}
*/

/*
TEST(srpde, TransportTestCase1_Perturbed_kFold){

    for (int n = 5; n <= 25; n += 5){
        std::cout << "n: " << n << std::endl;
    constexpr std::size_t femOrder = 1;
    
    // define PDE coefficients
    SVector<2> b;  b << 1., 1.;
    double nu = 1e-6;
    double BL = 0.1;
    
    // double stabParam = 1e5; 
    double stabParam = 23.294; 
    // double stabParam = 6.03;

    // define exact solution
    auto solutionExpr = [&BL](SVector<2> x) -> double {
        return x[0]*x[1]*x[1] - x[1]*x[1]*exp((2*(x[0] - 1))/BL) - x[0]*exp(3*(x[1] - 1)/BL) + exp((2*(x[0] - 1) + 3*(x[1] - 1))/BL);
    };
    // forcing term
    using std::exp;
    auto forcingExpr = [&nu, &b, &BL](SVector<2> x) -> double {
        return b[0]*(x[1]*x[1] - exp((3*x[1] - 3)/BL) - 2*x[1]*x[1]*exp((2*x[0] - 2)/BL)/BL + 2*exp((2*x[0] + 3*x[1] - 5)/BL)/BL) + b[1]*(2*x[0]*x[1] - 2*x[1]*exp((2*x[0] - 2)/BL) - 3*x[0]*exp((3*x[1] - 3)/BL)/BL + 3*exp((2*x[0] + 3*x[1] - 5)/BL)/BL) - nu*(2*x[0] - 2*exp((2*x[0] - 2)/BL) - 9*x[0]*exp((3*x[1] - 3)/BL)/(BL*BL) - 4*x[1]*x[1]*exp((2*x[0] - 2)/BL)/(BL*BL) + 13*exp((2*x[0] + 3*x[1] - 5)/BL)/(BL*BL));
    };
    ScalarField<2> forcing(forcingExpr);
    
    // define domain 
    MeshLoader<Mesh2D> domain("unit_square_64");
        
    //define regularizing PDE
    PDEparameters<decltype(nu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b)>::getInstance(nu, b);
    
    auto L = - nu * laplacian<FEM>() + advection<FEM>(b);
    
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b)> pde_(domain.mesh, L, boundary_matrix);
    pde_.set_forcing(forcing);
    pde_.set_stab_param(stabParam);
    
    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    // DMatrix<double> sol_at_nodes(nodes_.rows(), 1);
    // set exact sol & dirichlet conditions at PDE level
    for (int i = 0; i < nodes_.rows(); ++i) {
        // sol_at_nodes(i) = solutionExpr(nodes_.row(i));
        dirichletBC(i) = 0.; //solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    
    // prepare data for testing 
    std::default_random_engine generator(123);

    DMatrix<double> locs = read_csv<double>("../data/transport/TransportTestCase1/locs" + std::to_string(n) + ".csv");
    DMatrix<double> observations = read_csv<double>("../data/transport/TransportTestCase1/observations" + std::to_string(n) + ".csv");
    std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));        
    
    std::size_t constexpr Ntests = 5;
    DVector<double> RMSEs(Ntests);
    for (int i = 0; i < Ntests; i++){
        // add noise to observations (5% of the range of the exact solution values)        
        DMatrix<double> y(n*n, 1);
        // std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));
        for (int j = 0; j < n*n; ++j)
            y(j, 0) = observations(j) + distribution(generator);  // generate noisy observations

        double optimumLambda = 0.0;
        std::cout << "n = " << n << ", test " << i << "/" << Ntests << std::endl;
        // begin test - kFold cross validation
        {
            SRPDE model(pde_, Sampling::pointwise);
            model.set_spatial_locations(locs);
            // set model's data
            BlockFrame<double, int> df;
            df.insert(OBSERVATIONS_BLK, y);
            model.set_data(df);
            model.init();    
            // define KCV engine and search for best lambda which minimizes the model's RMSE
            std::size_t n_folds = 10; //std::ceil(y.rows() / 10.0);
            // std::cout << "n = " << n << ", n_folds = " << n_folds << std::endl;
            std::cout << "n = " << n << ", bservations = " << y.rows() << ", points per fold = " << y.rows() / n_folds << std::endl;
            KCV kcv(n_folds);

            std::vector<DVector<double>> lambdas;
            for (double x = -3.0; x <= 3.0; x += 0.5) lambdas.push_back(SVector<1>(std::pow(10, x)));
            kcv.fit(model, lambdas, RMSE(model));
            
            // print results and set optimal lambda
            optimumLambda = kcv.optimum()[0];
            std::cout << "n = " << n << ", kcv optimum lambda: " << optimumLambda << std::endl;
            double optimumLambdaIndex = 0;
            for (std::size_t i = 0; i < lambdas.size(); ++i) {
                if (almost_equal(kcv.optimum()[0], lambdas[i][0], 1e-6)) {
                    std::cout << "n = " << n << ", optimal lambda index: " << i << "/" << lambdas.size() << std::endl;
                    optimumLambdaIndex = i;
                    break;
                }
            }
            std::cout << "n = " << n << ", best E[RMSE]: " << kcv.avg_scores()[optimumLambdaIndex] << std::endl;
        }
        // solve the model with the optimum lambda found 
        {
            SRPDE model(pde_, Sampling::pointwise);
            model.set_lambda_D(optimumLambda);
            model.set_spatial_locations(locs);
            // set model's data
            BlockFrame<double, int> df;
            df.insert(OBSERVATIONS_BLK, y);
            model.set_data(df);
            // solve smoothing problem
            model.init();
            // model.set_dirichlet_bc(model.A(), model.b());
            model.solve();
            DVector<double> expected = read_csv<double>("../data/transport/TransportTestCase1/expected.csv");
            // std::cout << "f size: " << model.f().size() << std::endl;
            // std::cout << "expected size: " << expected.size() << std::endl;

            double rmse = 0;
            for (int i = 0; i < model.f().size(); ++i) { rmse += (model.f()(i) - expected(i, 0)) * (model.f()(i) - expected(i, 0)); }
            rmse = std::sqrt(rmse / model.f().size());
            RMSEs(i) = rmse;

            if (i == 0){
            // std::cout << "saving model to file" << std::endl;
            std::ofstream file("modelf" + std::to_string(n) + ".txt");
            if (file.is_open()){
                for(int i = 0; i < model.f().size(); ++i)
                    file << std::setprecision(17) << model.f()(i) << '\n';
                file.close();
            } else {
                std::cerr << "transport test unable to save solution" << std::endl;
            }
            }
            // EXPECT_TRUE(RMSE < 100);
            
        }
    } // end for Ntests loop
    // save MRSEs to file
    writeEigenVectorToCSV("RMSE_" + std::to_string(n) + ".csv", RMSEs);
    }   // end for n loop
    EXPECT_TRUE(1);
}
*/
/*
TEST(srpde, TransportTestCase1_covariates){
    for (int n = 35; n <= 40; n += 5){
        std::cout << "n: " << n << std::endl;
    constexpr std::size_t femOrder = 1;
    
    // define PDE coefficients
    SVector<2> b;  b << 1., 0.;
    double nu = 1e-9;
    // define exact solution
    auto solutionExpr = [&nu](SVector<2> x) -> double {
        return x[0]*x[1]*x[1] - x[1]*x[1]*exp((2*(x[0] - 1))/nu) - x[0]*exp(3*(x[1] - 1)/nu) + exp((2*(x[0] - 1) + 3*(x[1] - 1))/nu);
    };
    // forcing term
    using std::exp;
    auto forcingExpr = [&nu, &b](SVector<2> x) -> double {
        return b[0]*(x[1]*x[1] - exp((3*x[1] - 3)/nu) - 2*x[1]*x[1]*exp((2*x[0] - 2)/nu)/nu + 2*exp((2*x[0] + 3*x[1] - 5)/nu)/nu) + b[1]*(2*x[0]*x[1] - 2*x[1]*exp((2*x[0] - 2)/nu) - 3*x[0]*exp((3*x[1] - 3)/nu)/nu + 3*exp((2*x[0] + 3*x[1] - 5)/nu)/nu) - nu*(2*x[0] - 2*exp((2*x[0] - 2)/nu) - 9*x[0]*exp((3*x[1] - 3)/nu)/(nu*nu) - 4*x[1]*x[1]*exp((2*x[0] - 2)/nu)/(nu*nu) + 13*exp((2*x[0] + 3*x[1] - 5)/nu)/(nu*nu));
    };
    ScalarField<2> forcing(forcingExpr);
    
    // define domain 
    MeshLoader<Mesh2D> domain("unit_square_32");
        
    //define regularizing PDE
    PDEparameters<decltype(nu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b)>::getInstance(nu, b);
    
    auto L = - nu * laplacian<FEM>() + advection<FEM>(b);
    
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);
    
    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b)> pde_(domain.mesh, L, boundary_matrix);
    pde_.set_forcing(forcing);
    pde_.set_stab_param(2.075);
    
    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    // DMatrix<double> sol_at_nodes(nodes_.rows(), 1);
    // set exact sol & dirichlet conditions at PDE level
    for (int i = 0; i < nodes_.rows(); ++i) {
        // sol_at_nodes(i) = solutionExpr(nodes_.row(i));
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    
    // define smoothing parameter
    double lambda = 1e-3;
    
    // prepare data for testing 
    std::default_random_engine generator(123);
    // const int n = 50;          // number of observations in each dimension
    const double minVal = 0.0;  // min domain value (unit square)
    const double maxVal = 1.0;  // max domain value (unit square)
    DVector<double> x = DVector<double>::LinSpaced(n, minVal, maxVal);
    DMatrix<double> locs(n*n, 2);   // matrix of spatial locations p_1, p2_, ... p_n
    DMatrix<double> observations = read_csv<double>("../data/transport/TransportTestCase1/observations" + std::to_string(n) + ".csv");
    
    DMatrix<double> X = DMatrix<double>::Zero(n*n, 1);  // design matrix to add covariates
    // std::normal_distribution<double> covariate_distribution(0.0, 0.1);
    double beta1 = -1.0;    // coefficient for covariate
    // double beta2 = 2.0;     // coefficient for covariate
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            // sol_at_locations(i*n + j) = solutionExpr(SVector<2>({x(i), x(j)}));
            locs(i*n + j, 0) = x(i);
            locs(i*n + j, 1) = x(j);

            X(i*n + j, 0) = locs(i*n + j, 0) * locs(i*n+j, 1);  // populate design matrix
            // X(i*n + j, 0) = x(i)+x(j); // covariate_distribution(generator);  
        }
    }
    
    std::size_t constexpr Ntests = 50;
    DVector<double> RMSEs_f(Ntests);
    DVector<double> RMSEs_beta(Ntests);
    for (int i = 0; i < Ntests; i++){
        // add noise to observations (5% of the range of the exact solution values)        
        DMatrix<double> y(n*n, 1);
        std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));
        for (int i = 0; i < n*n; ++i)
            // y(i, 0) = beta1*X(i, 0) + beta2*X(i,1) + observations(i) + distribution(generator);  // generate noisy observations with covariate
            y(i, 0) = beta1*X(i, 0) + observations(i) + distribution(generator);  // generate noisy observations with covariate
            // y(i, 0) = observations(i) + distribution(generator);  // generate noisy observations

        // begin test 
        {   
        SRPDE model(pde_, Sampling::pointwise);
        model.set_lambda_D(lambda);
        model.set_spatial_locations(locs);
        // set model's data
        BlockFrame<double, int> df;
        df.insert(OBSERVATIONS_BLK, y);
        df.insert(DESIGN_MATRIX_BLK, X);
        model.set_data(df);
        // solve smoothing problem
        model.init();
        model.set_dirichlet_bc(model.A(), model.b());
        model.solve();
        
        // result from the perturbed PDE
        std::vector<double> expected({
            6.5717346182471679e-38, -4.9735306030230158e-39, -3.3718207008810351e-38, -4.0438278052105142e-38, -3.740840974755739e-38, -3.1513105771002782e-38, -2.6094241333657618e-38, -2.2358957968497644e-38, -2.0376323355800788e-38, -1.9726336771759172e-38, -1.9879738200127578e-38, -2.0386793492863528e-38, -2.0943297613767393e-38, -2.1387386990957695e-38, -2.1665175439842289e-38, -2.1789230289516291e-38, -2.1802799476416947e-38, -2.1754866149473241e-38, -2.1686294626788859e-38, -2.1624965678941452e-38, -2.1587204235718556e-38, -2.1583401415398312e-38, -2.162707736942787e-38, -2.1748385100874807e-38, -2.2014370445997076e-38, -2.2556547483782156e-38, -2.3593003004852424e-38, -2.5384769650556521e-38, -2.7932857110312208e-38, -2.9911893238216015e-38, -2.576983619563541e-38, 6.1237821457027603e-40, 1.9942508906954382e-71, 5.6621042123475943e-37, 1.9453951298416568e-05, 2.5308501902872811e-05, 2.4858889293372548e-05, 2.2250635121218871e-05, 1.9556963638372914e-05, 1.7593944035006149e-05, 1.6495720009696233e-05, 1.6089613496150201e-05, 1.6117465872791016e-05, 1.6348220162384725e-05, 1.6620471615733679e-05, 1.6845158840826043e-05, 1.6989729901640735e-05, 1.7057288614170953e-05, 1.7068059393475604e-05, 1.7046163424572644e-05, 1.701200405541357e-05, 1.6979168901413212e-05, 1.6954266091185653e-05, 1.6938139155234454e-05, 1.6927116583724038e-05, 1.6913068554832559e-05, 1.6880800544034984e-05, 1.6800469529463793e-05, 1.6611145117705644e-05, 1.6190019531286093e-05, 1.5303471121318975e-05, 1.3552619163645862e-05, 1.038805619496448e-05, 5.4457998280525739e-06, -1.316827693411586e-07, -2.8904054085914196e-39, 2.0015728469996768e-36, 0.00011919215653410826, 0.00019157473392408963, 0.00023038318757469893, 0.00024730945695351244, 0.00025152331265813037, 0.00024950410400394012, 0.00024535030241698964, 0.0002413079717228866, 0.00023833909196569142, 0.00023662308136598092, 0.00023594247343230635, 0.00023594405548810638, 0.0002362909160771556, 0.00023673186673612984, 0.000237116456261223, 0.00023738000759796607, 0.00023751683047627182, 0.00023755315387073432, 0.00023752564440965361, 0.00023746713810114732, 0.00023739832405800682, 0.00023732202068300814, 0.00023721428256958627, 0.00023700198186008863, 0.0002365062968175247, 0.00023530987936098269, 0.00023246362938415135, 0.00022587992024470494, 0.00021117919510016446, 0.00017978198961609727, 0.00011659695423887729, 2.5573037051975657e-36, 4.340618373228161e-36, 0.00029585059190103232, 0.000516443528905841, 0.00067211633845323077, 0.00077459203190253178, 0.00083612120096375063, 0.00086834338474243598, 0.00088134875230194384, 0.00088313848684906519, 0.00087949513673162439, 0.00087417227050533384, 0.00086927620386117782, 0.00086571894404579913, 0.00086365054406529118, 0.00086281516616380902, 0.00086280813771720359, 0.00086323591407122448, 0.00086379572560408441, 0.00086429782718012548, 0.00086465293940368216, 0.00086484314893492896, 0.00086488818957629961, 0.00086481159412826422, 0.0008646018679781105, 0.00086414870867405967, 0.00086310314017024135, 0.00086053973331990698, 0.00085413708457016493, 0.00083823275627426506, 0.0007993482658179864, 0.00070629145988502931, 0.00048938070177535916, 1.2471597291648316e-35, 7.5768913706090486e-36, 0.00054857027242689958, 0.0009934581577003478, 0.0013453215562807077, 0.0016145096899025703, 0.0018118390923516458, 0.001948847538536474, 0.0020374814727638453, 0.0020894336600120892, 0.0021154044340727699, 0.002124503491528899, 0.0021239101804957578, 0.0021188145721547777, 0.0021125928403248648, 0.0021071351783160746, 0.0021032384847935091, 0.002100990085873358, 0.0021000926769742302, 0.0021001060121320766, 0.0021006019856940608, 0.0021012437921414384, 0.0021018059756693066, 0.0021021502636789165, 0.0021021604982635602, 0.002101611771835433, 0.0020998828481398053, 0.0020952616070293167, 0.0020832022574753051, 0.0020519394434058394, 0.0019715793266410174, 0.0017674578084269016, 0.0012565552865408717, 3.4841559290147678e-35, 1.1712353874090414e-35, 0.00087757815012072212, 0.0016228397306480926, 0.0022465417544563675, 0.002759420071680957, 0.0031719771422045948, 0.0034947157832910603, 0.0037384904106493306, 0.0039146786516355862, 0.0040350411827646043, 0.0041113003149817456, 0.0041545675927413487, 0.0041747776260879247, 0.0041802571235793375, 0.0041775015357515587, 0.0041711714191171988, 0.0041642731789268772, 0.0041584617037489684, 0.0041543955046439872, 0.0041520834583362335, 0.0041511791941039747, 0.0041511973614142125, 0.0041516384804564993, 0.0041520070351290942, 0.0041516741401060311, 0.0041494297025186566, 0.0041422805928659854, 0.0041222971590124564, 0.0040683660032378513, 0.0039247517361353087, 0.0035459241551345794, 0.0025563852563741515, 7.4754450708718764e-35, 1.6747105813431732e-35, 0.0012828901616877253, 0.0024048460164878254, 0.003376597928346946, 0.0042088962261203284, 0.0049125117506863894, 0.0054980981211894316, 0.0059761781593181589, 0.0063573076119131707, 0.0066523088871775094, 0.0068724200558045873, 0.0070292483338942752, 0.0071345022271726384, 0.0071995565323317466, 0.007234952254286278, 0.0072499420474066243, 0.0072521684242181144, 0.0072475210974512995, 0.0072401762788945594, 0.0072327855501986751, 0.0072267603901402088, 0.0072225900114674417, 0.0072201284705932546, 0.007218777790404406, 0.0072174463388059761, 0.0072140015577526742, 0.0072034718955318331, 0.0071729781012478191, 0.0070879531967642994, 0.0068551424324052772, 0.0062240923791487147, 0.004527151191719583, 1.3729682829568513e-34, 2.2681060145099716e-35, 0.0017644962230128852, 0.0033394493910632664, 0.0047355867270119003, 0.0059636346974283258, 0.00703433123570852, 0.0079584456231205081, 0.0087467178725620445, 0.0094097868134552995, 0.009958199343640884, 0.010402528492345282, 0.010753548847703288, 0.01102237433842689, 0.011220469531143449, 0.011359489101297072, 0.011450957042866279, 0.011505845024770207, 0.011534134350982153, 0.011544445002889078, 0.011543793184846097, 0.011537504669450584, 0.011529273357336674, 0.011521315671840889, 0.011514521757129276, 0.011508405452601797, 0.011500396098842841, 0.011483295469346944, 0.011437725296732548, 0.011310905367885506, 0.010958176053392693, 0.009983395462685488, 0.0073064788135559777, 2.2754111261138044e-34, 2.9514213149208151e-35, 0.002322395666002819, 0.0044266384457115103, 0.0063234571383444628, 0.0080235794687494814, 0.009537730629697462, 0.01087663865484635, 0.012051055173404181, 0.013071744356582928, 0.013949432831838967, 0.0146947628628653, 0.015318301304675382, 0.015830625946289232, 0.016242463539916634, 0.016564817790381461, 0.016809017031246827, 0.016986631182610509, 0.017109245326365079, 0.017188117736233501, 0.017233779939222676, 0.017255647015118652, 0.017261694414992351, 0.017258220475022314, 0.017249638621597646, 0.017238081301316741, 0.017222196804198849, 0.017193443639445066, 0.01712521198714409, 0.016941844661656335, 0.016431780889671243, 0.015006140992881068, 0.011031864531687498, 3.5054717016850319e-34, 3.7246569673564152e-35, 0.0029565890523357719, 0.0056664148934860836, 0.0081402064600875831, 0.010388692781443507, 0.012422602395954671, 0.01425266138077377, 0.015889593548318977, 0.017344133650878314, 0.018627036551670837, 0.019749061122797739, 0.020720930512528244, 0.02155329650853053, 0.022256743427645588, 0.022841850784940044, 0.023319303405331209, 0.023700008515071841, 0.02399516493443761, 0.024216235143327859, 0.024374793249032963, 0.024482250866131323, 0.024549484800841952, 0.024586387365090473, 0.024601300508221534, 0.024600101660103884, 0.02458416593194852, 0.024544920653845819, 0.024448490009771666, 0.024192097789499677, 0.023480748034761877, 0.021480102927080615, 0.015843824003736896, 5.114392208508037e-34, 4.5878129911391343e-35, 0.0036670764190885048, 0.0070587793732415933, 0.010185837699048815, 0.013058980297318688, 0.015688936254591092, 0.018086434704266678, 0.020262203359469915, 0.022226966367186411, 0.023991449427338218, 0.025566390788032283, 0.026962545069143831, 0.028190667932552475, 0.029261483933336888, 0.030185656589604849, 0.030973786639334037, 0.031636456102020684, 0.032184315317737307, 0.032628186597876044, 0.032979140945611454, 0.033248498559248968, 0.033447705999150756, 0.033588036259065354, 0.03367999892626778, 0.033732124997318196, 0.033748102142271232, 0.033719232677731137, 0.033603461252126605, 0.033265948552081308, 0.032310055703706056, 0.029597280768555286, 0.021887507402337001, 7.1548800594286825e-34, 5.5408893559693645e-35, 0.0044538577311776023, 0.0086037317743785195, 0.012460350958958696, 0.016034444106598766, 0.019336740062802556, 0.022377967831320438, 0.025168856727577581, 0.027720135727784378, 0.030042531199536874, 0.03214676699555865, 0.034043570469288603, 0.035743681080479955, 0.037257852120617545, 0.038596837552505231, 0.039771365461478296, 0.040792111393160108, 0.041669691167751099, 0.042414688588179761, 0.043037718499814553, 0.043549503156098707, 0.043960911311524214, 0.044282864965914145, 0.044525914051632441, 0.044698978251847252, 0.044805863087863329, 0.044835547989716312, 0.044734697929440861, 0.044329169882946148, 0.043099236977864004, 0.039536184425515437, 0.029304016254027565, 9.6794415989091821e-34, 6.5838860606453137e-35, 0.0053169329862298477, 0.010301272056595628, 0.014963746047190453, 0.019315083789969462, 0.023366014103660314, 0.027127265795520231, 0.030609567746063632, 0.033823649147076924, 0.036780239481070627, 0.039490067135471429, 0.041963857733582917, 0.044212335364528586, 0.04624622827655997, 0.048076275799051049, 0.049713229385520009, 0.051167841653426437, 0.052450843629582258, 0.053572918622124786, 0.0545446852975136, 0.055376696254121636, 0.056079433642040752, 0.056663222478760399, 0.057137830735675951, 0.057511115920762683, 0.057784914094610888, 0.057943002197695853, 0.057916214862395794, 0.05748160626863081, 0.055971252693362707, 0.051432440481282544, 0.03820992785450468, 1.2734599527997755e-33, 7.7168031071981072e-35, 0.0062563021865945471, 0.01215140022737668, 0.017696022958869781, 0.022900899218213124, 0.027776757841249916, 0.032334327653415311, 0.036584337453773388, 0.040537516037784341, 0.044204592377609236, 0.047596295882603556, 0.050723355942909477, 0.053596500451264184, 0.056226454713280763, 0.05862394305239562, 0.060799693809102238, 0.062764444905411526, 0.064528944132856286, 0.066103938116694891, 0.067500146198766625, 0.068728215585136962, 0.06979863993898662, 0.070721566754097409, 0.07150624403660466, 0.072159349858474719, 0.072679984033522618, 0.073044853982693253, 0.073164840319795879, 0.072758248363374592, 0.070981939863984392, 0.065360022007771218, 0.04867835131748003, 1.6353696953557975e-33, 8.939640495711394e-35, 0.0072719653324368905, 0.014154116289453671, 0.020657181707099036, 0.026791890421728047, 0.032568971270628987, 0.037999153092237836, 0.04309316472106392, 0.047861734969108852, 0.052315592607606265, 0.056465466444981578, 0.060322085593469063, 0.063896179558428773, 0.067198477546327698, 0.070239707078101052, 0.073030593169371605, 0.075581859652466596, 0.07790423260018213, 0.080008442335043922, 0.081905215648920199, 0.083605241999578514, 0.085119076944203009, 0.086456881525760199, 0.087627695430118432, 0.088637338157352155, 0.089482249610462583, 0.090131352000385509, 0.090472706346829662, 0.090156991657994748, 0.088139232982785462, 0.081339655975967456, 0.060737696381701442, 2.0553816462516711e-33, 1.0252398226043439e-34, 0.0083639224235934478, 0.016309420242303405, 0.023847222292148369, 0.030988057409127912, 0.037742654429294163, 0.044121742189402256, 0.050136049528216389, 0.05579630528597064, 0.061113238292349402, 0.06609757733580765, 0.070760051161652876, 0.075111388621612263, 0.079162318910259002, 0.082923571466707313, 0.086405875089179573, 0.089619956339435161, 0.092576537821381449, 0.095286336074234895, 0.097760054607445815, 0.10000835620597806, 0.1020417687937222, 0.10387039594362922, 0.10550305922779031, 0.1069447768028407, 0.10818934021785789, 0.10919742584924783, 0.10983204450193258, 0.10966835815461129, 0.10743413080785812, 0.099366008631528793, 0.074388748686252434, 2.5339345504232957e-33, 1.1655076298173895e-34, 0.0095321734600512173, 0.018617312085740717, 0.027266144713113262, 0.03548940017821952, 0.043297807317018586, 0.050702094965369558, 0.057712991959310699, 0.064341227136383461, 0.070597529337529011, 0.076492627403168492, 0.082037250148665211, 0.087242126324249131, 0.092117984638693168, 0.096675553896473851, 0.10092556304355761, 0.10487874055696178, 0.10854581229785742, 0.11193749626303508, 0.11506448960791031, 0.11793743247522176, 0.12056679952764704, 0.12296257101371087, 0.1251332436232544, 0.12708288037522231, 0.12880234865134357, 0.13024334376209118, 0.1312414588843262, 0.13128858685079159, 0.12886035811044691, 0.11943127019295151, 0.089625039354490746, 3.070898090808084e-33, 1.3147674712121204e-34, 0.010776718441782657, 0.021077791819718743, 0.030913948969900969, 0.040295918728418076, 0.049234429931277919, 0.05774021141440408, 0.065823992013528537, 0.073496500564160128, 0.080768465902080394, 0.087650616865098438, 0.094153682293390745, 0.10028839101317012, 0.10606547178387071, 0.11149565321696368, 0.11658966367152196, 0.12135823091532209, 0.12581208067591265, 0.12996193165331668, 0.13381848042086533, 0.13739235738715252, 0.14069399749630787, 0.14373325609821061, 0.14651826189355999, 0.14905199091729385, 0.15132204947751884, 0.15327025228382235, 0.15470215872623944, 0.1550183776337036, 0.15241738952378839, 0.14153319731184222, 0.10644328232372736, 3.6661041376011695e-33, 1.4730193468272708e-34, 0.01209755736891073, 0.023690859444196011, 0.034790635062036626, 0.045407613058818602, 0.055552522270875274, 0.0652360915343278, 0.074469049684953742, 0.08326212555811173, 0.091626047988425496, 0.09957154580916712, 0.10710934785183196, 0.11425018294239642, 0.12100477987990574, 0.1273838673517452, 0.13339817369661247, 0.13905842629586276, 0.14437534985055955, 0.14935966111553134, 0.15402205265156979, 0.15837314350334702, 0.16242333127308514, 0.16618234996570314, 0.16965794848063068, 0.17285193987102573, 0.1757483941069698, 0.17827837925260426, 0.18021477161464161, 0.18085875359854536, 0.17810642186290646, 0.16567269829863993, 0.12484361770981692, 4.3195070147859824e-33, 1.6402632565448924e-34, 0.013494690242276107, 0.026456514961729603, 0.038896202992993921, 0.050824483171516992, 0.062252084334039982, 0.073189735318362467, 0.083648164962435975, 0.09363810210332503, 0.10317027557621201, 0.11225541421318808, 0.12090424684114634, 0.12912750227454486, 0.13693590929473107, 0.1443401965807396, 0.15135109248101905, 0.15797932431240724, 0.16423561628762762, 0.17013068338046516, 0.17567521295133423, 0.18087980935900999, 0.18575482708471552, 0.19030986912388101, 0.19455228155059295, 0.19848264006336383, 0.20208122724814773, 0.2052675458724621, 0.20777919732471983, 0.20880983329188527, 0.20592790892348914, 0.19185054325922196, 0.1448268134539728, 5.0311257054682258e-33, 1.8164991994978594e-34, 0.014968117056294557, 0.029374758367769163, 0.043230652769928747, 0.056546529092010633, 0.069333116161061095, 0.08160114280731956, 0.09336133786770788, 0.10462443018589304, 0.1154011486088993, 0.1257022219813847, 0.13553837913867867, 0.1449203488948298, 0.15385886001554872, 0.162364641139076, 0.17044842053460599, 0.17812092535493146, 0.18539287935456775, 0.19227499599493192, 0.19877795770092627, 0.20491235346749104, 0.21068849100659814, 0.21611583127774461, 0.22120128743192732, 0.22594411154843005, 0.23032053660227167, 0.23423768048689789, 0.23739529517038127, 0.23887143725208021, 0.23588171323795368, 0.22006674431371423, 0.16639305893228257, 5.8009756724657074e-33, 2.0017271813909035e-34, 0.01651783779919614, 0.032445589597637513, 0.04779398427358976, 0.062573750696708272, 0.07679561770463976, 0.090470314099625998, 0.10360856866393182, 0.11622111018431558, 0.12831866747318871, 0.13991196937734446, 0.1510117447706906, 0.16162872252865809, 0.1717736314784441, 0.18145720028929202, 0.19069015718636806, 0.19948322911565186, 0.20784713922656078, 0.2157925992471891, 0.22333028641076377, 0.23047077377174841, 0.23722432000115148, 0.24360023553861535, 0.24960497249884891, 0.25523637194500198, 0.26046634854585576, 0.26518880564055664, 0.26906306262188223, 0.27104351141686589, 0.26796771846683431, 0.25032114804282168, 0.18954224114787532, 6.629057283154479e-33, 2.195947215425638e-34, 0.018143852669149866, 0.035669008944418316, 0.052586197584182787, 0.068906147545347129, 0.084639587910107589, 0.099797247749104298, 0.11438985600054377, 0.12842814141888262, 0.14192283260453356, 0.15488465809054591, 0.16732434644413963, 0.17925262633839142, 0.19068022655660311, 0.20161787587738711, 0.21207630271716824, 0.22206623413537119, 0.23159839297005155, 0.24068348932887471, 0.24933219498868781, 0.25755506605641715, 0.26536230928623722, 0.27276307618756529, 0.279763331497422, 0.28635942101777961, 0.29251867394903297, 0.29812094322835081, 0.30278252429624508, 0.30532608306732628, 0.30218593228838059, 0.28261373158904018, 0.21427430418498872, 7.5153677533652444e-33, 2.3991590859770869e-34, 0.019846161563721935, 0.039045017695717103, 0.057607296136200879, 0.075543724486684311, 0.092865030986987868, 0.10958194484895926, 0.12570519608040615, 0.14124551497536228, 0.15621363153905643, 0.17062027507655278, 0.18447617406069769, 0.19779205626836871, 0.2105786490770048, 0.22284667974113415, 0.23460687538438704, 0.24586996217596815, 0.25664666229155869, 0.26694768448966782, 0.27678369567319983, 0.2861652351372953, 0.2951024555947539, 0.30360434067202607, 0.31167633998010835, 0.31931322138557078, 0.32647747331873855, 0.33303408061270506, 0.3385537011665784, 0.34171913884548782, 0.33853636128690895, 0.31694447327625369, 0.24058926141272913, 8.4599062926400022e-33, 2.6113628733577151e-34, 0.021624758354835336, 0.042573603478049921, 0.062857268901826094, 0.082486482586328319, 0.10147196775684769, 0.11982444600843405, 0.13755464069015899, 0.15467327908680095, 0.17119109281380254, 0.1871188166523515, 0.20246718652480467, 0.21724693740552029, 0.23146880177021026, 0.2451435088329707, 0.25828178440114846, 0.27089435061649991, 0.28299192375019039, 0.29458520516247005, 0.30568485128116318, 0.31630138020393145, 0.32644488672131816, 0.33612417781187182, 0.3453441563975731, 0.35409791140872554, 0.3623428050558018, 0.36992816094979858, 0.37637657561459698, 0.38022295279233798, 0.37701902895237804, 0.35331351423738189, 0.26848691199372221, 9.4626688336771293e-33, 2.8325659083330688e-34, 0.023479660672460566, 0.046254753692834112, 0.068336032605493466, 0.089734264741673578, 0.11046020809091912, 0.13052459780403106, 0.14993814517830314, 0.16871154609743919, 0.18685549345129462, 0.2043806883985588, 0.22129784722475263, 0.23761770280591127, 0.25335100149684897, 0.26850849723254816, 0.28310094471170666, 0.29713909276379608, 0.3106336772133485, 0.32359540851933483, 0.33603493884120034, 0.34796276210517635, 0.35938890666022216, 0.37032199381266467, 0.38076636598737612, 0.39071335957813702, 0.40011486928034112, 0.40880343014814619, 0.41625067408411182, 0.42083646446501527, 0.41763543001045977, 0.39172111102557483, 0.29796943923139313, 1.0523700600802843e-32, 3.0627480425693497e-34, 0.02541104164504597, 0.050088919895587398, 0.074044165143413387, 0.09728745499865496, 0.11982961607587365, 0.14168155957226625, 0.16285419931634126, 0.1833583875835976, 0.2032048848166485, 0.22240436299967964, 0.24096743246329111, 0.25890467853858051, 0.27622669604335254, 0.29294411374876222, 0.30906760561543617, 0.3246078890982726, 0.33957571198341147, 0.35398182631151742, 0.36783693641992987, 0.38115157372206349, 0.3939357489059932, 0.40619792446718583, 0.41794190914737267, 0.42915738882325849, 0.43979099827266221, 0.44965817006432796, 0.45817584568145325, 0.46355550840133086, 0.46036813626670048, 0.43216482092519837, 0.32902133592040939, 1.1642692933096443e-32, 3.3016629289288726e-34, 0.027417873922985218, 0.054075504946962678, 0.079983149630224293, 0.10515045627983648, 0.12958711659023761, 0.15330327604575561, 0.17630965674086607, 0.19861745988740415, 0.22023815416145964, 0.24118324733533139, 0.26146410698071215, 0.28109185977842266, 0.30007736920858658, 0.31843127278709943, 0.33616405254150517, 0.35328611327189891, 0.36980784811603018, 0.38573967470222487, 0.40109201941403888, 0.41587519351774654, 0.43009899278480634, 0.44377151475806931, 0.45689568249542811, 0.46945892548167822, 0.48140212996241788, 0.49252500189480775, 0.50219540502944815, 0.50845755947090399, 0.50532227001751429, 0.47463828116703183, 0.36175273731831076, 1.2821833640229045e-32, 3.550716017483311e-34, 0.029495422054455739, 0.058198511623217528, 0.086127513902747754, 0.1132966199738851, 0.13971584934282713, 0.16539242962292316, 0.19033253772267292, 0.21454274447639987, 0.23803089084447954, 0.26080638752177865, 0.28288007459823933, 0.30426382764233489, 0.32497008283644585, 0.34501140699815269, 0.36440018243895683, 0.38314842716729536, 0.40126773509427416, 0.41876929819174363, 0.4356639539549611, 0.45196216190873456, 0.46767368500263562, 0.48280634859081428, 0.49736204514733112, 0.51132465676764383, 0.52462446291582809, 0.53703385267269943, 0.5478584726772957, 0.5550012107982697, 0.55205467727750768, 0.51918466879104597, 0.39526754508258888, 1.4043088291135672e-32, 3.8200776225008952e-34, 0.031697077157827047, 0.062517077486825237, 0.09248005182655894, 0.12162523044358153, 0.14999353964759662, 0.17761836643901868, 0.20452241877802529, 0.23071845340826141, 0.25621195293954951, 0.28100433079678339, 0.30509577192141746, 0.32848727769986874, 0.35118182514321722, 0.37318476254957855, 0.39450366280124816, 0.41514787044864637, 0.43512794188258247, 0.4544551164825027, 0.47314088702698998, 0.49119665511911947, 0.50863330499689663, 0.52546009701733232, 0.5416808975276326, 0.55728139547651245, 0.57218779497353811, 0.58613960082253602, 0.59831414312379405, 0.60625325246161965, 0.60282389944249737, 0.56731433009325161, 0.43675567906958862, 1.5450976277223921e-32, 4.0081697774746308e-34, 0.034191017331339668, 0.067693849880550536, 0.10023904034344058, 0.13170252926846018, 0.16206141126561552, 0.19135433752622719, 0.21965001815905161, 0.24702490542084468, 0.27354945427842781, 0.29928137490750994, 0.32426390973106023, 0.34852722369045996, 0.37209131803562318, 0.39496931396456342, 0.41717039033204234, 0.4387020294831469, 0.45957149525247004, 0.47978663434665919, 0.49935617123241188, 0.5182896761376522, 0.53659732444067554, 0.55428933480154607, 0.57137409326652655, 0.58785056026978588, 0.60367787283005558, 0.61866055300576561, 0.63204141432047733, 0.64114813192503561, 0.63720951369767176, 0.59358773922410335, 0.43728502184816292, 1.6078130956426537e-32, 2.8210070129954526e-34, 0.033551696713201767, 0.069321662721078689, 0.10644043272572558, 0.1441813415644449, 0.18197630767490183, 0.21941031388007928, 0.25620215091669746, 0.29217830215161378, 0.32724541427557741, 0.36136508831136949, 0.39453308903644596, 0.42676372575243449, 0.45807919823271365, 0.48850312986692301, 0.51805726645267713, 0.54676031584488061, 0.57462804865918726, 0.60167399362961893, 0.62791028401990401, 0.65334840804718164, 0.67799977237782616, 0.70187609919187266, 0.72498968589172852, 0.74735300620860645, 0.76897349726210928, 0.78982059789057957, 0.80965527440112517, 0.82723859623674478, 0.83691075262100378, 0.81456383703074953, 0.66248876572124704, 2.1029119619290284e-32, -1.1353676748274427e-66, -2.259272558655826e-34, 3.0995746344967944e-35, 3.1174749839474532e-34, 6.0832138788989058e-34, 9.1376159146112412e-34, 1.222434409830194e-33, 1.5300760497720569e-33, 1.8336827794391143e-33, 2.1313088450106147e-33, 2.4218277839733293e-33, 2.7046984112972098e-33, 2.9797615367839473e-33, 3.2470799726616576e-33, 3.5068240113477798e-33, 3.7591977097607278e-33, 4.0043977247878814e-33, 4.2425954197543617e-33, 4.4739336758612671e-33, 4.6985315088242876e-33, 4.9164915739626651e-33, 5.1279075074452787e-33, 5.332869612770838e-33, 5.5314689971842411e-33, 5.7238041072488046e-33, 5.9100099234238138e-33, 6.0904025928113216e-33, 6.2661383255546573e-33, 6.4420132789066052e-33, 6.6377574931898312e-33, 6.9317350711322362e-33, 7.6242152814991619e-33, 9.8289697786789323e-33
        });
        // std::cout << "f size: " << model.f().size() << std::endl;
        // std::cout << "expected size: " << expected.size() << std::endl;

        // double rmse = 0;
        // for (int i = 0; i < model.f().size(); ++i) {
        //     rmse += (model.f()(i) - expected[i]) * (model.f()(i) - expected[i]);
        // }
        // rmse = std::sqrt(rmse / model.f().size());

        double rmse_f = 0;
        for (int i = 0; i < model.f().size(); ++i) {
            rmse_f += (model.f()(i) - expected[i]) * (model.f()(i) - expected[i]);
        }
        rmse_f = std::sqrt(rmse_f / model.f().size());

        double rmse_beta = 0;
        rmse_beta += (model.beta()(0) - beta1) * (model.beta()(0) - beta1);
        rmse_beta = std::sqrt(rmse_beta);

        RMSEs_f(i) = rmse_f;
        RMSEs_beta(i) = rmse_beta;
        
        // EXPECT_TRUE(RMSE < 100);
        EXPECT_TRUE(1);
        }
    } // end for
    // save MRSEs to file
    writeEigenVectorToCSV("RMSE_f_" + std::to_string(n) + ".csv", RMSEs_f);
    writeEigenVectorToCSV("RMSE_beta_" + std::to_string(n) + ".csv", RMSEs_beta);
    }
}
*/
/*
TEST(srpde, TransportTestCase2){

    constexpr std::size_t femOrder = 1;
    double nu = 1e-3;
    double stabParam = 1.7;

    std::default_random_engine generator(123);
    
    // define domain 
    MeshLoader<Mesh2D> domain("unit_square_64");

    // define PDE coefficients
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    fdapde::core::Integrator<FEM, 2, femOrder> integrator;
    DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);

    DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
    for(int i = 0; i < quad_nodes.rows(); i++) {
        b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
    }

    // construct b together with its divergence
    ScalarField<2> div_b_callable = div(b_callable);
    DVector<double> div_b_data(quad_nodes.rows());
    for(int i = 0; i < quad_nodes.rows(); i++) {
        div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
    }
    DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);

    // forcing term
    auto forcingExpr = [](SVector<2> x) -> double { return 1.; };
    ScalarField<2> forcing(forcingExpr);
        
    //define regularizing PDE
    PDEparameters<decltype(nu), decltype(b_discretized)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b_discretized)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b_discretized)>::getInstance(nu, b_discretized);
    
    auto L = - nu * laplacian<FEM>() + advection<FEM>(b_discretized);
    // auto L = -laplacian<FEM>(); // + advection<FEM>(b_discretized);
    
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b_discretized)> pde_(domain.mesh, L, boundary_matrix);
    pde_.set_forcing(forcing);
    pde_.set_stab_param(stabParam);
    // set boundary conditions
    pde_.set_dirichlet_bc(DMatrix<double>::Zero(domain.mesh.n_nodes(), 1));
    
    // define smoothing parameter
    double lambda = 1e-3;

    DVector<double> expected = read_csv<double>("../data/transport/TransportTestCase2/expected.csv");

    for (int n = 6; n <= 14; n += 2){
    std::cout << "n: " << n << std::endl;

    // import data
    DMatrix<double> locs = read_csv<double>("../data/transport/TransportTestCase2/locs" + std::to_string(n) + ".csv");
    std::cout << "locs size: " << locs.rows() << " x " << locs.cols() << std::endl;
    DMatrix<double> observations = read_csv<double>("../data/transport/TransportTestCase2/observations" + std::to_string(n) + ".csv");
    std::cout << "observations size: " << observations.rows() << " x " << observations.cols() << std::endl;
    // std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));        
    
    std::size_t constexpr Ntests = 10;
    DVector<double> RMSEs(Ntests);
    for (int i = 0; i < Ntests; i++){
        std::cout << "i: " << i << std::endl;
        // add noise to observations (5% of the range of the exact solution values)        
        DMatrix<double> y(n*n, 1);
        std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));
        for (int j = 0; j < n*n; ++j)
            y(j, 0) = observations(j) + distribution(generator);  // generate noisy observations

        // begin test 
        {   
        SRPDE model(pde_, Sampling::pointwise);
        model.set_lambda_D(lambda);
        model.set_spatial_locations(locs);
        // set model's data
        BlockFrame<double, int> df;
        df.insert(OBSERVATIONS_BLK, y);
        model.set_data(df);
        // solve smoothing problem
        model.init();
        // model.set_dirichlet_bc(model.A(), model.b());
        model.solve();
        // result from the perturbed PDE
        
        // std::cout << "f size: " << model.f().size() << std::endl;
        // std::cout << "expected size: " << expected.size() << std::endl;

        // double rmse = 0;
        // for (int i = 0; i < model.f().size(); ++i) {
        //     rmse += (model.f()(i) - expected(i, 0)) * (model.f()(i) - expected(i, 0));
        // }
        // rmse = std::sqrt(rmse / model.f().size());
        // RMSEs(i) = rmse;

        // compute rmse just with the norm between expected and model.f()
        double rmse = (model.f() - expected).norm();
        RMSEs(i) = rmse;

        if(i==0){
        // std::cout << "saving model to file" << std::endl;
        std::ofstream file("modelf" + std::to_string(n) + ".txt");
        if (file.is_open()){
            for(int i = 0; i < model.f().size(); ++i)
                file << std::setprecision(17) << model.f()(i) << '\n';
            file.close();
        } else {
            std::cerr << "transport test unable to save solution" << std::endl;
        }
        }
        // EXPECT_TRUE(RMSE < 100);
        EXPECT_TRUE(1);
        }
    } // end for
    // save MRSEs to file
    writeEigenVectorToCSV("RMSE_" + std::to_string(n) + ".csv", RMSEs);
    }
}
*/
/*
TEST(srpde, TransportTestCase3){

    for (int n = 35; n <= 40; n += 5){
    std::cout << "n: " << n << std::endl;

    constexpr std::size_t femOrder = 1;
    std::default_random_engine generator(123);
    
    // define domain 
    MeshLoader<Mesh2D> domain("unit_square_32");

    // define PDE coefficients
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::pow(x[1], 2) + 1; };   // y^2 + 1
    b_callable[1] = [](SVector<2> x) -> double { return 2 * x[0]; };                // 2*x

    fdapde::core::Integrator<FEM, 2, femOrder> integrator;
    DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);

    DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
    for(int i = 0; i < quad_nodes.rows(); i++) {
        b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
    }

    // construct b together with its divergence
    ScalarField<2> div_b_callable = div(b_callable);
    DVector<double> div_b_data(quad_nodes.rows());
    for(int i = 0; i < quad_nodes.rows(); i++) {
        div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
    }
    DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);
    double nu = 1e-5;
    double c = 1.0;

    // forcing term
    auto forcingExpr = [](SVector<2> x) -> double { return 1.; };
    ScalarField<2> forcing(forcingExpr);
        
    // forward coefficients to PDEparams
    PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b_discretized), decltype(c)>::getInstance(nu, b_discretized, c);
    
    auto L = - nu * laplacian<FEM>() + advection<FEM>(b_discretized) + reaction<FEM>(c);
    
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b_discretized), decltype(c)> pde_(domain.mesh, L, boundary_matrix);
    pde_.set_forcing(forcing);
    pde_.set_stab_param(2.285);

    // set dirichlet conditions at PDE level
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    for (int i = 0; i < nodes_.rows(); ++i) {
        dirichletBC(i) = 0.; // solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    // define smoothing parameter
    double lambda = 0.01;

    // prepare data for testing 
    // const int n = 240;          // number of observations in each dimension
    const double minVal = 0.0;  // min domain value (unit square)
    const double maxVal = 1.0;  // max domain value (unit square)
    DVector<double> x = DVector<double>::LinSpaced(n, minVal, maxVal);
    DMatrix<double> locs(n*n, 2);   // matrix of spatial locations p_1, p2_, ... p_n
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            locs(i*n + j, 0) = x(i);
            locs(i*n + j, 1) = x(j);
        }
    }

    std::size_t constexpr Ntests = 50;
    DVector<double> RMSEs(Ntests);
    for (int i = 0; i < Ntests; i++){
        // add noise to observations (5% of the range of the exact solution values)        
        DMatrix<double> observations = read_csv<double>("../data/transport/TransportTestCase3/observations" + std::to_string(n) + ".csv");
        std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));        
        for (int j = 0; j < n*n; ++j) {
            observations(j, 0) += distribution(generator);
        }  
        // begin test 
        {   
        SRPDE model(pde_, Sampling::pointwise);
        model.set_lambda_D(lambda);
        model.set_spatial_locations(locs);
        // set model's data
        BlockFrame<double, int> df;
        df.insert(OBSERVATIONS_BLK, observations);
        model.set_data(df);
        // solve smoothing problem
        model.init();
        model.set_dirichlet_bc(model.A(), model.b());
        model.solve();
        
        // test correctness    
        std::vector<double> expected({
            // -2.8914260345698572e-34, 3.1730883581569456e-34, 8.2532263948618713e-34, 1.1682053463493756e-33, 1.3114091305824724e-33, 1.2435266052895695e-33, 9.7322205809413163e-34, 5.3394377799523922e-34, -4.8024232847946236e-36, -5.2813163733385777e-34, -8.8884670925892848e-34, -9.6709117536983399e-34, -7.6699680723269283e-34, -4.6113132015406035e-34, -2.648391429204607e-34, -2.1436527448690905e-34, -1.8376122610307994e-34, -1.4357591851579961e-34, -1.0447114429539269e-34, -6.5670858118093485e-35, -2.7119455217810241e-35, 1.129815173728304e-35, 4.9626713941001474e-35, 8.7898268439963718e-35, 1.2613238020068571e-34, 1.6434178176249693e-34, 2.0253584403245163e-34, 2.4071522492813932e-34, 2.788513261424631e-34, 3.1752898976728069e-34, 3.5619171456295267e-34, 3.0359441133475466e-34, -2.3279722200317977e-66, -1.8240408304024272e-34, 0.060815525225452749, 0.13595702761510339, 0.22365077678596904, 0.32279686074314129, 0.43217697287830409, 0.5487818729204903, 0.66474090438133426, 0.76283758167118498, 0.81308024933644718, 0.77770344275795811, 0.63425654618881022, 0.41229918419781703, 0.20346074534138811, 0.094978697449558558, 0.074181221463156061, 0.067015312077039993, 0.05852528367739232, 0.052131816050155176, 0.047022312164193482, 0.042860054397199705, 0.039390097819836482, 0.036451673183330646, 0.033928822412090526, 0.031737954332502739, 0.029816689180269994, 0.028117556931123847, 0.026604070830938704, 0.025244688508652167, 0.024012358074748809, 0.023067484014768574, 0.021668000499613576, -2.5830216529471534e-34, -1.7789349623659258e-34, 0.061686937764091343, 0.12281555285840513, 0.1793748901156082, 0.22842440974645226, 0.26818389161895273, 0.2993217744624308, 0.32805505331580975, 0.3702773720053526, 0.45128499440584086, 0.58899101351696204, 0.75336215328055534, 0.83504045233400381, 0.7103623830892517, 0.41760609369999513, 0.19377615839452719, 0.14075210038570909, 0.12500272012052513, 0.10947012309584368, 0.097809329598237266, 0.088496992595584439, 0.080906463480034357, 0.074567735795995113, 0.069187642644958677, 0.064556526434353487, 0.060524059268446784, 0.056978283791376545, 0.053835122529448387, 0.051026529538771716, 0.048463827541668641, 0.046467748754665347, 0.045250693086374194, -3.9696100056643632e-36, -1.7423913075507933e-34, 0.061058322898393885, 0.12150950534643509, 0.18182044825240362, 0.24374319577033424, 0.30960220796447396, 0.38096774793395322, 0.45598557962188563, 0.52597346375286691, 0.57636382527432262, 0.60186878956332879, 0.6341717057796652, 0.73468560398406391, 0.88519452380191732, 0.8835301271847168, 0.57861795822835393, 0.27252946174566239, 0.19864825889226989, 0.17448760764101556, 0.15342548018148849, 0.1376115118847861, 0.12497130253270879, 0.11463275413584113, 0.10597125623445963, 0.098594552063235696, 0.092223624427557771, 0.086658243134203949, 0.081750698465101287, 0.077391190903164625, 0.073408484854999234, 0.070130074874562368, 0.070264235839641823, 2.8703610277239231e-34, -1.6958436175984282e-34, 0.060151237036634851, 0.11951805028492232, 0.17824739414973653, 0.23629429051125003, 0.29312381170664664, 0.34804893178196661, 0.40167208197963639, 0.45814095529287785, 0.52478502435160956, 0.6027316421199499, 0.67285512768389821, 0.71298552507043655, 0.76599937345252467, 0.91137682728980629, 0.99206813846728603, 0.67823769129500544, 0.32396621090684408, 0.24746942499311742, 0.21610371175038681, 0.19117775511062005, 0.17221622942865863, 0.15703192348004255, 0.14454288288228836, 0.13403446699781049, 0.12504734117718469, 0.11725545308425703, 0.1104249982426785, 0.10439447494949433, 0.098910148873901177, 0.094070476607965178, 0.096273998582902184, 6.1362068184665152e-34, -1.637700927111886e-34, 0.059059924413901344, 0.11724000445023167, 0.17479844385912471, 0.23209045757148775, 0.28966126707133871, 0.34824841445136506, 0.4082493591602338, 0.46855854000325325, 0.52651697195264491, 0.58252862860482757, 0.64600405262873895, 0.72223916354889151, 0.78311259213136453, 0.81920466242585199, 0.94553128600961311, 1.0716015289764633, 0.72130407611165115, 0.35327101840959135, 0.28818090658240519, 0.2508128025431845, 0.2235783589429694, 0.20232013268860943, 0.18525455325130308, 0.17111955019385094, 0.15916639504044702, 0.14889567066102943, 0.13995282210212837, 0.13210630079105046, 0.12503713278185047, 0.11836777929042401, 0.12290943370256605, 9.756010172761702e-34, -1.5681410458178436e-34, 0.057802360063014965, 0.1146436031344172, 0.17080948767419993, 0.22660636610584212, 0.28231014108446478, 0.33812370910192874, 0.39431326826546698, 0.45166850946910259, 0.51159180562917161, 0.5741135211772096, 0.63564507326227826, 0.69616215502040457, 0.76867573832650882, 0.84455837046562221, 0.87665330915474082, 0.99476147393737224, 1.1309962742888857, 0.7157559414927388, 0.3705797782436937, 0.3219343710008245, 0.27978004581547955, 0.2514459247361554, 0.22858385800165634, 0.21017298698783127, 0.19480592158115359, 0.18174002204663192, 0.17045464619548009, 0.16061555480846715, 0.15186229031948403, 0.1431417601186816, 0.14987215150714725, 1.373806093899824e-33, -1.4871315633748716e-34, 0.056403479385439798, 0.11178963978089337, 0.16647834616380672, 0.22081395588622243, 0.27516150559815677, 0.32991261460198196, 0.38544583401440791, 0.44196153616082057, 0.49942073437580592, 0.55829123523090851, 0.62027474379426983, 0.6849553561053171, 0.74762362504066926, 0.81581182053139012, 0.90219673991552118, 0.93068033273695616, 1.0618779518581185, 1.1619667441218235, 0.67439938419114487, 0.38516469564791755, 0.34951393342773823, 0.30417614549373179, 0.27551270180821441, 0.2516012507212636, 0.23226408521153755, 0.21599743416371167, 0.20208318005266682, 0.19003569734381009, 0.17946712562343178, 0.16853487179930954, 0.17693830276996714, 1.8101528698703692e-33, -1.3946814830811116e-34, 0.054887248195727247, 0.10872215727846772, 0.16184626548542586, 0.21461192233695719, 0.26737126021560109, 0.32046843744769782, 0.3742471262850009, 0.42910048297256198, 0.48549158327923203, 0.54368367964061337, 0.60351370827675888, 0.66573541543237147, 0.73208144568503963, 0.7986352069010777, 0.86395035486379568, 0.9581344864695458, 0.98154930691525333, 1.1442309872840313, 1.151028195957815, 0.61531412737605906, 0.40213294510056818, 0.37152599203779041, 0.32502595103829673, 0.2964093512255741, 0.27188730513206982, 0.25194402309758412, 0.23503362679487722, 0.22051117719272278, 0.20794893336738629, 0.19469870220286389, 0.20395628431133239, 2.2877130190368125e-33, -1.2907697250688556e-34, 0.053277788411711414, 0.10548818588969411, 0.1569870877168634, 0.20813375969578229, 0.2592866399719751, 0.31080355239463525, 0.36304040913866148, 0.41633779591626197, 0.47101485335080379, 0.52745475960984955, 0.58615295579783944, 0.64720144694105075, 0.71049918299528436, 0.77802305787466719, 0.84856120121638356, 0.91384051216484419, 1.0105510708460199, 1.0369726636341361, 1.2280940437650087, 1.0917755599708907, 0.55766759281003908, 0.4219920250158658, 0.38875263170947266, 0.34313114577897541, 0.31467024475314337, 0.28987926426395016, 0.26956278034951259, 0.25222608496121823, 0.23742998011124586, 0.22178605687269276, 0.23084091757837824, 2.8107759722079733e-33, -1.1753714851879699e-34, 0.051598139520764433, 0.10213116686951795, 0.15196144942519785, 0.20144753684088801, 0.25094237809530845, 0.30079447019448752, 0.35135135083427654, 0.40296683673862838, 0.45600499511880288, 0.51081400383808928, 0.5677141631096706, 0.6271613375122902, 0.68956533790910457, 0.75452920690111691, 0.82347412347921334, 0.89705426968913871, 0.96633259554559936, 1.0569984314842333, 1.1068116599412934, 1.289597890582058, 0.99205398035792569, 0.51574419963888551, 0.4423734842718029, 0.40225887973065999, 0.35906385900487109, 0.33074621442600494, 0.3059359682375738, 0.28542194784860353, 0.26806853988801316, 0.24994910160977363, 0.25756557372832711, 3.3849087891949763e-33, -1.0484525715467818e-34, 0.049869897366945574, 0.098691693882183046, 0.14682767529404786, 0.1946310417745119, 0.24244694802595088, 0.29061576236111353, 0.33947703673727403, 0.38937274865984017, 0.44065097063933339, 0.49367639007728198, 0.54883111377887084, 0.60645845580963698, 0.66693415897782893, 0.73085307135544519, 0.79783543754704522, 0.86876406939766027, 0.94461015027817152, 1.0201588098060286, 1.0998926703315675, 1.1931714535267794, 1.3046483783791083, 0.87226564775962367, 0.49529394186929626, 0.46038455077874124, 0.41322234446682604, 0.37321225834069222, 0.34500929581443657, 0.32034318520782273, 0.30007823528588023, 0.27934374924291339, 0.2841539844741055, 4.0170175578043935e-33, -9.0997518391735183e-35, 0.048112771232409417, 0.095206431179775786, 0.14163756764342592, 0.18774975282132353, 0.23387652796482719, 0.28034587234844588, 0.32748536216331248, 0.37562763547492073, 0.42511522640959237, 0.47630251528917894, 0.52955913438952074, 0.58528493012106664, 0.64387282316469185, 0.70564879686400372, 0.7712834056244634, 0.84055270875157551, 0.91379709744803561, 0.99257737052519168, 1.0718226085939246, 1.1479892805739831, 1.2836567130127163, 1.2613180965889832, 0.75686143587796395, 0.49399605489310711, 0.47425011157334435, 0.42267349877719723, 0.38584069741834048, 0.35774012654620135, 0.3336802109757695, 0.31014632319319152, 0.3106735956647752, 4.7154244520302985e-33, -7.5989886806261252e-35, 0.046344367830882978, 0.091707960068770619, 0.1364371712056171, 0.18086276038703053, 0.22530429078259964, 0.2700754683068865, 0.31548979200656463, 0.36186617962809642, 0.40953450424806087, 0.4588411892855474, 0.51015290573102656, 0.56385530499126169, 0.62036405318335675, 0.68012624053185811, 0.74345559201246902, 0.81103090543685619, 0.88284279249414432, 0.95856800771148964, 1.0415931966569567, 1.1192288487063267, 1.2105078131179221, 1.3544433460021927, 1.1660180117515204, 0.66496499442221635, 0.50489386686521331, 0.48377152060649498, 0.43132088901952786, 0.39710975136206111, 0.36950799019125163, 0.34251715871545618, 0.33723767506638258, 5.489927583351976e-33, -5.9818287247812539e-35, 0.044580071392100594, 0.088224603750411607, 0.1312663333150442, 0.17402081352224802, 0.21679180079758584, 0.25987708531483422, 0.30357444396102651, 0.34818758276427864, 0.3940319547101428, 0.44144027115590206, 0.49076790469484932, 0.54239801085983474, 0.59674030802020051, 0.65423028136376693, 0.71536873804458667, 0.78048255751464968, 0.85026118281126417, 0.92473354798423213, 1.0036306187351052, 1.0902766263419246, 1.1654691753079451, 1.2882037451058719, 1.3816240181306456, 1.0400450768836451, 0.60518619449793254, 0.52037151649240843, 0.48989992080793032, 0.43947819797339821, 0.4074496283994416, 0.37690948798930307, 0.36396794708322777, 6.352608751835858e-33, -4.2478737141734797e-35, 0.042833038963324119, 0.084780501533136612, 0.12615896037294216, 0.16726713619660583, 0.20839182657092095, 0.24981394085184871, 0.29181449533205434, 0.33468055522454837, 0.37871116438019864, 0.42422328475409732, 0.47155755943077859, 0.5210836532451697, 0.57320584075257863, 0.62836457489463304, 0.68702122048334102, 0.749730688395851, 0.81684201011553415, 0.88910913092557686, 0.96626211171523169, 1.0495549367488812, 1.1364470644547111, 1.2179917988209883, 1.3691373227650248, 1.3529209435590046, 0.90989319865314588, 0.57592450555685859, 0.53482029842363066, 0.49394780211563299, 0.44740379868293667, 0.41342123650375845, 0.39118601431628658, 7.3149804321505961e-33, -2.3967458205959224e-35, 0.041114272320372694, 0.081395782259067559, 0.12114327323949539, 0.16063764607002456, 0.20014810514866552, 0.23993817345478444, 0.28027156437333972, 0.3214179832801447, 0.36365895663491982, 0.40729377371683506, 0.45264559721618247, 0.50006763341312532, 0.54994879728272406, 0.6027191713272948, 0.65885589408896472, 0.71885367874017636, 0.78331978318154971, 0.85264979213393166, 0.92760696419936084, 1.0077755135211961, 1.0958638587312866, 1.180122246239889, 1.2828906328510201, 1.432784022293915, 1.2726548550924446, 0.79751990406868956, 0.5692451034519731, 0.54540398703106474, 0.49712148292772013, 0.45137254693542039, 0.41914761206988488, 8.3975454665422354e-33, -4.2809322439819835e-36, 0.039432749733409968, 0.078086837374001156, 0.11624222542593146, 0.15416154622781145, 0.19209621861369774, 0.23029227790117437, 0.26899599705284999, 0.30845942734208859, 0.34894600190857961, 0.39073633691429061, 0.43413432805200014, 0.47947358686686131, 0.52712415888158903, 0.57749888361630586, 0.63105838867993402, 0.68832147462160032, 0.74982717744598448, 0.81622237966280875, 0.88801535499744133, 0.96573919353252236, 1.0498073557508771, 1.1409880011892453, 1.2251073890465907, 1.3588414695263487, 1.4594313075742569, 1.1584678640358566, 0.71495609018117789, 0.57537299411068699, 0.55147997143394567, 0.49616290199135243, 0.44720642030157381, 9.630504193979531e-33, 1.6584080577758611e-35, 0.037795594626154221, 0.074866645684593433, 0.11147396970648794, 0.14786191672629653, 0.18426427747191865, 0.2209098136896688, 0.25802754598717842, 0.29585195796546621, 0.33462828169367059, 0.37461802573906811, 0.41610489244790649, 0.45940119200113827, 0.50485478448260845, 0.55285649896426503, 0.60384752837236522, 0.65832425173627529, 0.71684947646804831, 0.78002582761012207, 0.8485135240396251, 0.92299569499242029, 1.0036334852537563, 1.0924592971459783, 1.1837478424432402, 1.2771517738970153, 1.4354126460985064, 1.4386721907176929, 1.0332837032125881, 0.66397349914088144, 0.58567374625197099, 0.54914817304029107, 0.4782319487119317, 1.0980512455206283e-32, 3.8630541451885614e-35, 0.036208264080021597, 0.07174512875718668, 0.10685236948731636, 0.1417563817752106, 0.1766737564310194, 0.21181643928860014, 0.24739663755923946, 0.28363164278733277, 0.32074874268367937, 0.35899039371668312, 0.39861982262586471, 0.43992721332476881, 0.48323660119419076, 0.52891350498937806, 0.5773732123851133, 0.62908929889079679, 0.68460102901766318, 0.74450970279172324, 0.80952212340315266, 0.88025632735216186, 0.95759408122843248, 1.0416186520979798, 1.1349852382750505, 1.2250801474426181, 1.3398439711609651, 1.4967382936243363, 1.3725991247704481, 0.91723429545112567, 0.63872007763725824, 0.58905015909993774, 0.51604699374459351, 1.2536349110312974e-32, 6.1860917729382623e-35, 0.034674744456509143, 0.068729522765574022, 0.10238753597409547, 0.13585780153443952, 0.16934032834675947, 0.20303087425522623, 0.23712545111855815, 0.27182474645283861, 0.30733863338888762, 0.34389094250530794, 0.3817246705329953, 0.4211078009782131, 0.46233990515618573, 0.50575966558616747, 0.55175337043834083, 0.60076431075698322, 0.65330130066258518, 0.70995964749192164, 0.77135160520068591, 0.83838714070514864, 0.9114768635721513, 0.99184970374954595, 1.0799712731693303, 1.1762070184598277, 1.2683185869254976, 1.4112329149026466, 1.5277412658638811, 1.2730596731292358, 0.82216108784892639, 0.62423398959125964, 0.5484170361834273, 1.4584228837621986e-32, 8.6276581629919643e-35, 0.033197764834418816, 0.065824800326849869, 0.098086444260120684, 0.13017506634223527, 0.16227483815771096, 0.19456608941342682, 0.22722940551347268, 0.26044963498929546, 0.29441997831335881, 0.32934632922876617, 0.36545204283909521, 0.40298331267843701, 0.44221534718900668, 0.48345953495026295, 0.52707176305811954, 0.5734619518150218, 0.62310524640787546, 0.67654535032247998, 0.73446238653829465, 0.79740006971577215, 0.86670326786083807, 0.94214056309037186, 1.0259280974610838, 1.1185504336283683, 1.2155628942421073, 1.31758268128334, 1.4832105787476664, 1.5186716748266473, 1.1543578672568604, 0.74422441523801919, 0.56855153231920019, 1.6741459595413055e-32, 1.1187676216607816e-34, 0.03177905176838277, 0.063034135629999183, 0.093953503450357301, 0.12471365768416222, 0.15548375781725277, 0.18642956605651326, 0.21771711274680963, 0.24951627628472023, 0.28200445559493614, 0.31537049595719158, 0.34981902363964029, 0.3855753518841436, 0.42289113851317867, 0.46205100090601026, 0.50338031767650093, 0.54725444147530711, 0.59410934991773034, 0.64445681209741768, 0.69886715041898484, 0.75816701512420048, 0.82264914264768363, 0.89457272422870437, 0.97216478455256572, 1.0600796068167899, 1.1566999528931672, 1.2539629637680603, 1.3752156993100817, 1.5429102036250157, 1.4635841274076591, 1.0179268125868826, 0.62744744896820448, 1.8352051730963195e-32, 1.3866438350813937e-34, 0.030419661073585107, 0.060359328307286055, 0.089990869760227313, 0.11947583999758797, 0.14896947258793541, 0.17862409775299662, 0.20859229782529068, 0.2390300334110454, 0.27009989363031556, 0.30197459420851852, 0.33484086084468984, 0.36890386704963929, 0.4043924216066796, 0.44156510814711475, 0.4807175732791259, 0.52219116261083665, 0.56638312791251944, 0.61375796025660723, 0.66487193509268172, 0.72029888448788892, 0.78113249809634622, 0.84705293332008391, 0.92213010135519513, 1.0014558380165994, 1.094445486347732, 1.1935716639966101, 1.2937151764122539, 1.4390393205207572, 1.5712830073416502, 1.3430670165586684, 0.79838567194153276, 2.1154860484957288e-32, 1.6666179114722731e-34, 0.029119864887004299, 0.057799817877580477, 0.086196244619874046, 0.11445720566387725, 0.14272546644688017, 0.17114109422736076, 0.19984410407380462, 0.22897729953167734, 0.25868931612394397, 0.28913787874663988, 0.32049333735298458, 0.3529426011520706, 0.38669364606226414, 0.42198083385570034, 0.45907134601115807, 0.49827306648109387, 0.53994421912733026, 0.58450503480553917, 0.63244900352735778, 0.68438904109266274, 0.74085584052879583, 0.80342020052102703, 0.87050642226314867, 0.94958134689598228, 1.0299079963064066, 1.1288062213160681, 1.2286011328300215, 1.3369073883661218, 1.4966363208522671, 1.5236067616114437, 1.0500867428390108, 2.9007531472458246e-32, 1.9595875756548224e-34, 0.027877892470395897, 0.055350072615307333, 0.082560685130091349, 0.10964744432148665, 0.13674270003832648, 0.16397534677903558, 0.19147350859540713, 0.21936751918343436, 0.24779285159041925, 0.2768929394755304, 0.30682207452091381, 0.33774870633395571, 0.36985950733873107, 0.40336449815045644, 0.43850338345174678, 0.47555310501907111, 0.51483660163810585, 0.55673296143720219, 0.60168974359930671, 0.65023052673594173, 0.70304366751262293, 0.7605400581257965, 0.82508684155447587, 0.89280839700567638, 0.97728646446274015, 1.057284342223082, 1.1622872867524101, 1.2612514530568646, 1.3793427710551442, 1.500799983709967, 1.2365994198413439, 4.1982795182084561e-32, 2.2648085868078488e-34, 0.02668491210428833, 0.05299395361800608, 0.079066288686724231, 0.10503118587020592, 0.13100829945285622, 0.15711142385059193, 0.1834532361777467, 0.21014959877662928, 0.23732307014672044, 0.26510581534155503, 0.29364215927794685, 0.32309087924381896, 0.35362731252291368, 0.38544565159871425, 0.41876231592376056, 0.45382162343778987, 0.49090468359517714, 0.53034145390200138, 0.5725248923915951, 0.61792699473360591, 0.66709826729800337, 0.72082797821741174, 0.7793099048702461, 0.84612338109371632, 0.91357441860789446, 1.0058586012506869, 1.0828388728690344, 1.1924832184216423, 1.2867869403326317, 1.3849229861576773, 1.2628340313652022, 5.3880551787954548e-32, 2.5759757666252119e-34, 0.02553371932664257, 0.050741983296277604, 0.075763408583420705, 0.10071049172225774, 0.12568069406657562, 0.15076803958309556, 0.17607054744832579, 0.20169327317151006, 0.22774864104025463, 0.2543560704882521, 0.28164247454436453, 0.30974451750947113, 0.33881276134266125, 0.36901713422013649, 0.4005527495600979, 0.43364529811008445, 0.46855613046581229, 0.50558829805912353, 0.54509532140813388, 0.58749370023995406, 0.63328138982079729, 0.68302430455568541, 0.73762490221964716, 0.7969528207078389, 0.86620099285582797, 0.93196056363547253, 1.0360943546975954, 1.1041187467667177, 1.2112007686112993, 1.2740317595002033, 1.1773859041798318, 5.9202022957526229e-32, 2.856038799260764e-34, 0.024452668451422677, 0.048699829636738211, 0.072822779213462516, 0.096867180156535365, 0.12088059967788586, 0.1449286188374449, 0.16909632880691383, 0.19348392759929997, 0.21820293878766558, 0.24337623637907826, 0.26914171173912049, 0.29565679334280964, 0.32309998681401564, 0.35166688412037667, 0.38156156348826681, 0.41298835358353037, 0.44615092381378402, 0.481263643311935, 0.51857472636522295, 0.5583950689124576, 0.60112438549454761, 0.64727453901149046, 0.69742656639652367, 0.75261558533955564, 0.81235308159983421, 0.8836232821619977, 0.94558454142410764, 1.0679170966264422, 1.1124515558084134, 1.184754919092631, 1.0680171018245719, 5.9068344103506599e-32, 3.173186730425301e-34, 0.023710854707996245, 0.047345064521318959, 0.07079977174836205, 0.094057605441864714, 0.11720172151278854, 0.14038630603470906, 0.16379459220146994, 0.18759886027911657, 0.21192932984841178, 0.2368566420786988, 0.26239228103707679, 0.28850983038172412, 0.31518537256068513, 0.34244772543206231, 0.37042178224428812, 0.39934640441451924, 0.42955636137290437, 0.46143446472880051, 0.49535703760071603, 0.53166204326046929, 0.57065859933660124, 0.61267394182620361, 0.65812409433567476, 0.70748679122421287, 0.76181965144607466, 0.82030845372216232, 0.89127933567889539, 0.94630423549803577, 1.0950814008066916, 1.0748904112214246, 0.97124217401887714, 5.7312973080501625e-32, 3.8405607807352244e-34, 0.023350677248203354, 0.045929145789686605, 0.067514617669566832, 0.088258715265144311, 0.10847237656321254, 0.12850009668286899, 0.14865198671429117, 0.16917621886300535, 0.19026095198011711, 0.21205643061836163, 0.23470582960185807, 0.25837029916961785, 0.28323374498217152, 0.30947996706553482, 0.33724897134305964, 0.3665943902539287, 0.39746940818750792, 0.42975689357292329, 0.46333492087256878, 0.49814835343136354, 0.53425758461292883, 0.57185692209874439, 0.61127660015018903, 0.65299906952152842, 0.6975743401678286, 0.74615538668553416, 0.7979825811768767, 0.86138885966442347, 0.9044692670158192, 1.0836185779014722, 0.8640197707735261, 5.5662417951989608e-32, 7.9064840851023291e-34, 0.021789997066557147, 0.040132545624041352, 0.056721492518353511, 0.072981718876767673, 0.090149880502595869, 0.10930488609049598, 0.13133995087979511, 0.1568748653213525, 0.18612418777949219, 0.21876218830012367, 0.25384889838733238, 0.28988708376909045, 0.32505133756765325, 0.3575654079935271, 0.38612480151035994, 0.41021276210915281, 0.43018023582777304, 0.44705831910361254, 0.46219555017287378, 0.47688595582839521, 0.49213127586183025, 0.50858633690037658, 0.52664274925950139, 0.54656765086167314, 0.56864534464690886, 0.59318578865625182, 0.620972735448998, 0.65146532500718024, 0.69029389971962363, 0.71332771071358325, 0.89245334444019653, 5.3726668052768333e-32, 7.1198567624278979e-66, 8.9843975991420531e-35, -5.4308675142174779e-35, -1.6164634261693285e-34, -2.4189558845959942e-34, -3.0098993350733144e-34, -3.4027183891651155e-34, -3.5519897137487738e-34, -3.3374712203105471e-34, -2.5516872938752359e-34, -9.0217170556560834e-35, 1.9596251818957075e-34, 6.3773539866400026e-34, 1.2606504352252695e-33, 2.073724276280266e-33, 3.0661851536044125e-33, 4.2114750009965939e-33, 5.4780444180874182e-33, 6.8426262629962289e-33, 8.2999184600515167e-33, 9.8645858886805652e-33, 1.156605608759074e-32, 1.3440420312367977e-32, 1.5524267310086476e-32, 1.7852896753798236e-32, 2.0462475587604548e-32, 2.3395571832803508e-32, 2.6701570370750694e-32, 3.0463715400655199e-32, 3.4715182954091805e-32, 3.9740704158937235e-32, 4.5272489777673154e-32, 5.1343739798147041e-32
            -3.270085182254292e-34, 2.6992825121132178e-34, 7.3532971643745104e-34, 1.0223877473301394e-33, 1.1175907185059259e-33, 1.0294170173098972e-33, 7.8331322064757213e-34, 4.2236620772559408e-34, 1.0777346550671609e-35, -3.6629117000384956e-34, -6.1657859655427748e-34, -6.7598176543698941e-34, -5.5509150519792078e-34, -3.5569617974733384e-34, -2.0788833282475158e-34, -1.4668003653601109e-34, -1.0180279894004003e-34, -5.3219336542494872e-35, -5.2004530035370788e-36, 4.2577013749129572e-35, 9.0198768607074103e-35, 1.377436798155166e-34, 1.8524840790251426e-34, 2.3273450209234805e-34, 2.8021440969467174e-34, 3.2769509364589459e-34, 3.7517612683065746e-34, 4.2266336342635531e-34, 4.7033967639160595e-34, 5.1769778005392839e-34, 5.4435992986610179e-34, 3.9406347458318456e-34, -4.0139953503448669e-66, -1.1979342898625253e-34, 0.054805025064769447, 0.11934966382770594, 0.19163611743737918, 0.27021868343462457, 0.35331886104584453, 0.43732165707923609, 0.51458054000426967, 0.57119769136418819, 0.58714546536698009, 0.54280581698078223, 0.43409830163133467, 0.28840575562702792, 0.16015086505548196, 0.092252566153852564, 0.073454852413413846, 0.064664101988268372, 0.056829617892451952, 0.050774640849781442, 0.045920317165636243, 0.041942600708990488, 0.038615084411328042, 0.035787701442801738, 0.033353476554717681, 0.031234450281332787, 0.029372294448544133, 0.027722340704260846, 0.026249138988051611, 0.024927253088009766, 0.023759156113351741, 0.022594356680329365, 0.018977812775602919, -2.7099684373937382e-34, -9.7710787314700141e-35, 0.059430258576871127, 0.11644708738636342, 0.16750166640393085, 0.21014736635072415, 0.24317263187935725, 0.26774080864899691, 0.28957043026264645, 0.32066584340851195, 0.37618973996629668, 0.46071885539612123, 0.54649811736216003, 0.56872495381498855, 0.47398207101327516, 0.30089649912406496, 0.1734290140035615, 0.13386908307466872, 0.11734641215952805, 0.10367204043775434, 0.093144928267173507, 0.084672791128948877, 0.07770121715646458, 0.071840715306842648, 0.066836354160822009, 0.062506944326991998, 0.058720641487099635, 0.055378706732800882, 0.0524040007601995, 0.049736199084500374, 0.047378690585353357, 0.045253381397487219, 0.039221112522886604, -2.9921828640421484e-35, -9.1911675579776685e-35, 0.059190039701851133, 0.11446600849049912, 0.16591859660705729, 0.21487854716002355, 0.26321558115653509, 0.31216344207921992, 0.36035942136170968, 0.40218823386826619, 0.43024592864666139, 0.44591647409764001, 0.47084643849991764, 0.53134479060514361, 0.59997216937217357, 0.57157134233287343, 0.39641809745179829, 0.2339476939819497, 0.18223273297405773, 0.15998014766613827, 0.14220335539154791, 0.12852752405210666, 0.11745249848328752, 0.10828449284671705, 0.10053226434258353, 0.093875678396955417, 0.08808693998925507, 0.083000088643132588, 0.078488655933835028, 0.074448876300667211, 0.070861754645273237, 0.067821414237660957, 0.060284887221241194, 2.4084059740622635e-34, -8.6239427213442242e-35, 0.058365631373588273, 0.11264770731616802, 0.16327516731604727, 0.2106723315606546, 0.25488933328318653, 0.29576550860912748, 0.33384724925836218, 0.37152539762916698, 0.41200567100609248, 0.45376717390122068, 0.48654242885903481, 0.50595156449653278, 0.53968623645187697, 0.61113072771426269, 0.62473663605822705, 0.45157210338977577, 0.27412035006792396, 0.2202086471973819, 0.19433714118991094, 0.17394896850442035, 0.15817384196975082, 0.14529645096435254, 0.13455974296733492, 0.12542219202463095, 0.11752982367191561, 0.11062999038396115, 0.10453628621900447, 0.099094362525580446, 0.094233566458034546, 0.090218339340019924, 0.08176970814144599, 5.3987064025891995e-34, -7.923189375023246e-35, 0.057339894956646119, 0.11061463769636015, 0.16035287779786103, 0.20706911145254644, 0.25127094386063581, 0.2934893130779142, 0.33403423481048322, 0.37250049978127775, 0.40807338568917967, 0.44181766895660241, 0.4776398308070533, 0.51426876853429127, 0.53911485928826486, 0.55948306690585115, 0.62377115227336788, 0.65676900556348405, 0.4756544668977723, 0.29919646386576743, 0.24999719211349467, 0.22205574728286645, 0.20023167038972758, 0.18314952238738516, 0.16908053144520591, 0.15725788300435711, 0.14712811776835763, 0.1383265801053129, 0.1305907992975775, 0.12370851718240485, 0.11753172072954671, 0.11242121130973592, 0.10333172436166997, 8.6648170215641806e-34, -7.0807185518575074e-35, 0.056154822311049638, 0.10830416731559009, 0.15700679144281282, 0.20276480870093169, 0.24600370217506209, 0.28706349495729955, 0.32625424511321283, 0.36401691744982134, 0.40084439599892452, 0.43648161255158702, 0.46983330566791909, 0.50231885101301643, 0.5376674385961222, 0.56756207238713396, 0.58175284255134596, 0.64221868727245845, 0.67505603348838628, 0.47706787412329593, 0.31528030901402132, 0.27358838108830535, 0.244560658169897, 0.22215188465034744, 0.20433744713451513, 0.18953039966348639, 0.17698626501097753, 0.1661656230921652, 0.15670891156014952, 0.14833517897850601, 0.14080057267259441, 0.13444718085480487, 0.12468784442930575, 1.220731513417431e-33, -6.0951414661078715e-35, 0.054834579931040739, 0.10575701990383751, 0.15334788819354617, 0.19812271173088117, 0.2405307133724213, 0.28095948658300707, 0.31972684051230388, 0.35704257699645553, 0.39303549349781325, 0.42800192326845232, 0.46234734915050557, 0.49541481600853798, 0.52647838643984823, 0.55942965106238751, 0.59251453730607273, 0.60300994961364907, 0.66646095346819623, 0.67908850882455063, 0.46391989491460278, 0.32722047431053425, 0.29245662352664309, 0.26302178326832859, 0.24059751957333489, 0.22245531513187675, 0.20723951506489444, 0.19424501581620066, 0.18296282103464925, 0.1730282982665387, 0.16408887586702972, 0.15633864819363152, 0.14561700400549021, 1.6034194301464811e-33, -4.9662788344913998e-35, 0.053401404448923259, 0.10301125852802319, 0.14941913445419402, 0.19313895129651396, 0.23461058305011506, 0.27420529597445847, 0.31223551130152238, 0.34897123940462321, 0.38463676444659634, 0.41934430705671893, 0.45313843683819305, 0.48634116340982991, 0.51894561878916379, 0.5494839264317487, 0.58040519540874169, 0.61462685070792256, 0.62364646388272127, 0.69355155615752706, 0.66674424030400226, 0.44426921780668882, 0.33784412053018392, 0.30763052964441995, 0.27836321396490854, 0.25627172647132973, 0.23807952472206192, 0.22268920423318336, 0.20944409267178854, 0.19785476037230668, 0.1874499488028149, 0.1781512836032178, 0.1659582027185792, 2.0160850410691265e-33, -3.6936727654691508e-35, 0.051877602690529101, 0.10010704672415016, 0.14527721218166365, 0.18789530091953424, 0.22839348673267018, 0.26713743416986152, 0.30443368494929252, 0.34053400668252221, 0.37564267136056145, 0.40993626204854139, 0.44354382644291551, 0.47645618550753016, 0.50877240164850801, 0.54084509917371115, 0.57109311106589555, 0.60104168391666135, 0.63368111953527784, 0.64624604327225277, 0.71728147706150802, 0.63852229336843147, 0.42508592501068054, 0.34813391394232296, 0.31987754790305256, 0.29129614364817263, 0.26972598884408938, 0.25166932055836005, 0.23626755421100029, 0.22289814682787293, 0.21094376802032641, 0.19994536956016873, 0.18560594392369989, 2.4610130328608456e-33, -2.2768579191454522e-35, 0.050284615667167187, 0.097082223471826185, 0.14097217716520846, 0.18244866950230657, 0.22193064395729079, 0.25977208376813465, 0.2962713598947645, 0.33167910808268952, 0.36620278376546767, 0.40000588023163625, 0.43321578994888649, 0.46594048997704679, 0.49817853252050215, 0.52983826334809581, 0.56144163759341437, 0.59132576391103542, 0.62134551417875128, 0.6499179538524319, 0.67284594853241342, 0.72984537095730495, 0.59898426296770935, 0.41094860640038722, 0.35792906678765862, 0.32983815713207915, 0.30235731687707951, 0.28139023855883055, 0.26358680535057355, 0.24826253132179488, 0.23464071019507124, 0.22178075178954768, 0.20450380481081745, 2.9412426982946005e-33, -7.1530538461326299e-36, 0.048642631009004476, 0.093972367696068107, 0.13655183058036283, 0.17685762338123406, 0.21529267630916021, 0.25219773382241417, 0.28786104785155386, 0.32252595489707975, 0.35639663147917466, 0.38964227875450119, 0.42239621469419514, 0.45475193589077978, 0.48678386069821439, 0.5185106698305143, 0.54969543000458987, 0.58092258140895603, 0.61049431912745988, 0.64060862751575842, 0.66523150991210156, 0.70214234727324765, 0.72527859511182968, 0.55544503188816186, 0.40352802426732209, 0.36669345794778002, 0.33807121989775618, 0.31194446862817937, 0.29159362148793366, 0.27408443561982321, 0.25862594600360822, 0.24371562046922779, 0.22263703135421289, 3.4605784545482042e-33, 9.9152458787326892e-36, 0.046970185814025782, 0.090810029579811394, 0.13205970863975924, 0.17117462244794107, 0.20853923448647219, 0.24447917630446112, 0.27927120899499153, 0.31315100907862181, 0.34631878923270309, 0.37894281041585121, 0.41116152865622563, 0.44308314327021414, 0.47477665808551917, 0.50627976175177003, 0.53762960223481615, 0.56848834250917402, 0.5993834157955007, 0.6289631503339963, 0.65794675414415771, 0.68260112640377824, 0.72879097591128428, 0.70236293574581243, 0.51527405897131107, 0.40211006660086773, 0.37403384306357268, 0.34504248124100534, 0.32033970047721633, 0.30054069180444354, 0.28300965184265481, 0.265808568169901, 0.24002527396874507, 4.0235994689911991e-33, 2.8441692432642503e-35, 0.045283939638293282, 0.087624464387362558, 0.12753507857774712, 0.16544742225990264, 0.2017258548957436, 0.2366797047068174, 0.27057313939067751, 0.30363282814799253, 0.33605360859631694, 0.36800229380873128, 0.39961951125990086, 0.43101983605819966, 0.4622907894521226, 0.49348340028430887, 0.52459868049286074, 0.55568460302823197, 0.58633198423640431, 0.61697158555936715, 0.64670433458304422, 0.67344544025533093, 0.70386999748938683, 0.74554846300419997, 0.66512339252519848, 0.48356586241903715, 0.40471437132038046, 0.37988248316485423, 0.35109067350748807, 0.32767217691165046, 0.30794067641441092, 0.28812707404637522, 0.2567162779886859, 4.6356811042235525e-33, 4.8431439173362139e-35, 0.043598549447223293, 0.084441453331707744, 0.12301265648934413, 0.15971838888137901, 0.19490187244915122, 0.22885534822704359, 0.26182964716644647, 0.29404160865421419, 0.32567961471205498, 0.35690742622302424, 0.38786641681237177, 0.41867605407426517, 0.44943237616579235, 0.4802056332389455, 0.51103329291670097, 0.54188245728677054, 0.57280201718428814, 0.60330826769567936, 0.63390063397218854, 0.66324907664602839, 0.68865663526456122, 0.72773230877210571, 0.74676634994089597, 0.62089566289981712, 0.46221610491684617, 0.40918384047040024, 0.38441943367204262, 0.35633101797843814, 0.33345416758940055, 0.31076561393719881, 0.27278352719851567, 5.3030080561579242e-33, 6.988930887660245e-35, 0.041926643825553549, 0.081283291788519688, 0.11852262202391368, 0.15402459154151868, 0.18811079431690145, 0.22105599384194735, 0.25309722721811601, 0.28444086799623575, 0.31526795987042566, 0.34573803187773505, 0.37599149077784283, 0.40615058364212303, 0.43631873985441449, 0.4665776733281457, 0.49698311700767689, 0.52756016776199344, 0.55825070693118417, 0.58908035476881238, 0.61951856850289566, 0.65024556653015242, 0.67827907432471157, 0.70567715292244804, 0.74966344279303809, 0.73094563000903245, 0.57739485642550359, 0.45037671832089515, 0.41383239461569538, 0.38778896770861548, 0.3600581461384591, 0.33373050790403325, 0.28833533864234584, 6.0325916075932489e-33, 9.2819715525675255e-35, 0.040278871911038294, 0.078168883528654878, 0.11409073178976162, 0.1483978912419974, 0.18139028429826476, 0.2133251312670762, 0.24442547847504914, 0.27488683217355508, 0.30488222649277186, 0.33456594906246517, 0.36407604158855522, 0.39353557809180412, 0.42305260936032035, 0.45271852967001686, 0.48260388899215884, 0.51275350765106731, 0.54317439509869048, 0.57380570758226668, 0.60459064642379168, 0.63510992453862214, 0.66578986974551324, 0.69229407914115126, 0.72544227548736173, 0.76386615706506766, 0.70106603854329907, 0.54035481300904409, 0.44559170878516086, 0.41746939041685571, 0.38918506160643129, 0.3572472321019966, 0.30343551565239307, 6.8339302089339915e-33, 1.1722663059331399e-34, 0.038664008598444558, 0.075113920396352118, 0.10973854166216954, 0.14286518135889914, 0.17477240902290789, 0.20570010510513992, 0.23585734740838737, 0.26542857055476998, 0.29457832598906059, 0.32345486688573921, 0.35219268530052028, 0.38091403095844517, 0.40972933066212469, 0.43873630183246376, 0.4680175020746663, 0.49763372267839812, 0.5276272271470912, 0.55796626486639089, 0.5886314745386404, 0.61940340627664014, 0.6501896880412158, 0.68020992996062946, 0.70660568329042683, 0.74658681509220359, 0.765854776279145, 0.66297603558597162, 0.51248043912298746, 0.44474132001055894, 0.41830353616236077, 0.38253308726435753, 0.31820078577283439, 7.7149640639167302e-33, 1.4311357789722325e-34, 0.037089097424422686, 0.072131118566855834, 0.10548369743049797, 0.13744870252177241, 0.16828395162289472, 0.19821240287651221, 0.22742936993256307, 0.25610818538178792, 0.28440462622503992, 0.31246031904889388, 0.34040525611649403, 0.36835946946712428, 0.39643381950451734, 0.42472974319115336, 0.45333766661964164, 0.48233434538844139, 0.51176784313972679, 0.54170000954421549, 0.57200816283700084, 0.60279319869768722, 0.63361489117152725, 0.66470458090217455, 0.69349437490063615, 0.7225382016783829, 0.76567581958317754, 0.75413248987630488, 0.62299415711469275, 0.49340412355687779, 0.44361444759859697, 0.40868016203635665, 0.33347092437947423, 8.6777341905160059e-33, 1.7048360899080444e-34, 0.035559615793750429, 0.069230491376360087, 0.10134027562612286, 0.13216642339595724, 0.16194681167625169, 0.1908880575994053, 0.21917206106592244, 0.24696116884542649, 0.27440225274629548, 0.30162990763896225, 0.32876889947993632, 0.35593592267504642, 0.38324065132435553, 0.41078598045926251, 0.43866722968865568, 0.46696983062811082, 0.49576919955069021, 0.52508678205035597, 0.55505860459228651, 0.5853532775871092, 0.61634857762936446, 0.6473232852584877, 0.67844805715135759, 0.70619853545151046, 0.74041048348269489, 0.77850873286245403, 0.73020923972983343, 0.58561624231677623, 0.47917163827775849, 0.43140477387578496, 0.3493855278011288, 9.7653577143416752e-33, 1.9933912541145937e-34, 0.034079653059547063, 0.066419649516731613, 0.09731916658653178, 0.12703247636311996, 0.15577846990253361, 0.18374812398584103, 0.21111038979682059, 0.238016866656097, 0.26460552986386077, 0.29100370405824261, 0.31733040766982529, 0.34369813430577001, 0.37021407663647926, 0.39698072879908181, 0.4240957127926876, 0.45165051952966756, 0.47972681199353179, 0.5084080580465139, 0.53765128773956095, 0.56778735193432572, 0.59803217378065388, 0.62936480558395169, 0.66055985036099141, 0.69123934095466788, 0.71924931493206512, 0.75895190822237957, 0.78146076509699136, 0.69692700044663447, 0.55083647124504209, 0.45672135732810559, 0.36307865237798853, 1.1030394821365155e-32, 2.2968147611394562e-34, 0.032652104389725906, 0.063704135493637307, 0.093428499884911878, 0.12205763144350629, 0.14979248161971642, 0.17680917719772757, 0.2032642802078054, 0.22929898430375945, 0.255042495163187, 0.28061477058743889, 0.30612873755475312, 0.33169205330963553, 0.35740842943089951, 0.38337848405197472, 0.40970002009692097, 0.43646753790854514, 0.46377063538022795, 0.4916863180693099, 0.52032665061811123, 0.54950126159219603, 0.57997532147916331, 0.61005207381786053, 0.6419165640510105, 0.67323953364771472, 0.70312577939856369, 0.73334242682294204, 0.77525044225738582, 0.77159077046623359, 0.6546227618185112, 0.50680821949122268, 0.37553239159341167, 1.2345357421436665e-32, 2.6151125630631955e-34, 0.031278893271554323, 0.061087780153393598, 0.08967403950795233, 0.11724966424690092, 0.14399879251833117, 0.17008358330738044, 0.19564885986825145, 0.22082584076141704, 0.24573518340611436, 0.27048949374636616, 0.29519540498420371, 0.3199552890835391, 0.34486862763890763, 0.3700330273714767, 0.39554481386497742, 0.4214990695182918, 0.44798891066514457, 0.47510397134875237, 0.50291167249347268, 0.53159309465373772, 0.56065301199735895, 0.59172465119842543, 0.62139821288599462, 0.65404683599015734, 0.68517233398077126, 0.71437253756994912, 0.7480747280968405, 0.78441545749157282, 0.74368433860940253, 0.59124817589183387, 0.40014711266417052, 1.362780731574892e-32, 2.9483382447491167e-34, 0.029961184579513894, 0.058572893169961011, 0.086059191733611373, 0.11261314943673896, 0.13840337762991717, 0.1635790766789714, 0.18827406153058179, 0.2126100599992046, 0.23669945640963805, 0.26064759156225187, 0.28455470131771571, 0.30851755603325992, 0.33263083826860523, 0.35698826164303804, 0.38168338786272321, 0.40681004131437631, 0.4324621494094657, 0.4587328078475536, 0.48571408744377947, 0.51345243156836562, 0.54226715178943508, 0.57109295434506269, 0.60316165954332657, 0.63202366624888595, 0.66568580127368682, 0.69606316602167695, 0.72497380740085815, 0.76046052430712907, 0.77665783150156709, 0.67932375058301264, 0.44966297407968459, 1.5457678557167378e-32, 3.296755681702062e-34, 0.028699264293532496, 0.056159584451941191, 0.082583763313636344, 0.10814791998896996, 0.1330066888994911, 0.15729735587820995, 0.18114337115019882, 0.20465736694321776, 0.22794371144783035, 0.25110064114397385, 0.27422204225233998, 0.29739896206736383, 0.3207209183331623, 0.34427704380871066, 0.36815705463347081, 0.39245196437955671, 0.41725438746036053, 0.44265819119081051, 0.46875723856440038, 0.49564924606189753, 0.52334001698834121, 0.55238921245346462, 0.58076121384784907, 0.61444718051399982, 0.64179712238480913, 0.67649035381785538, 0.70523219151005112, 0.7331140317216942, 0.76090741913889681, 0.72577103421416667, 0.51120297314050311, 1.873617607313674e-32, 3.6609106849831869e-34, 0.027491311257140476, 0.053843527353150143, 0.079241916468231477, 0.10384838065060724, 0.1278049251359237, 0.15123730371545935, 0.17425859902258606, 0.19697235635118476, 0.21947510053451727, 0.24185827964854675, 0.26420978132048695, 0.28661517500554207, 0.30915880240658483, 0.33192480335530489, 0.35499812161887218, 0.37846545830127926, 0.40241602173351421, 0.42694179752539091, 0.4521369628681578, 0.47809588116714974, 0.50492564587583488, 0.53256405167841914, 0.5619377921559805, 0.58950404602849749, 0.62576125425172224, 0.65033899795667849, 0.68541513521479647, 0.71036270755026243, 0.7307325366510411, 0.72061249744408395, 0.55152764384577568, 2.3218969173545351e-32, 4.0397168089473706e-34, 0.026330948700949409, 0.051615402005985876, 0.076027217741362271, 0.099715295305139506, 0.12280733241059094, 0.14541527905847923, 0.1676403158572374, 0.18957646678425619, 0.21131291090148893, 0.23293543326698432, 0.25452741883325836, 0.2761706013522508, 0.29794563683845798, 0.31993256948027304, 0.34221135414889359, 0.36486265017340347, 0.38796896306104584, 0.41161587612723161, 0.43589276234553065, 0.46089219307283075, 0.48670646423224806, 0.51345495136011354, 0.54097756357427429, 0.57069071282132222, 0.59692887687923668, 0.63717621670051161, 0.65655118475250718, 0.68940549398576401, 0.7033981248887754, 0.69055825785778746, 0.55311940666985693, 2.7222243014612303e-32, 4.4245039602703897e-34, 0.025213468512861693, 0.049486236183615959, 0.07297989608359394, 0.095820459098244173, 0.11811196858726418, 0.13994772040645728, 0.16141644969434857, 0.18260446737073088, 0.20359578020571373, 0.22447189335080175, 0.24531214120800729, 0.26619454928006858, 0.2871967091638451, 0.30839610833255765, 0.32986976518542321, 0.35169361737692395, 0.37394247633630584, 0.39669114195619626, 0.42001647338417147, 0.44399929850728032, 0.46872458638380199, 0.49427596546932506, 0.52078429829920581, 0.54796966863829033, 0.57780325849843317, 0.60196867737824888, 0.64816728976211013, 0.65728247994062705, 0.67950757692461372, 0.6584135984329379, 0.5287667266857351, 2.9448865701012683e-32, 4.788074120686285e-34, 0.024176439136428932, 0.047567629881052162, 0.070274466563702856, 0.092365422718769075, 0.11390948163044841, 0.13498708611222202, 0.15568782424533081, 0.17610333014966104, 0.19632105563617241, 0.21642161961314066, 0.2364800049806694, 0.2565690980093922, 0.27676313618194098, 0.29713879337411642, 0.31777292809216867, 0.33873798537676525, 0.36009768940923587, 0.38190593814321366, 0.40421030789994428, 0.42705897798659836, 0.45050769882228298, 0.47462298963097971, 0.49947362625489622, 0.52520211893496282, 0.55141720682160178, 0.58058469722751993, 0.60162814414541532, 0.65608059481835435, 0.64361775664662624, 0.62988754284283632, 0.49764938868955594, 3.0246104757184277e-32, 5.202937327463234e-34, 0.023429522695940553, 0.046195983168383865, 0.06823243712962665, 0.089554238401444552, 0.11025936106605977, 0.13049433116059747, 0.1504157084760234, 0.17015930414321245, 0.18982159690190811, 0.2094545575406174, 0.22907317853006476, 0.24867289361164224, 0.26825157182007042, 0.28782884971190059, 0.30745573582918584, 0.3272106426009414, 0.34718361358304572, 0.36745605525549885, 0.38808566287335433, 0.4091037157943031, 0.43052551604411066, 0.45236787685333907, 0.47466417857739596, 0.49745965356909772, 0.52090486101305489, 0.54455141080713088, 0.57110551304156831, 0.58755590240643918, 0.65181740143988609, 0.59092419021852494, 0.46830966931716028, 3.0557220603594875e-32, 6.012547336224887e-34, 0.023031782703699322, 0.044802017537087797, 0.065204539812053763, 0.084473767215107548, 0.10297261759024633, 0.12107285756373509, 0.13908989957191792, 0.15725065801931307, 0.17568333744805506, 0.19442368213880243, 0.2134341329618839, 0.23263143010755136, 0.25191606874506106, 0.27119590033636765, 0.2903980160820912, 0.3094680703154461, 0.32836216147276392, 0.34703965741123, 0.36546357771354132, 0.38360948311723608, 0.40147834378217584, 0.41910710638973009, 0.43657262991943219, 0.45398779775590986, 0.47147726885428032, 0.48926582386430373, 0.50699316530022054, 0.52714360313249753, 0.53711503954633744, 0.60849679634488685, 0.43323805789695957, 3.083745816673912e-32, 1.0766291883230475e-33, 0.021567136951442807, 0.039437173396978158, 0.05534594474050427, 0.07065661414925152, 0.086450239977592463, 0.10355958291811923, 0.122553293143603, 0.14368408701968277, 0.16682567442204846, 0.19143436921535151, 0.21657504643975001, 0.24103977312368891, 0.26355820679608305, 0.28305860945606665, 0.2989043453041641, 0.31102384566558661, 0.31988362817567245, 0.32631469149622561, 0.33126293063854007, 0.3355606695138138, 0.33979436771975208, 0.34428866325628682, 0.34917384768844451, 0.35448069335311261, 0.36021720999950851, 0.36639586293683246, 0.37311794461533948, 0.38010066819509242, 0.3888524125009053, 0.39109662340867868, 0.45323848390720162, 3.0912793482794339e-32, 1.4883641533501848e-65, 1.8090704003435085e-34, 1.9076035673210933e-35, -1.0408357521332247e-34, -1.9882588652321725e-34, -2.7117092529783483e-34, -3.221787655154091e-34, -3.4693605224511923e-34, -3.3360410745986124e-34, -2.6320583454896041e-34, -1.1099441583808424e-34, 1.4998644593241611e-34, 5.4331236847439756e-34, 1.0828768065676119e-33, 1.7682010573278e-33, 2.5837832490056763e-33, 3.5036426227324612e-33, 4.4998854610417674e-33, 5.5519362726447409e-33, 6.6524968156670695e-33, 7.8079304223105273e-33, 9.0337259946865675e-33, 1.034807559395221e-32, 1.1766933883710611e-32, 1.3302314139403185e-32, 1.4963429075465339e-32, 1.675913224570071e-32, 1.8698868744012215e-32, 2.0799241232902035e-32, 2.3054343383965542e-32, 2.5550319135060689e-32, 2.8112314310903375e-32, 3.0601799503780551e-32
        });
        if (i==1){
            std::cout << "f size: " << model.f().size() << std::endl;
            std::cout << "expectsed size: " << expected.size() << std::endl;
        }
        double rmse = 0;
        for (int j = 0; j < model.f().size(); ++j) {
            rmse += (model.f()(j) - expected[j]) * (model.f()(j) - expected[j]);
        }
        // std::cout << "Beta: " << model.beta().transpose() << std::endl;
        rmse = std::sqrt(rmse / model.f().size());
        // std::cout << "RMSE: " << rmse << std::endl;
        RMSEs(i) = rmse;
        // EXPECT_TRUE(rmse < 100);
        EXPECT_TRUE(1);
        }
    } // end for
    // save MRSEs to file
    writeEigenVectorToCSV("RMSE_" + std::to_string(n) + ".csv", RMSEs);
    }
}

// testcase 4 ADV-DIFF elements P2
TEST(srpde_test, TransportTestCase4) {

    // define exact solution
    auto solutionExpr = [](SVector<2> x) -> double {
        return 3*sin(x[0]) + 2*x[1];
    };

    for (int n = 35; n <= 180; n += 5){
        std::cout << "n: " << n << std::endl;

    constexpr std::size_t femOrder = 1;
    std::default_random_engine generator(123);
    
    // define domain 
    MeshLoader<Mesh2D> domain("unit_square_32");

    // define PDE coefficients
    SVector<2> b;  b << 1., 1.;
    double nu = 1e-7;
    auto forcingExpr = [&nu, &b](SVector<2> x) -> double {
        return 2*b[1] + 3*b[0]*cos(x[0]) + 3*nu*sin(x[0]);
    };
    ScalarField<2> forcing(forcingExpr);   // wrap lambda expression in ScalarField object
        
    //define regularizing PDE
    PDEparameters<decltype(nu), decltype(b)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b)>::getInstance(nu, b);
    
    auto L = - nu * laplacian<FEM>() + advection<FEM>(b);
    
    // define the boundary with a DMatrix (=0 if Dirichlet, =1 if Neumann, =2 if Robin)
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);

    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b)> pde_(domain.mesh, L, boundary_matrix);
    pde_.set_forcing(forcing);

    pde_.set_stab_param(1.0);

    // compute boundary condition and exact solution
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    // set dirichlet conditions at PDE level
    for (int i = 0; i < nodes_.rows(); ++i) {
        dirichletBC(i) = solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);

    // define smoothing parameter
    double lambda = 1.0; //1e-3; //0.1;

    // prepare data for testing 
    // const int n = 240;          // number of observations in each dimension
    const double minVal = 0.0;  // min domain value (unit square)
    const double maxVal = 1.0;  // max domain value (unit square)
    DVector<double> x = DVector<double>::LinSpaced(n, minVal, maxVal);
    DMatrix<double> observations = read_csv<double>("../data/transport/TransportTestCase4/observations" + std::to_string(n) + ".csv");
    DMatrix<double> locs(n*n, 2);   // matrix of spatial locations p_1, p2_, ... p_n
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            locs(i*n + j, 0) = x(i);
            locs(i*n + j, 1) = x(j);
        }
    }

    std::size_t constexpr Ntests = 50;
    DVector<double> RMSEs(Ntests);
    for (int i = 0; i < Ntests; i++){
        // add noise to observations (5% of the range of the exact solution values)        
        std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));        
        DMatrix<double> y(n*n, 1);
        for (int j = 0; j < n*n; ++j)
            y(j, 0) = observations(j, 0) + distribution(generator);
        // begin test 
        {   
        SRPDE model(pde_, Sampling::pointwise);
        model.set_lambda_D(lambda);
        model.set_spatial_locations(locs);
        // set model's data
        BlockFrame<double, int> df;
        df.insert(OBSERVATIONS_BLK, y);
        model.set_data(df);
        // solve smoothing problem
        model.init();
        model.set_dirichlet_bc(model.A(), model.b());
        model.solve();
        
        // test correctness    
        std::vector<double> expected({
            // -2.6913046320438945e-34, 0.093734741956067472, 0.18737795352731895, 0.28083819370680613, 0.37402420015603932, 0.46684497832111227, 0.55920989028734136, 0.65102874328565075, 0.74221187776427522, 0.83267025493980162, 0.92231554374202063, 1.0110602070677224, 1.0988175872591885, 1.1855019907239313, 1.2710287716130249, 1.3553144144763412, 1.4382766158139779, 1.5198343644442194, 1.5999080206095841, 1.6784193937436982, 1.7552918188230562, 1.8304502312291164, 1.9038212400476202, 1.9753331997335832, 2.044916280071948, 2.1125025343656132, 2.1780259657842107, 2.2414225918089157, 2.3026305067102766, 2.3615899419980959, 2.4182433247843806, 2.4725353340022651, 2.5244129544260949, 0.062500000000059536, 0.16709862828146077, 0.25802661811446664, 0.35195284613846728, 0.44492687959698951, 0.5376000254120018, 0.62977359368066788, 0.72136492847078593, 0.81228649528996411, 0.90244860402916516, 0.99176341892579822, 1.0801436937308317, 1.1675031441559782, 1.2537564282052618, 1.3388193934790704, 1.4226088414118363, 1.5050432072314712, 1.5860415189245411, 1.665525578403781, 1.7434160808716823, 1.8196401711871621, 1.8941173146563823, 1.966786478858267, 2.037554152255503, 2.106395060970927, 2.1731560073019849, 2.2379423636816433, 2.3003476691528024, 2.3610143863544986, 2.4184048602683075, 2.475687694942112, 2.5253290824135979, 2.5869129544261531, 0.12500000000011907, 0.23895364826658433, 0.32944246441767039, 0.42282980899056799, 0.51591926218862505, 0.60836973645410819, 0.70037377083171881, 0.79174127058413579, 0.88240707328698365, 0.97227873843204493, 1.0612687326412216, 1.149290249780142, 1.2362573419159322, 1.32208499464436, 1.4066895910422041, 1.4899881559583581, 1.5719000212663079, 1.6523439454588833, 1.7312437336951954, 1.8085179009005661, 1.8840993904618062, 1.9578984339814858, 2.0298734686243072, 2.0998955823058383, 2.1680099046924566, 2.2339283231097076, 2.2980235232728465, 2.3593600595129787, 2.4196492793898638, 2.4751612599788766, 2.5336795122869322, 2.5776345050217926, 2.6494129544262104, 0.18750000000017839, 0.30936861150713163, 0.40132312817977045, 0.49367863990185423, 0.58690600790057657, 0.67918568367015142, 0.77100035157448288, 0.86215885101678513, 0.95257230901509682, 1.0421597322563279, 1.1308305492482085, 1.2184989364914829, 1.305079259982914, 1.3904867753963672, 1.4746384703357567, 1.5574514626822089, 1.6388462037084806, 1.7187407553612266, 1.7970617042738204, 1.8737239224879145, 1.9486688660844917, 2.021792442916313, 2.0930820916298232, 2.1623555601799165, 2.2297622019973815, 2.2948150216394105, 2.3582752325619003, 2.4184484676122109, 2.478550227221012, 2.531841664917053, 2.5922123542795785, 2.6295572549280752, 2.7119129544262708, 0.25000000000023814, 0.37843598503245751, 0.47337937339945779, 0.56464737443351232, 0.65784580808935655, 0.75004958481038619, 0.84165583749311745, 0.93261443348613793, 1.0227821327071196, 1.1120903678468537, 1.2004479841619859, 1.2877688079053122, 1.3739679756802179, 1.4589608535664749, 1.5426651365548549, 1.6249978613196194, 1.7058809024551531, 1.7852310494742178, 1.8629787189082061, 1.9390331880583178, 2.013348023881985, 2.0857981274217656, 2.1564123292717916, 2.2249320005048148, 2.2916535416578756, 2.3558114418879716, 2.4187032581075454, 2.4776024432316377, 2.537729082291261, 2.5884369406762837, 2.6512650475683341, 2.6812011496969927, 2.7744129544263298, 0.31250000000029732, 0.44626686099612645, 0.54534529666003484, 0.63582255444041313, 0.72873942956093951, 0.82094637722197494, 0.91234670297106046, 1.0031047204313908, 1.0930359912876504, 1.1820697187033806, 1.2701200357283846, 1.3570989513945286, 1.442922556612102, 1.5275063107849058, 1.610768694395972, 1.692626446324323, 1.7730032681822501, 1.8518139172599317, 1.9289940186453356, 2.0044447123058675, 2.0781363272782012, 2.1499142066392287, 2.2198642545382659, 2.2876226869426537, 2.3536856462471571, 2.4169128690949746, 2.4793130440033528, 2.536812911173691, 2.5971938300108599, 2.6449463346759723, 2.7108045108392451, 2.7326652945774508, 2.8369129544263916, 0.37500000000035677, 0.5129856876649217, 0.61698648151624491, 0.70723270254585391, 0.79961672654540994, 0.89185525096622631, 0.98307776897888377, 1.0736283010661574, 1.1633324487814045, 1.2520971244376848, 1.3398456542127608, 1.4264884486592861, 1.5119420760977109, 1.5961222223264167, 1.6789482495157142, 1.7603363062794535, 1.8402124549729437, 1.9184884360279366, 1.9951068577922131, 2.0699574814205275, 2.1430332769768339, 2.214139336868429, 2.2834380188072489, 2.3504253066291589, 2.4158602934620381, 2.4781146973192922, 2.54010941264626, 2.5960726285005089, 2.6569481615604307, 2.7013770301889872, 2.7707887498992361, 2.7840417252397831, 2.8994129544264515, 0.43750000000041644, 0.57872502283845362, 0.68810591248466835, 0.77885466092800038, 0.87052365493203465, 0.96275810878679347, 1.0538493017036699, 1.144185914655401, 1.2336695220180982, 1.3221719373144578, 1.4096238500497313, 1.4959363440341065, 1.5810256186499654, 1.6648076575145971, 1.747202907932113, 1.8281265239733679, 1.9075076207067361, 1.9852536703805559, 2.0613165044703381, 2.1355704531975559, 2.2080384088894691, 2.278472118810142, 2.3471338329892992, 2.413337493363934, 2.4781792265279949, 2.5394125982666282, 2.6010962861702867, 2.6553765415705488, 2.7169913071683931, 2.7577432990003019, 2.8311698414248569, 2.8354136115814592, 2.9619129544265101, 0.50000000000047629, 0.64362054008912262, 0.75854759520696502, 0.85062211074272653, 0.9415101926124082, 1.0336452046802398, 1.1246563906353058, 1.2147796604275245, 1.3040452856713061, 1.3922932830458881, 1.4794537463263537, 1.5654416468564558, 1.6501722719145488, 1.7335616839390462, 1.8155317748031419, 1.8959961764357398, 1.9748879274522986, 2.0521086718535733, 2.1276222406691456, 2.2012825581676876, 2.2731512901584208, 2.3429111081318332, 2.4109519433927975, 2.4763568779563956, 2.5406440581138283, 2.6008026865914879, 2.6622764456944976, 2.7147220237012797, 2.7773181214281863, 2.8140653499547201, 2.8918967629841461, 2.8868540321262262, 3.0244129544265701, 0.56250000000053479, 0.70780648066761109, 0.82819795447811784, 0.92243553849019466, 1.0126198954714809, 1.1045179756351244, 1.1954900348409321, 1.2854117305946069, 1.374458415652259, 1.4624599581552555, 1.5493345536309895, 1.6350033607152381, 1.7193811136578918, 1.8023833709117205, 1.8839339542851232, 1.9639443344925929, 2.0423525418936932, 2.1190524788257203, 2.1940233616953235, 2.2670927018580818, 2.3383715132042107, 2.4074548292252862, 2.4748926030332772, 2.539481143588604, 2.6032561727481043, 2.6622816720346925, 2.7236513426577105, 2.7741089832803629, 2.837919396715495, 2.8703679759865084, 2.9529179531485892, 2.9384252998606986, 3.0869129544266278, 0.62500000000059464, 0.77141170059629049, 0.89698518926627446, 0.99417291469905766, 1.0838816170930046, 1.1753893064777847, 1.2663393112204848, 1.3560831416372248, 1.4449084764297249, 1.5326704914358094, 1.6192654895579386, 1.7046205189876953, 1.7886512035980382, 1.8712717891467696, 1.9524085508979427, 2.0319700620164038, 2.1099006356014449, 2.1860841168224114, 2.2605191749257578, 2.3329997682470016, 2.4036986878296793, 2.4721017918338921, 2.5389560394251616, 2.6027080836463399, 2.6660166329731756, 2.7238469895586279, 2.7852209727671626, 2.8335398411546762, 2.8987823685452563, 2.926679100871278, 3.0141835146647709, 2.9901787961842405, 3.1494129544266856, 0.68750000000065459, 0.83455641638533606, 0.96487684948885688, 1.0657003929535076, 1.1553037080796504, 1.2462816441156148, 1.3371940084290219, 1.4267928090560056, 1.515395881247108, 1.6029233321075804, 1.6892456841249752, 1.7742922067457187, 1.8579815854922519, 1.9402260065724111, 2.0209546715994429, 2.1000724153860753, 2.1775313849274438, 2.2532025993045521, 2.3271089978157731, 2.3990026244148135, 2.4691324315189203, 2.536850510046567, 2.6031424201596201, 2.6660356592078638, 2.7289260943590232, 2.7854969000446337, 2.846983818820636, 2.8930193844902647, 2.9598913681335959, 2.9830283198255656, 3.0756470037724304, 3.042155250745, 3.2119129544267482, 0.75000000000071354, 0.89734970676727466, 1.0318759607932275, 1.1368824159898532, 1.2268708032687845, 1.317223498173548, 1.4080471744836343, 1.4975371696271578, 1.5859215538215536, 1.6732170923052911, 1.7592741119517294, 1.84401755762797, 1.9273712990452418, 2.0092450825119261, 2.0895714272750845, 2.1682504436085703, 2.2452439704238421, 2.3204069289615972, 2.3937921551604808, 2.4651001263356247, 2.534672358168482, 2.6016995229993753, 2.6674518177615809, 2.729462053312699, 2.7919847340445236, 2.8472305559496576, 2.9089368641744668, 2.9525545115752774, 3.0212285726969483, 3.0394455163027194, 3.1372667779544399, 3.0943853916739834, 3.2744129544268064, 0.81250000000077327, 0.95988778435470334, 1.098016060202518, 1.207590721430712, 1.2985431152214353, 1.3882449283087683, 1.4788971315737072, 1.5683104184585914, 1.656486389607648, 1.7435507632053828, 1.829349579005062, 1.9137957253284312, 1.9968193965613057, 2.0783280633347974, 2.1582579326250468, 2.2365031892276677, 2.313037575840712, 2.3876960994699465, 2.4605679756369785, 2.5312911257106165, 2.6003180655638678, 2.6666474165135035, 2.7318841753994825, 2.7929857192458076, 2.8551921967210556, 2.9090480285339995, 2.9710756742286817, 3.0121538876892093, 3.0827748029285273, 3.0959596223586505, 3.1990069012501996, 3.1468908830606952, 3.3369129544268668, 0.87500000000083289, 1.0222530122197959, 1.1633555181211508, 1.277711863195133, 1.370257990533875, 1.459372626897026, 1.5497486435137413, 1.6391053087779681, 1.727090652075058, 1.8139238366729264, 1.8994707726326123, 1.9836258389779462, 2.0663249572096714, 2.1474739820943558, 2.2270133042005642, 2.3048296897849445, 2.380911386861531, 2.4550690976757616, 2.5274357876484186, 2.597574477723211, 2.6660691219623067, 2.7316928448668167, 2.7964392749813074, 2.8566054204110456, 2.9185475608852514, 2.9709502956345863, 3.0333945393716411, 3.0718275362209315, 3.1445103192177934, 3.1525975727735007, 3.2608376294945147, 3.1996854642737058, 3.3994129544269236, 0.93750000000089229, 1.0845136076252775, 1.2279715129039683, 1.3471529962297744, 1.4419333592420114, 1.5306251655468752, 1.6206130645568309, 1.7099143695420917, 1.7977334462824306, 1.884336290832727, 1.9696363643539634, 2.0535069574329761, 2.1358870924025521, 2.2166818630284366, 2.295836657176237, 2.3732289793754084, 2.4488645897061798, 2.5225249062135693, 2.594394914478209, 2.6639490496140983, 2.7319250521041303, 2.796834551961628, 2.8611167089493961, 2.9203202599953095, 2.9820493268899013, 3.032939191421212, 3.0958866692498179, 3.1315863913760076, 3.2064155733215625, 3.2093834855707914, 3.3227355164931578, 3.2527762080563933, 3.4619129544269844, 1.0000000000009526, 1.1467239495295882, 1.2919539962627757, 1.4158458029466183, 1.5134726208444405, 1.6020088940674466, 1.6915074393813381, 1.7807313355398766, 1.8684123929176324, 1.9547884307938725, 2.0398451397133148, 2.1234380385418068, 2.2055049387729326, 2.285950729950927, 2.36472710201391, 2.441700089867926, 2.5168963696171436, 2.590062506646817, 2.6614446686507929, 2.7304137300590781, 2.797885322866668, 2.8620713914158733, 2.9259158565187233, 2.984129699540758, 3.045695426572347, 3.0950173222842348, 3.1585444254430137, 3.1914418392517687, 3.2684718787280373, 3.2663380842937433, 3.3846831963056117, 3.3061648208718784, 3.5244129544270457, 1.0625000000010119, 1.2089253885341855, 1.3553999447932388, 1.4837485622271083, 1.5847704643322951, 1.6735148713555708, 1.7624526504005198, 1.8515525578671013, 1.939123588034029, 2.025280608648298, 2.1100961211791138, 2.1934179356585561, 2.2751776389669347, 2.3552796159525622, 2.4336837422987783, 2.5102420516178858, 2.5850059090248108, 2.6576808834074384, 2.728584345340443, 2.7969674395088742, 2.863949328373971, 2.9274023457329412, 2.9908358642465225, 3.0480335672434946, 3.1094832517750479, 3.157187955949333, 3.2213595769242573, 3.2514052740144237, 3.3306619713154433, 3.3234783616917354, 3.4466689049771384, 3.3598489185513674, 3.5869129544271026, 1.1250000000010696, 1.2711474474951896, 1.4184081397306212, 1.5508464691489487, 1.6557191125369082, 1.7451170822157811, 1.8334708117709577, 1.9223781682798435, 2.0098618836104705, 2.0958128732125729, 2.1803886501127741, 2.263445427487186, 2.3449043147415876, 2.4246675711353989, 2.5027056744975309, 2.5788538939387555, 2.6531923849669696, 2.7253790288775721, 2.7958132142986729, 2.8636091421804375, 2.9301163737825013, 2.9928265457157712, 3.0558756286903903, 3.1120320596268671, 3.1734096953122952, 3.2194548956513374, 3.2843235585570252, 3.3114876950699252, 3.3929704390205573, 3.3808174726877485, 3.5086858091467805, 3.413823221768673, 3.6494129544271625, 1.1875000000011302, 1.3334092979474037, 1.4810746569798803, 1.6171504012274835, 1.7262145082301554, 1.8167720609096609, 1.9045821823882949, 1.9932128049225681, 2.080621472076011, 2.1663846170120955, 2.250722399771103, 2.33351927780119, 2.414684039256092, 2.4941136656612644, 2.5717919897728101, 2.6475346459944422, 2.7214549649945572, 2.7931559504736678, 2.8631305093489532, 2.9303378609043773, 2.9963856554729529, 3.0583432937384245, 3.1210337759263886, 3.1761257452176013, 3.2374711902187019, 3.2818223600719625, 3.3474277057829802, 3.3716993755245208, 3.4553840022666158, 3.4383648358775956, 3.5707312067206036, 3.4680806301768543, 3.7119129544272265, 1.2500000000011893, 1.3957214011955246, 1.5434891880637536, 1.6826943931390625, 1.7961620171819179, 1.8884199154154346, 1.9758019104985507, 2.0640657604232278, 2.1513967075567084, 2.236994293912252, 2.3210973065594951, 2.4036383155120342, 2.4845158165473396, 2.5636169859769118, 2.6409417766939414, 2.7162833396419073, 2.7897928006284509, 2.8610106809011575, 2.9305354136243258, 2.9971526983145815, 3.0627562331998255, 3.1239520976129636, 3.1863086262754705, 3.2403155891984565, 3.3016637195220668, 3.3442949077532802, 3.4106634167832226, 3.4320496485324576, 3.5178916202546628, 3.496126427401443, 3.6328056542626612, 3.5226131476514806, 3.7744129544272824, 1.312500000001249, 1.4580872102808933, 1.6057322505246421, 1.7475321242444619, 1.8654812978764055, 1.9599866326744118, 2.0471369312062238, 2.134950482224248, 2.2221830591929868, 2.3076392706107254, 2.3915134179652475, 2.4738015175261858, 2.5543985761428174, 2.6331766257897482, 2.7101541226015704, 2.7850990150667649, 2.858205016337132, 2.9289422941116974, 2.9980270363221666, 3.0640528692138194, 3.1292269851594958, 3.1896527296778738, 3.2516981222068937, 3.3046030329373819, 3.3659827411384033, 3.4068774869406826, 3.4740221445789743, 3.4925469090423031, 3.580484352939548, 3.5541052801671587, 3.6949120532834341, 3.5774126512170863, 3.8369129544273406, 1.3750000000013092, 1.5205048436273219, 1.6678732976319497, 1.8117327388176949, 1.934110084349262, 2.0313874518950286, 2.1185833117093602, 2.2058834298396963, 2.2929780662355155, 2.3783158641796258, 2.4619706796062295, 2.5440080748851295, 2.6243311840849524, 2.7027916729961818, 2.7794281118603914, 2.8539807335667984, 2.9266906918340165, 2.9969499313106316, 3.0656043750996549, 3.1310377567267338, 3.1957965288926373, 3.2554453359623787, 3.3171996798673886, 3.368990194358235, 3.4304229239560411, 3.4695757682258654, 3.5374949989882309, 3.5531990777987956, 3.643154773844838, 3.6123023050996959, 3.7570546561563671, 3.6324715273034331, 3.8994129544274037, 1.4375000000013682, 1.5829686586805052, 1.7299696743455848, 1.8753763196996702, 2.0020067268950497, 2.1025310206154955, 2.1901242965137375, 2.2768823593965952, 2.363782154496084, 2.4490195826799992, 2.5324686877192528, 2.6142574272745316, 2.6943124756118197, 2.7724611987070671, 2.8487628133311396, 2.9229275967712569, 2.9952488320212725, 3.0650328451017481, 3.1332662488967071, 3.1981070099189113, 3.2624630776906445, 3.3213306451485298, 3.3828098891878851, 3.4334802989498487, 3.4949775165308279, 3.5323970693069757, 3.6010714849686605, 3.6140151344460301, 3.7058953198133637, 3.6707178898067263, 3.8192377549803576, 3.6877832748205184, 3.9619129544274596, 1.5000000000014271, 1.6454706750656614, 1.7920663371140684, 1.9385493278220494, 2.0691514210258726, 2.1733240129714662, 2.2617292404780658, 2.3479641738511501, 2.4345991858438678, 2.5197455690169357, 2.6030064527071084, 2.6845492448744661, 2.7643412950779918, 2.8421842570249054, 2.9181572618393439, 2.9919387843462464, 3.0638783162471976, 3.1331904761841116, 3.2010111822265648, 3.2652607227985966, 3.3292241731535164, 3.387310362828921, 3.4485239315969549, 3.4980785453057988, 3.5596370349205402, 3.5953523832860488, 3.6647364465173262, 3.6750091830020595, 3.768693850891248, 3.7293557516277063, 3.8814631605333045, 3.7433434219984685, 4.0244129544275182, 1.5625000000014873, 1.7080018256194891, 1.8541962327389463, 2.0013402518703498, 2.1355461420384168, 2.2436758948497024, 2.3333535158588958, 2.419142512927277, 2.505436640139628, 2.590489202957678, 2.6735822159046077, 2.7548833666490316, 2.834416543115494, 2.9119598945348946, 2.9876104088523476, 3.0610136093046321, 3.1325778132642088, 3.2014225879561962, 3.2688371927107487, 3.3324997558592675, 3.3960761962525718, 3.4533879140816621, 3.5143344649392985, 3.5627937767683249, 3.6243867469244355, 3.6584603260571882, 3.7284636628428443, 3.7362100892489076, 3.831521875600076, 3.7882336806917594, 3.9437233865682426, 3.7991519413201225, 4.0869129544275857, 1.6250000000015465, 1.7705532240893416, 1.9163811407155151, 2.0638356586327662, 2.201213428847681, 2.3135034867051516, 2.4049394416028433, 2.4904253066996072, 2.57630533088905, 2.6612468118362478, 2.7441933624801602, 2.8252596796531195, 2.9045372084849177, 2.9817872019229719, 3.0571210652645471, 3.1301516163088259, 3.2013456292009494, 3.2697295033199612, 3.3367414223618597, 3.3998263189397138, 3.4630134639303845, 3.5195698178987933, 3.580229535323439, 3.6276416358465813, 3.6892018949715708, 3.7217543397252477, 3.7922041207668507, 3.7976817269742433, 3.8943047598017615, 3.8474150145654096, 4.0059798870697456, 3.8552215111349089, 4.149412954427639, 1.6875000000016065, 1.8331182403692594, 1.9786324947457703, 2.1261166308776085, 2.2661940315806506, 2.382735242637271, 2.4764182154936165, 2.5618124166000937, 2.6472186813603669, 2.7320164038581103, 2.8148364468561837, 2.8956779810351905, 2.9747023673989417, 3.0516653756747765, 3.1266877773528527, 3.1993527421466657, 3.2701794593102793, 3.3381125155626523, 3.404719472808639, 3.4672450138389834, 3.5300266076505111, 3.5858682143347287, 3.6461887029174265, 3.6926504641836564, 3.7540388053507483, 3.7852961103987051, 3.8558662174980851, 3.8595581981496059, 3.9568548928952052, 3.9070993561152054, 4.0680890002735932, 3.9116084106068811, 4.2119129544277012, 1.7500000000016658, 1.8956980078877061, 2.040949146594742, 2.188253964549721, 2.3305444732734597, 2.451316180147995, 2.5477127033084832, 2.6332933881322926, 2.7181915024449328, 2.8027983970240955, 2.8855073781431382, 2.9661378140907986, 3.0449111452454583, 3.1215938738948656, 3.1963086719000287, 3.26861757945561, 3.3390759478584982, 3.4065746076925478, 3.4727642669468128, 3.5347646747771515, 3.5970996489846518, 3.6523054407041968, 3.7121759489564865, 3.757872189350651, 3.8188183430504736, 3.8492004316213224, 3.9192785909661572, 3.9220934091096882, 4.0187582911975346, 3.967859726908348, 4.1295446011266366, 3.9685362788359315, 4.2744129544277607, 1.8125000000017246, 1.9583048915873327, 2.103291439076246, 2.2503008625362257, 2.3943480757022892, 2.5192226199459049, 2.618740859419844, 2.704843131933945, 2.7892379422785614, 2.873596241214345, 2.9562013198448032, 3.0366379127265564, 3.1151622149994052, 3.1915721860646169, 3.2659807365182489, 3.3379473813923393, 3.4080295047788405, 3.4751211813541496, 3.5408635661949854, 3.6024010820729435, 3.6642043352009024, 3.7189216840927628, 3.7781262622349483, 3.8234017107365785, 3.8833948070098399, 3.9136807347308151, 3.9821207773742926, 3.9857630862974123, 4.0792878457803043, 4.0310898942723448, 4.1886019272303221, 4.0269389791258652, 4.3369129544278149, 1.8750000000017846, 2.0209519267510667, 2.1655700995193583, 2.3124694343152292, 2.457945689987743, 2.5865854593610855, 2.6894285833640437, 2.7764134840707557, 2.8603824891155631, 2.9444360885778904, 3.0269314527709761, 3.1071961249269915, 3.1854761883470495, 3.2616248624576647, 3.3357261786514525, 3.4073737309385064, 3.4770622089454695, 3.5437954145983395, 3.6090321094771918, 3.6702201806260639, 3.7313310479459196, 3.7858315551655912, 3.8439669681370141, 3.8894595486910299, 3.9475486937632334, 3.9791854193079352, 4.0438481602483467, 4.0515086728505523, 4.1371632459418182, 4.0988402940840798, 4.2397788624032584, 4.0911753626303691, 4.3994129544278788, 1.9375000000018456, 2.0909919289238172, 2.2346387602693647, 2.3817105038784128, 2.5267758123579953, 2.6563075811452306, 2.7609929176324686, 2.8488985117504542, 2.9325948823104944, 3.0161590886416625, 3.0983127348886148, 3.1782329495963566, 3.2560797187510517, 3.3317779866042834, 3.4053527089894091, 3.4765002349520158, 3.5455361112944734, 3.6117641830902558, 3.6761515327629288, 3.7369510175366063, 3.7968301466462893, 3.8513546498163769, 3.9074269272923221, 3.9540465323681349, 4.0082117765318532, 4.0436143421891995, 4.1002425836176988, 4.1176091207020056, 4.1862761115184188, 4.1708639909189422, 4.2744001974886308, 4.1852515967316091, 4.4619129544279339, 2.0000000000019051, 2.093734741957971, 2.1873779535292228, 2.2808381937087105, 2.3740242001579439, 2.4668449783230173, 2.5592098902892468, 2.6510287432875561, 2.7422118777661799, 2.8326702549417071, 2.9223155437439239, 3.0110602070696229, 3.0988175872610926, 3.1855019907258355, 3.2710287716149291, 3.3553144144782441, 3.4382766158158833, 3.5198343644461243, 3.5999080206114886, 3.678419393745604, 3.7552918188249595, 3.8304502312310165, 3.9038212400495231, 3.9753331997354842, 4.0449162800738563, 4.1125025343675192, 4.178025965786115, 4.2414225918108226, 4.3026305067121786, 4.3615899420000019, 4.4182433247862853, 4.4725353340041663, 4.5244129544279925
            0, 0.18737795352714059, 0.37402420015568305, 0.55920989028680967, 0.74221187776356878, 0.92231554374114255, 1.0988175872581427, 1.271028771611814, 1.438276615812609, 1.5999080206080603, 1.7552918188213866, 1.9038212400458079, 2.0449162800700025, 2.1780259657821377, 2.3026305067080814, 2.4182433247820789, 2.5244129544236893, 0.125, 0.32781521949453968, 0.51575496301538393, 0.70035248657393179, 0.88238866907305369, 1.0612502691411765, 1.2362392758886458, 1.4066719815134259, 1.5718828803011591, 1.7312269641625502, 1.8840825601240594, 2.0298552003218715, 2.1679864589573019, 2.2979870826545183, 2.4195973592763069, 2.5337145824107385, 2.6494129544236893, 0.25, 0.47205885098378603, 0.65816530110551641, 0.84167189802441689, 1.0227509574462428, 1.2004166556806453, 1.3739376234763097, 1.5426355356301769, 1.7058519645326446, 1.862949966801956, 2.0133177439288068, 2.1563751927518666, 2.2915943942887118, 2.4185844880099827, 2.5374867552945037, 2.6509627083483549, 2.7744129544236893, 0.375, 0.61673369472217265, 0.79987621651553464, 0.98294866119900226, 1.1632742640088649, 1.3398041751578258, 1.5119020320845751, 1.6789089773233874, 1.8401737314519602, 1.9950673453509231, 2.1429885065063972, 2.2833743160750912, 2.4157384490491998, 2.5398279635159278, 2.6563013574908427, 2.7696832300341749, 2.8994129544236893, 0.5, 0.75928236395939241, 0.94110931549292631, 1.1244675393911425, 1.3040093522977785, 1.479408756820503, 1.6501235599864583, 1.8154836171522923, 1.9748398298717631, 2.1275711790488763, 2.2730877200783315, 2.4108472066747897, 2.5404168941386436, 2.6617174682832636, 2.7759943110754559, 2.8895143277590161, 3.0244129544236893, 0.625, 0.89819771751090216, 1.0826990991626859, 1.2663155906702588, 1.4448944759700511, 1.6192059058254933, 1.7885923457925585, 1.9523515745401938, 2.109842682461581, 2.2604542827045129, 2.4036089197286206, 2.5387887168946288, 2.6656257947523185, 2.7842405726633173, 2.8964819742113668, 3.0101207119020481, 3.1494129544236893, 0.75, 1.0329909651114497, 1.2252920434959624, 1.4082797180897617, 1.5858618021906155, 1.7591937948129563, 1.9273046757660537, 2.0895058926888557, 2.2451750135220334, 2.3937097372100675, 2.5345457789653598, 2.667193177619239, 2.791357959400631, 2.9073734153994728, 3.017663430140948, 3.1312440659890433, 3.2744129544236893, 0.875, 1.1639714232671674, 1.368908490203208, 1.5500664799920332, 1.7269317729177156, 1.8993861405752064, 2.0662536379611889, 2.2269382253467644, 2.3808294287102267, 2.5273306672431266, 2.6658918348223173, 2.7960540118270809, 2.9176028129891853, 3.0310842646149143, 3.1394400723177576, 3.2527201638108347, 3.3994129544236893, 1, 1.2919361899184683, 1.5128865297689367, 1.6915610736436641, 1.8681923980964208, 2.0397784824857497, 2.2054254629829146, 2.3646402159201387, 2.5167988029842099, 2.6613101623042761, 2.7976403282652216, 2.9253636186882326, 3.044347047299095, 3.1553383773503221, 3.2617303389981691, 3.3744703295362912, 3.5244129544236893, 1.125, 1.4178606427226776, 1.6561093885971769, 1.8329408780619458, 2.009703903901928, 2.1803358914950848, 2.3448072554222508, 2.5026050328055658, 2.6530757406920151, 2.7956408596919804, 2.9297840193308673, 3.0551134871529442, 3.1715758591380037, 3.2801028688551508, 3.38447731322906, 3.4964782497737348, 3.6494129544236893, 1.25, 1.5426524030138855, 1.7973602282295313, 1.9745910607794932, 2.1514168590912774, 2.321013469095798, 2.4843921581034518, 2.6408235548835561, 2.7896499483440231, 2.9303136017298099, 3.0623145800717424, 3.1852944426365228, 3.2992747479411766, 3.4053509780558002, 3.507649725459042, 3.6187629014579326, 3.7744129544236893, 1.375, 1.6669889471846284, 1.9356421826396391, 2.1168693980178697, 2.29315454657007, 2.4617746951761488, 2.6241610417249408, 2.7792683667211775, 2.926498102528202, 3.0653104696997682, 3.1952186842257517, 3.3158961973195509, 3.4274327352845586, 3.5310675803728411, 3.6312406017787806, 3.7413564549421956, 3.8994129544236893, 1.5, 1.7911869960199922, 2.070292808884437, 2.2597658730697439, 2.4345974485028665, 2.6025153795377962, 2.7639899431937249, 2.917824315052723, 3.0635291326466771, 3.2005637979944592, 3.3284527939725819, 3.446899013645695, 3.5560503038463422, 3.6572677914119933, 3.7552800250238487, 3.864298524701919, 4.0244129544236893, 1.625, 1.9148389858282218, 2.2005013856246336, 2.4021974950887564, 2.5748741416988943, 2.7425554137775237, 2.903202444631789, 3.0559103406878756, 3.2002683523718511, 3.3357126686242418, 3.4617807068162869, 3.5781980228818577, 3.6851511657867846, 3.7840816483810094, 3.8799441285136034, 3.987700400914203, 4.1494129544236893, 1.75, 2.0351305913956863, 2.3224459323020561, 2.538935367904668, 2.7097395172341541, 2.8778658179266317, 3.0380844329327372, 3.1902804917401157, 3.3339861700978206, 3.4686113145527693, 3.5937051045109456, 3.70899511322482, 3.8146574922081093, 3.9120921975831187, 4.0061986238098655, 4.112270812049422, 4.2744129544236893, 1.875, 2.1399601437290916, 2.4151636252067914, 2.643019865837934, 2.8147289839697756, 2.9850039652878628, 3.1471095666593767, 3.3017243154488418, 3.4481640543899368, 3.5858343003122486, 3.7142663242214602, 3.8331267530941773, 3.9424389412700935, 4.0431875109624498, 4.1391412498602289, 4.2432052673098717, 4.3994129544236893, 2, 2.1873779535271405, 2.3740242001556831, 2.5592098902868097, 2.7422118777635687, 2.9223155437411426, 3.0988175872581429, 3.2710287716118138, 3.438276615812609, 3.5999080206080603, 3.7552918188213864, 3.9038212400458079, 4.0449162800700025, 4.1780259657821377, 4.3026305067080814, 4.4182433247820789, 4.5244129544236893, 0.093734741955978237, 0.16629025210895149, 0.25768899217259655, 0.0625, 0.2376407502166025, 0.28083819370653867, 0.3519623337199822, 0.44488247694428745, 0.42295003766777817, 0.46684497832066807, 0.53760100685380907, 0.6297648629578545, 0.60837209903182665, 0.65102874328503046, 0.72136326150390828, 0.81227857053724217, 0.79173794464811542, 0.83267025493900892, 0.90244701751865741, 0.99175551010681573, 0.97227595637049491, 1.0110602070667591, 1.0801421509637539, 1.1674954076878514, 1.1492875358966965, 1.1855019907228028, 1.2537549284430463, 1.3388118549412102, 1.3220823561687618, 1.3553144144750513, 1.4226074091572538, 1.5050358740237284, 1.489985654793297, 1.5198343644427723, 1.5860402202514829, 1.6655184143294248, 1.6523417511743062, 1.6784193937421006, 1.7434151347401685, 1.819633003101877, 1.8085165859244485, 1.830450231227374, 1.8941174985364644, 1.9667787284782399, 1.9579000311243819, 1.9753331997317027, 2.0375583412938982, 2.1063850241935196, 2.0999075512015164, 2.112502534363601, 2.1731753091200008, 2.2379255901351756, 2.2339790505810377, 2.2414225918067827, 2.3004279019686167, 2.3609814500618573, 2.3595633887692808, 2.361589941995847, 2.4187591554010761, 2.4756191007872199, 2.4760160123227397, 2.4725353339999101, 2.5272652812934018, 2.5869129544236893, 2.5816994865133425, 0.30774425971860714, 0.40004253460585465, 0.1875, 0.37667439069516778, 0.4935928952132782, 0.58694706017421017, 0.5644345907347702, 0.67913727031314308, 0.77099702797566083, 0.74997741157139208, 0.86214917087772036, 0.95254916496344744, 0.93260460711251725, 1.0421537315943181, 1.1308069188307817, 1.1120822676330764, 1.218493003034844, 1.3050562423866134, 1.2877603564194922, 1.3904809872597648, 1.4746160315891086, 1.4589526136859474, 1.557445951850025, 1.6388243123072956, 1.6249900514926467, 1.7187358505590278, 1.7970400963304494, 1.7852242233525804, 1.8737207214512517, 1.9486465327989257, 1.9390292037726504, 2.021794798738874, 2.0930557948641813, 2.0858034549975168, 2.1623774184516247, 2.2297223858601205, 2.224969737714086, 2.2949084658070813, 2.3581964177922212, 2.355966071674382, 2.4188165593456166, 2.478377753739327, 2.4781926147359754, 2.5333315750447691, 2.5918943373853947, 2.590716960886092, 2.6360775067208282, 2.7119129544236893, 2.6902767255672209, 0.44450713257927121, 0.54456463457968785, 0.3125, 0.51130119904134586, 0.63539762562871727, 0.72901917298010999, 0.70666328137946033, 0.82092137674357024, 0.9122990023703671, 0.89188095404494439, 1.003106037462232, 1.0929929945673289, 1.0736337051283078, 1.1820585385327069, 1.2700847237428252, 1.2520819604233244, 1.357086472011158, 1.4428884963550288, 1.4264726838223485, 1.5274942133155369, 1.6107353883651607, 1.5961071300716922, 1.6926150126094313, 1.7729705613183302, 1.7603221355375029, 1.8518040099485575, 1.9289610406730711, 1.9184764751641779, 2.0044392365728645, 2.0781000697549672, 2.0699520551275947, 2.1499231690243072, 2.2198152857203235, 2.2141551765368268, 2.2876812751243931, 2.3535961012033915, 2.3505133702850749, 2.4171470929123124, 2.4791070973383076, 2.4784532113795876, 2.5376833318701233, 2.5966982479365641, 2.5972904519989388, 2.6481741972383182, 2.7098092349720573, 2.7056948752964285, 2.7446046051824129, 2.8369129544236893, 2.7988366221799299, 0.57721663980328397, 0.6882489769865312, 0.4375, 0.64229274149944082, 0.77817871274365269, 0.87050276992127784, 0.84988796215661122, 0.96285967709498033, 1.0536972987228803, 1.0337994090007747, 1.1441768076466492, 1.2336224121708004, 1.2147517001406356, 1.3221478642329152, 1.4095816362007703, 1.3922630789040578, 1.4959159301665763, 1.5809823878563236, 1.5654180504617647, 1.6647884640794799, 1.7471603191526319, 1.7335393677830555, 1.8281085838894486, 1.9074653413700375, 1.8959754600389613, 1.985238855912334, 2.0612724087700944, 2.0520922291025667, 2.1355649518590911, 2.2079855807649871, 2.2012789761889242, 2.2784967411964865, 2.3470510478236783, 2.3429488905767979, 2.4134630243140021, 2.478004607498193, 2.4765312120470901, 2.5398809395508755, 2.6006633146347777, 2.6014307289979235, 2.657013210823489, 2.7159232945265122, 2.7168477225756469, 2.7633155407410781, 2.829028617793933, 2.821002367439009, 2.8533405849809292, 2.9619129544236893, 2.9077964486692633, 0.7067319189054122, 0.82903286508257401, 0.5625, 0.77055445916630927, 0.92171240263209087, 1.0119269399547943, 0.99347985842498887, 1.1046662715845403, 1.1953802635228403, 1.1755078995665007, 1.2853473137827014, 1.3744334004125627, 1.3559924808845565, 1.4624257176180802, 1.5492836281270197, 1.5326361622217812, 1.6349765720151221, 1.7193285019003257, 1.7045912353040067, 1.802357012172304, 1.8838825172689957, 1.8712422264619313, 1.963919961089315, 2.0423006716271788, 2.0319431022934613, 2.1190338652517275, 2.1939666317184288, 2.1860647624860738, 2.2670914591713838, 2.3382962578899265, 2.3330033600206028, 2.4075089816188697, 2.4747578496179283, 2.4721778905836693, 2.539715363824615, 2.6029452769792596, 2.6030160034484107, 2.6631012493265893, 2.7228596397429379, 2.7248911357846226, 2.7768029230455222, 2.8359889821203654, 2.8368673690717041, 2.8788247085700851, 2.9492009846316236, 2.9367207988282065, 2.9626236348687094, 3.0869129544236893, 3.0174203379393734, 0.83396599983686748, 0.96590251955578255, 0.6875, 0.89697163019334247, 1.065083602173583, 1.1540406422057334, 1.1363299841864276, 1.2462663164539038, 1.3372870849351182, 1.3170802304572329, 1.4266856748515289, 1.5153612537163292, 1.4974324784754511, 1.6028940695319769, 1.6891772281583615, 1.6731924745653413, 1.7742590856946985, 1.8579199607632872, 1.8439805096490425, 1.9401920370179007, 2.0208945526969093, 2.0092077282931982, 2.1000420770095114, 2.1774691205594419, 2.168217944194923, 2.2531822031942905, 2.3270366522687116, 2.3203871516510954, 2.3990120409800135, 2.4690257095493777, 2.4651184005699767, 2.5369531177742703, 2.6029303356551106, 2.6018353736333539, 2.666431236234267, 2.7284127799183535, 2.7299609711682362, 2.7868019568052689, 2.8456785533742286, 2.8488299447445038, 2.8970606162431731, 2.9568032983280701, 2.9573624113296684, 2.9947877341048819, 3.0700265163723981, 3.0529365978452101, 3.0726491408934944, 3.2119129544236893, 3.127843281885982, 0.95975078765329969, 1.0987668235470698, 0.8125, 1.0222986934819274, 1.2071110391848807, 1.2971836315882208, 1.2772704874013856, 1.387880992557454, 1.479164275898222, 1.4588385396653547, 1.5682395306012871, 1.6563815551178185, 1.6390791743614423, 1.7435288318068412, 1.8292681873131404, 1.8138993437422788, 1.9137518078832756, 1.9967514981799168, 1.9835759552032999, 2.0782863784115788, 2.1581887977441614, 2.1474293674791411, 2.2364679384181319, 2.3129633557302047, 2.3047930005607244, 2.3876769019118691, 2.4604755746193616, 2.4550523727124576, 2.5313198448338632, 2.6001675554703971, 2.5976172112986338, 2.6668223735560304, 2.731562449991082, 2.7319146165708834, 2.7936042208717442, 2.8543984456865714, 2.8573601004248004, 2.910980027431266, 2.9690926166213232, 2.9732455850700887, 3.0178025613948236, 3.078265964525897, 3.0783516276474296, 3.111285820373288, 3.1912914325956816, 3.1697226280806583, 3.1835013023455749, 3.3369129544236893, 3.2391076700486843, 1.0847520494093137, 1.2281882192703788, 0.9375, 1.1471014538855318, 1.3467338762123549, 1.4410341685273449, 1.4154064984039205, 1.5298772898230357, 1.6208068204362529, 1.6011342914097049, 1.709957870807296, 1.7975482057487318, 1.7808345922059432, 1.8842978414670095, 1.9695613064222288, 1.9547319653025941, 2.0534494986473262, 2.1358128818748101, 2.1233759131261674, 2.2166340282750014, 2.2957569182635753, 2.2859010239512125, 2.373190378787652, 2.4487761251651938, 2.4416609059221259, 2.5225108613678202, 2.5942765170359254, 2.5900532850244873, 2.6640079711789451, 2.7317152076901485, 2.7304928979244196, 2.7971101065300914, 2.8606471706444712, 2.862409077542714, 2.9212287000296824, 2.9808904855425933, 2.9852081905578327, 3.0356350192399981, 3.0930686715572033, 3.0981386304468645, 3.1390483395893578, 3.2002859702875517, 3.1998545429549217, 3.2283806640200625, 3.312872549630661, 3.287127939814726, 3.2951913571387363, 3.4619129544236893, 3.3512012477279076, 1.2094367613179218, 1.3550674508980818, 1.0625, 1.2717479935463958, 1.4832732959293369, 1.58469448177349, 1.5502990875318536, 1.6725232756309083, 1.7622469844955206, 1.7441065562237756, 1.8517072432012169, 1.9389357228425039, 1.9225551587708765, 2.0251940355374938, 2.1100372534186049, 2.0957004923194456, 2.1933529355677046, 2.2750908962867902, 2.2633809921245898, 2.3552277817542624, 2.4335913908016193, 2.4246144070094919, 2.5102017854496719, 2.5849002399528964, 2.5788139913755166, 2.6576769644132834, 2.7284323977620382, 2.7253828350193658, 2.7970695617316546, 2.8636617098814776, 2.8637386479503495, 2.9278098824781909, 2.9901764958275914, 2.9933124414663208, 3.049299816750926, 3.1078749057498696, 3.1135007159545482, 3.1607680803871321, 3.2175727442994155, 3.2235106149407269, 3.2608160629635949, 3.3227930714896718, 3.3218871431178161, 3.3461084861120103, 3.434721418866443, 3.4051759527662449, 3.4076928640206519, 3.5869129544236893, 3.4640887294671425, 1.3340835451404907, 1.4803610857258871, 1.1875, 1.3964350121625539, 1.6165365988339271, 1.7269857542794413, 1.6819929717642434, 1.8157836094830351, 1.9037703850014367, 1.8875318457612338, 1.9933632056705211, 2.0805505603438625, 2.0641579179219822, 2.1662458194127048, 2.2506568844540227, 2.236843304141729, 2.3334588695872873, 2.414576216491779, 2.4035829710555365, 2.4940581516614597, 2.571684749604318, 2.5635595698933726, 2.6474947709628687, 2.7213272690254056, 2.7162452252799594, 2.793168322071562, 2.8629352408240858, 2.861034232147905, 2.9304978702690363, 2.9959994371537406, 2.9973477491680507, 3.0589154871162316, 3.1201416284189638, 3.1246185777872171, 3.1778132483031882, 3.2353369641390262, 3.2422335131180011, 3.2863806833660245, 3.3425745993922531, 3.3493627605654495, 3.3831188268520767, 3.4457422359683028, 3.4444592649354542, 3.4644816166279568, 3.5568389807443452, 3.5238690382545426, 3.5209683918672789, 3.7119129544236893, 3.577733559219531, 1.4588204208787738, 1.6048759822541183, 1.3125, 1.5212319672112316, 1.7467794648182449, 1.8667933066658424, 1.8109223104709959, 1.9592401305262837, 2.0457580122295504, 2.0308165626321273, 2.1349104568532287, 2.222283600673399, 2.2056991821500862, 2.3074922462281582, 2.3913832604983192, 2.3781888905193367, 2.4737521818388961, 2.5542592054960935, 2.5439606321204962, 2.6331158981542035, 2.7100216327673174, 2.702727549809822, 2.7850629383195091, 2.8580427050648072, 2.8539476828816852, 2.9289781999930002, 2.9977731452445244, 2.9969999212105387, 3.0642861470266465, 3.1287185003130014, 3.1313127895808717, 3.1904207458427942, 3.2505330589472021, 3.2563208539538357, 3.3067647455110931, 3.3632634372756804, 3.371402043119236, 3.4124733914440206, 3.4680521578308463, 3.4756949624404974, 3.505963138684999, 3.5691129713799277, 3.567574541993852, 3.5834953356704604, 3.6792503464176809, 3.643197863767702, 3.6349865337588154, 3.8369129544236893, 3.6921118114760363, 1.5836714760367996, 1.729133179747163, 1.4375, 1.6461209663372249, 1.8745704345186318, 2.0033043980680025, 1.9377370727233245, 2.1021518498725067, 2.1884125112201316, 2.1731010446307311, 2.2764813498797039, 2.3639093627866985, 2.3473548624221849, 2.4489366343560328, 2.5321674768591675, 2.5196961901018535, 2.6142056421368078, 2.694087532101102, 2.6844704355890401, 2.7723915399919674, 2.8485472917472134, 2.8420952739662266, 2.922896777545045, 2.9950027755226101, 2.9918978222914574, 3.0650963993999318, 3.1329132965684239, 3.1332578264837148, 3.198424757923696, 3.261796688425215, 3.2656148292574145, 3.3223172205307239, 3.3813380343975892, 3.388404329778695, 3.4361484244634988, 3.4916474455078603, 3.5009970570787758, 3.5390449789694873, 3.594000668445867, 3.6025059058001387, 3.6293510633300299, 3.6929111642507566, 3.6912383717784771, 3.7031411124367071, 3.8019876574222926, 3.7631650297554846, 3.7497369088768076, 3.9619129544236893, 3.8072386930862803, 1.7085850939402818, 1.8531824171133575, 1.5625, 1.7709760352622372, 2.0005786137055734, 2.1359180652633394, 2.062983269226716, 2.2435584173362, 2.3313296839101847, 2.3132282933914023, 2.4182435943075804, 2.5049662953519487, 2.489104798283162, 2.5904541357720245, 2.6727423402783681, 2.6610229642599643, 2.7547330770306853, 2.8337738717973973, 2.8248563994286537, 2.91181949479415, 2.9870121167265395, 2.9814359324283224, 3.06093245998977, 3.1320065236845243, 3.12988877144352, 3.2014667192079505, 3.268204632882572, 3.2696320986216181, 3.3328673356248326, 3.3951367024983057, 3.4001138317253896, 3.4545700345149144, 3.5125145917449645, 3.5207696008593299, 3.5659437718680858, 3.6204986395307168, 3.6309662353238954, 3.6660932666128683, 3.7204698193555972, 3.7297989025864204, 3.7533012159414114, 3.8172055627325472, 3.8155198555684064, 3.8234585456204102, 3.9250963464276971, 3.8839203433649598, 3.8652994284215674, 4.0869129544236893, 3.9233599087029281, 1.8333293295959558, 1.9758834887119174, 1.6875, 1.8951486759789524, 2.124993897436851, 2.2630919546891803, 2.1856527954447209, 2.3818170651633017, 2.4722005446255348, 2.447888618652569, 2.5596033050088338, 2.6437074298344863, 2.6285081410692599, 2.731154233815154, 2.8115143435002969, 2.7995721793647785, 2.8945980720611475, 2.9718176725986134, 2.9628083992550933, 3.0507226895412121, 3.1241175674071493, 3.1186295185336967, 3.1985653663177769, 3.2679736919851834, 3.2660483201774055, 3.3375777616291615, 3.4028096015344071, 3.4045463530996929, 3.4672081621219641, 3.5281692083098055, 3.5335687387903074, 3.5868928539802587, 3.6437793659147939, 3.6525524885933196, 3.6960001073091733, 3.7498209285100677, 3.7608673427974293, 3.7936248637724308, 3.8477109875407063, 3.8576092308327756, 3.8780112721458933, 3.9423545259850887, 3.9410165572910865, 3.9448963333689551, 4.0487548218630796, 4.0067679986561444, 3.9824047732646046, 4.2119129544236893, 4.0425182520377332, 1.9564044118470634, 2.0920446347593593, 1.8125, 2.0141552466541275, 2.2438217068281023, 2.3767976213685662, 2.2926943491466587, 2.5090446385497112, 2.6002716753759549, 2.5551187251312544, 2.6931267500120266, 2.7709157029708189, 2.7431503114812026, 2.8637966299099982, 2.9396103529493773, 2.914055521510114, 3.0271539101903002, 3.1000778679101457, 3.0785326219682783, 3.1830158731173559, 3.252648906780168, 3.2356094750852802, 3.330429181596251, 3.3967432749166737, 3.3844527949147838, 3.4689036504634303, 3.5317729360156971, 3.5245697711318815, 3.597876736580587, 3.6572844762884165, 3.6553862506482697, 3.7167878633702811, 3.7729847764821298, 3.7763404076998244, 3.8250150407699173, 3.8789933525938767, 3.8868179347774476, 3.9216778942793287, 3.9765500607566659, 3.985975282427253, 4.005078159994115, 4.0701193868751036, 4.0722306934636716, 4.071023621898413, 4.1741430152325947, 4.1416742009232426, 4.1069922188596903, 4.3369129544236893, 4.1812366356171902, 2.0660848144441997, 2.1849156006220634, 1.9375, 2.0937347419559784, 2.3207188422074623, 2.4387819965417643, 2.2808381937065385, 2.5659083279380352, 2.659347287088154, 2.4668449783206681, 2.7557300505243609, 2.8345855832682991, 2.6510287432850306, 2.9287712888920092, 3.0069097665301356, 2.8326702549390088, 3.0966722459284091, 3.1721584684154776, 3.0110602070667589, 3.257854599559495, 3.3306327879140794, 3.1855019907228028, 3.4116486933148007, 3.4816103237480291, 3.3553144144750515, 3.5575168143757856, 3.6244980401687479, 3.5198343644427723, 3.694864708296365, 3.75878021904798, 3.6784193937421006, 3.8231230477551299, 3.8840342520668774, 3.830450231227374, 3.9416964441530213, 4.0000673987229431, 3.9753331997317027, 4.0498472593002441, 4.1072845535834279, 4.1125025343636015, 4.1463552408577566, 4.2078003633919066, 4.2414225918067832, 4.228428562628336, 4.3093440189839303, 4.361589941995847, 4.2869539159626608, 4.4619129544236893, 4.4725353339999101
        });
        // if (i == 1){
        // std::cout << "f size: " << model.f().size() << std::endl;
        // std::cout << "expected size: " << expected.size() << std::endl;
        // }
        double rmse = 0;
        for (int i = 0; i < model.f().size(); ++i) {
            rmse += (model.f()(i) - expected[i]) * (model.f()(i) - expected[i]);
        }
        rmse = std::sqrt(rmse / model.f().size());
        RMSEs(i) = rmse;
        // EXPECT_TRUE(rmse < 100);
        EXPECT_TRUE(1);
        }
    } // end for
    // save MRSEs to file
    writeEigenVectorToCSV("RMSE_" + std::to_string(n) + ".csv", RMSEs);
    } // end for n loop 
}

TEST(srpde, TransportTestCase6){
    // for (int n = 50; n <= 300; n += 25){ // number of random observations in the domain
    for (int n = 10; n <= 35; n += 5){ // number of observations considering the bottom border of the non convex domain
        std::cout << "n: " << n << std::endl;
    
    constexpr std::size_t femOrder = 1;
    std::default_random_engine generator(123);
    // define domain 
    MeshLoader<Mesh2D> domain("nonConvex1");
    
    // define PDE coefficients
    VectorField<2> b_callable;
    b_callable[0] = [](SVector<2> x) -> double { return std::log(x[0] + 5); };   // log(x+5)
    b_callable[1] = [](SVector<2> x) -> double { return -(x[1] + 1); };          // -(y+1)
    
    fdapde::core::Integrator<FEM, 2, femOrder> integrator;
    DMatrix<double> quad_nodes = integrator.quadrature_nodes(domain.mesh);
    
    DMatrix<double, Eigen::RowMajor> b_data(quad_nodes.rows(), 2);
    for(int i = 0; i < quad_nodes.rows(); i++) {
        b_data.row(i) = b_callable(SVector<2>(quad_nodes.row(i)));
    }
    // construct b together with its divergence
    ScalarField<2> div_b_callable = div(b_callable);
    DVector<double> div_b_data(quad_nodes.rows());
    for(int i = 0; i < quad_nodes.rows(); i++) {
        div_b_data(i) = div_b_callable(SVector<2>(quad_nodes.row(i)));
    }
    DiscretizedVectorField<2,2> b_discretized(b_data, div_b_data);
    double nu = 1e-3;

    // forcing term
    auto forcingExpr = [](SVector<2> x) -> double { return 1.; };
    ScalarField<2> forcing(forcingExpr);
        
    // forward parameters to PDEparams
    PDEparameters<decltype(nu), decltype(b_discretized)>::destroyInstance();
    PDEparameters<decltype(nu), decltype(b_discretized)> &PDEparams =
            PDEparameters<decltype(nu), decltype(b_discretized)>::getInstance(nu, b_discretized);
    
    // define differential operator
    auto L = - nu * laplacian<FEM>() + advection<FEM>(b_discretized);

    // prepare boundary matrix for neumann boundary conditions
    DMatrix<short int> boundary_matrix = DMatrix<short int>::Zero(domain.mesh.n_nodes(), 1);
    DVector<int> NeumannNodes(54);
    NeumannNodes << 2, 6, 13, 24, 40, 60, 81, 102, 126, 151, 175, 200, 227, 252, 278, 303, 317, 340, 363, 370, 393, 414, 435, 441, 462, 484, 505, 524, 543, 563, 581, 600, 616, 632, 648, 661, 671, 681, 692, 700, 708, 715, 721, 727, 733, 740, 745, 746, 750, 751, 754, 755, 756, 757;
    for (size_t j=0; j<NeumannNodes.size(); ++j){
        int i = NeumannNodes(j);
        boundary_matrix(i, 0) = static_cast<short int>(1);
    }
    PDE< decltype(domain.mesh), decltype(L), ScalarField<2>, FEM, fem_order<femOrder>, decltype(nu),
            decltype(b_discretized)> pde_(domain.mesh, L, boundary_matrix);
    pde_.set_forcing(forcing);

    // set dirichlet conditions at PDE level
    DMatrix<double> nodes_ = pde_.dof_coords();
    DMatrix<double> dirichletBC(nodes_.rows(), 1);
    for (int i = 0; i < nodes_.rows(); ++i) {
        dirichletBC(i) = 0.; // solutionExpr(nodes_.row(i));
    }
    pde_.set_dirichlet_bc(dirichletBC);
    
    // set also neumann b.c.
    DMatrix<double> boundary_quadrature_nodes = pde_.boundary_quadrature_nodes();
    DMatrix<double> f_neumann(boundary_quadrature_nodes.rows(), 1);
    for (auto i=0; i< boundary_quadrature_nodes.rows(); ++i){
        f_neumann(i) = 0;
    }
    pde_.set_neumann_bc(f_neumann);

    pde_.set_stab_param(5.0);

    // define smoothing parameter
    double lambda = 1.;

    // import matrix of spatial locations p_1, p2_, ... p_n
    DMatrix<double> locs = read_csv<double>("../data/transport/TransportTestCase6/locs" + std::to_string(n) + ".csv");
    // std::cout << "dims locs: " << locs.rows() << " x " << locs.cols() << std::endl;

    // add noise to observations (5% of the range of the exact solution values)        
    DMatrix<double> observations = read_csv<double>("../data/transport/TransportTestCase6/observations" + std::to_string(n) + ".csv");

    std::size_t constexpr Ntests = 50;
    DVector<double> RMSEs(Ntests);
    for (int i = 0; i < Ntests; i++){
        DMatrix<double> y(observations.rows(), 1);
        std::normal_distribution<double> distribution(0.0, 0.05 * (observations.maxCoeff() - observations.minCoeff()));        
        for (int i = 0; i < observations.rows(); ++i) {
            y(i, 0) = observations(i, 0) + distribution(generator);
        }

        // begin test 
        {   
        SRPDE model(pde_, Sampling::pointwise);
        model.set_lambda_D(lambda);
        model.set_spatial_locations(locs);
        // set model's data
        BlockFrame<double, int> df;
        df.insert(OBSERVATIONS_BLK, y);
        model.set_data(df);
        // solve smoothing problem
        model.init();
        model.set_dirichlet_bc(model.A(), model.b());
        model.solve();
        
        // test correctness
        std::vector<double> expected({
            // non perturbed
            // -1.3691046629850356e-33, 1.136096329824904e-33, 0.088229536164348643, 0.057206772915397837, 6.0593885133358591e-34, 0.11384481130687739, 0.16969279217704999, 1.2447059235898833e-33, 1.5039711853192783e-33, 1.5168620086939317e-33, 2.5244066792332624e-33, 2.1554798890180562e-33, 1.242054748706193e-33, 0.24477743748184397, 0.12349761014577058, 0.06254281876711501, 0.19619196189417065, 0.053306381499167804, 0.053683225848518645, 0.052018278411662247, 0.048248357117993169, 0.045312880474490343, 0.044927593426154933, 2.5321249724210001e-33, 0.31352033375357308, 0.25081656241245159, 4.5039878871053254e-33, 2.9121309260489996e-33, 3.8802431662293802e-33, 3.2568536592773721e-33, 0.15551548502871698, 0.18786166116749586, 0.10373721276754994, 0.10460726810765099, 0.10690558731312066, 0.09127927787583498, 0.090418388203054853, 0.088001920947547829, 0.043697804795926311, 0.32269880632599829, 0.37724327951703118, 0.26842951276175636, 0.039721010372554835, 0.038845124278864475, 4.9309860144835208e-33, 0.042585530127836675, 0.041160718345355528, 5.5720729951135093e-33, 6.3528853863887569e-33, 5.8704959117580132e-33, 0.21315246285468925, 0.15897460866150079, 0.15786460406711755, 0.14568984293420784, 0.13657521298202965, 0.13303099583116704, 0.085943153669127831, 0.13015004855896142, 0.32213950512076406, 0.3796912283482764, 0.4359194169974992, 0.26921544235694911, 0.081435242968144597, 0.078667013933505739, 0.037360310851312258, 0.071881022784138049, 0.083186057094717519, 0.036736096843703353, 0.032774454586053513, 0.033870898788091547, 6.960732442497521e-33, 0.23444955612440427, 0.20768301182754545, 0.1839914658522506, 0.18078337283693477, 0.17518763929081496, 0.12615301665155523, 0.16990552595446978, 0.38381872053198457, 0.31753827563100084, 0.43091263342988673, 0.48933992515446445, 0.12362952946110911, 0.11955151206001964, 0.10927041765192294, 0.074496473350407003, 0.11330661358939736, 0.071637793186692569, 0.065818287843937381, 0.066436406565195241, 0.032438012720718203, 7.5463732676143784e-33, 0.23083084398253878, 0.27948171256616239, 0.22595732331324309, 0.2186194103958303, 0.16394764140453053, 0.21177125896636761, 0.43224830479926696, 0.37745318998782851, 0.32939598306565759, 0.48539291622212499, 0.53955442468802517, 0.16151961552371333, 0.15520876484304372, 0.15321888510631462, 0.10894538605876808, 0.14139079890367853, 0.10114917135602808, 0.10365144616748574, 0.1029497764959775, 0.067584146399480835, 0.032393559215792976, 8.3290339665373939e-33, 0.27365321360140488, 8.5999663906538341e-33, 0.26112242072168856, 0.1795329759710976, 0.32233427954712685, 0.28803647237526941, 0.25252739396048468, 0.20472268422016784, 0.43091178829991605, 0.48062963832488892, 0.36900139163129747, 0.53208130401366172, 0.5847441749481932, 0.19650782681361664, 0.18862466342530493, 0.13686944410893848, 0.17356142828991461, 0.13559931893227087, 0.13533834513357301, 0.099346884543633551, 0.13444299280495881, 0.06522926370647944, 0.032117874966089047, 0.032029010166953954, 8.8965389292701609e-33, 0.30551012051962373, 0.21521740032099715, 0.2188839850667397, 9.3359448556054163e-33, 0.29505131162475839, 0.3572864480221265, 0.27015834305565223, 0.23710524303513184, 0.4603731912085815, 0.40481213861562071, 0.51266402772768194, 0.56979845807219209, 0.62702768230411454, 0.17228180347139013, 0.21008513247173058, 0.17160072340835625, 0.1706953619104371, 0.10139719317880042, 0.1339931391750718, 0.17038625801676999, 0.066604365581906161, 0.062809365639983863, 0.030970628469999137, 0.34604356212523135, 0.25080079862426763, 0.26478618144603305, 0.03099965214777017, 9.6682367347796712e-33, 0.33553658983926743, 0.3265211413722639, 0.39161398733524283, 0.30224234062975208, 0.49488059089004532, 0.45390495653932039, 0.55188013044521411, 0.60726941905156928, 0.66624017313835948, 0.21581185518976329, 0.25779343442925196, 0.20829503410408889, 0.21316654541437699, 0.12955688447080399, 0.095614265776241478, 0.16435026936408029, 0.18848601376157428, 0.062922678923569869, 0.09580624736010615, 0.37665098078072584, 0.29143553375697506, 0.064315843280271678, 0.031736705874625709, 1.0164563332765972e-32, 0.39001771808426888, 0.36019842835651356, 0.25280649937136473, 0.42333534345087376, 0.33168553497323744, 0.48620620587989061, 0.52788919601096207, 0.58470261773106502, 0.64171499617198702, 0.7021151357160198, 0.24690940690597721, 0.29850796152553816, 0.25298905168205682, 0.23766235499044655, 0.13219876996385119, 0.16453025126499699, 0.20069257959237724, 0.097958164053705762, 0.13257105004608247, 0.06480081468129692, 0.099994096877341149, 0.032363099967480456, 1.0201624542590002e-32, 0.42253884456798585, 0.37552228134507404, 0.28706290266468271, 0.57707138394798529, 1.0178393925294363e-32, 1.0240034060926349e-32, 0.46935948607781025, 0.33038034381181153, 0.38686486279508842, 0.51724953439777044, 0.5678653749481658, 0.62217093781038069, 0.67766058505564553, 0.73539721196191643, 0.29421775492331886, 0.2761971272109538, 0.24120998572692137, 0.16833088901865842, 0.20387062819172561, 0.13329603276828908, 0.062927423965056115, 0.09560946079616589, 0.12932990064533206, 0.031006895712514377, 0.43633189071422768, 0.32810355758718557, 0.031456549463756651, 0.032247767911949415, 1.0428780238474489e-32, 1.1934254237462456e-32, 9.8274220045920286e-33, 0.48428080384302119, 0.37254437825722458, 0.41729166073570312, 0.53676736723443652, 0.58940292601919042, 0.64628819012388417, 0.70473019462403208, 0.7664031073110299, 0.34355721382872484, 0.316351418437821, 0.28268698717500212, 0.24330286136887672, 0.17192952458189883, 0.20626292766239571, 0.16382054643246197, 0.064242031555792584, 0.096745627050306884, 0.13206793849442688, 0.165646604192453, 0.46415633693622665, 0.065181040526937059, 0.066618222379094691, 0.033179694686736413, 0.033833594613266814, 9.3805021153027573e-33, 0.52558158974157287, 0.51277569474679041, 0.42847237543765015, 0.40097090815875269, 0.56492380480558846, 0.61866645273721033, 0.67533798771879483, 0.73376978873359744, 0.7954941686416046, 0.35773779080799017, 0.32408576746233908, 0.28413272599321548, 0.24872783408423585, 0.19959018823442581, 0.22388862310139518, 0.099086462451577109, 0.16941673315226707, 0.1337765588849639, 0.20406883579982582, 0.47878189952028349, 0.1015137439696869, 0.068564464396312239, 0.034807989248888956, 8.5190855839792971e-33, 0.55362297838074592, 0.54121053774000583, 0.45643364388245672, 0.49250344213695485, 0.41065053213657909, 0.59240666470443382, 0.63694720963338736, 0.70209990842010084, 0.76089455017795626, 0.82239884871198321, 0.36804511199895368, 0.3312349059869299, 0.30230828722637793, 0.27445622452793206, 0.23842523566644322, 0.13704164293258433, 0.17207403035794322, 0.20919998383139241, 0.24399465947887691, 0.10375468860680089, 0.07027988447263174, 0.03593437379300448, 7.9021291587730917e-33, 0.84757435357394473, 0.60808311967122985, 0.072324204781048146, 0.55651505080577313, 0.5051421486259311, 0.45798849385714652, 0.42071481031616603, 0.66336145432785665, 0.72186668635187912, 0.78372938949055082, 0.38368427026450208, 0.34680233608016503, 0.31600615969015555, 0.28038357236831579, 0.13971913332434913, 0.17659280425708168, 0.21423604562333612, 0.24909352086585052, 0.28530807767178118, 0.10637096597970645, 0.037353952795913109, 6.945401297059645e-33, 0.80403414089179104, 0.87090433494111241, 0.62351960915882365, 0.10916966763337586, 0.075003486351431073, 0.45413822052972003, 0.11257186739502703, 0.52080236103291611, 0.56864068363208309, 0.48836407409440308, 0.39889828031756458, 0.69028028421048282, 0.74863149032604004, 0.36216387270213163, 0.32323882485441741, 0.18031531188832037, 0.14346410319983979, 0.21855396134656002, 0.25317521352002514, 0.28941612055120863, 0.32926220675165158, 0.040736250328575162, 5.9107299661833189e-33, 0.82824230029158141, 0.89270924146587649, 0.6108090652689252, 0.14688619238265882, 0.081647691597392755, 0.45061491947741977, 0.1508908434852301, 0.12276543589693424, 0.91279833071029004, 0.53566360925754408, 0.49992663693675526, 0.40801338491646622, 0.70747603240538504, 0.65446489132805397, 0.7676347043904127, 0.36834644206794986, 0.22470814304093084, 0.18554208760954644, 0.25916958235930676, 0.29787297255843193, 0.33447629501618215, 0.37553703493372392, 0.042346168043983987, 5.2237924556651556e-33, 0.84790425580235318, 0.5989544295594762, 0.19024026589940848, 0.08534746031694411, 0.46272063347298931, 0.16451603530420802, 0.12699512937129509, 0.93269858015718732, 0.26426239034509919, 0.34211120397194611, 0.55147366797443942, 0.51413394273381907, 0.42117625753577298, 0.72542100214090088, 0.672050078332465, 0.61532266280144032, 0.78654523741357163, 0.23046285588023618, 0.30541691939763199, 0.38192479675689078, 0.044842902140238582, 4.1421329034993069e-33, 0.86621533375698145, 0.20648712478814912, 0.088905063845422974, 0.47147762184137981, 0.17045957063444656, 0.13272406939396139, 0.95038245276526534, 0.27170427008208148, 0.35379991459737303, 0.38995213856948324, 0.5676412677444691, 0.5252875018406199, 0.43608644605302033, 0.74694468188957852, 0.6830918257907912, 0.63234394703327745, 0.80505365153142439, 0.249560761341834, 0.31302065997060091, 0.047066945603868475, 3.4476204354919572e-33, 0.88029728435795784, 0.21310570927807668, 0.094030710615247315, 0.48206758358708313, 0.17636487213212848, 0.13830074520906147, 0.96647002057960951, 0.29378656334421993, 0.39719202107978785, 0.34795150049259527, 0.38377826693325745, 0.43383666301696133, 0.98186105977765048, 0.58539410119620039, 0.53592625234082025, 0.49316216687574627, 0.81491421057457303, 0.70052216126358158, 0.75705181936686006, 0.63614937069820776, 0.25671369427453439, 0.34616741627239422, 0.050775656773650354, 2.5151020394001422e-33, 0.90011651987784635, 0.22074749232358429, 0.098730690659461273, 0.18306195297531866, 0.14580571183122348, 0.30128348233921187, 0.43059968440266211, 0.39353461431414133, 0.9144242268467242, 0.99657404629113067, 0.19203272100953947, 0.58201790836454759, 0.537481024324302, 0.4905879492208286, 0.83726875742884599, 0.70679533889943502, 0.66243871589610237, 0.76667734906215612, 0.61970945904953401, 0.27439928500893218, 0.31075389658245756, 0.3558895559520977, 0.057976920473434848, 1.4624143888685445e-33, 0.22805420826888417, 0.1114992806528733, 0.16121211472388408, 0.44116776941010483, 0.40237918215418994, 0.92870241398893338, 0.85173629552721053, 1.0097984627354002, 0.23778841997058622, 0.2112262069885491, 0.74586535459189873, 0.60214590317851568, 0.54964362744276751, 0.51104425349253935, 0.45985774184345574, 0.78571765449332398, 0.72662872417887903, 0.66386610037344551, 0.31958862589782117, 0.28410630936591047, 0.36607866469173211, 0.41366176633014523, 0.062492404153410147, 3.5000738490906197e-34, 0.11639292579806483, 0.16949910450410258, 0.8591825251002424, 0.94162756891098265, 1.0220763197101661, 0.26203507812928506, 0.2233189818188637, 0.62379033292072095, 0.5620598681353004, 0.51120175737734164, 0.46058391457158515, 0.79578758660147253, 0.67135719837634444, 0.73486453431429233, 0.36361487751118471, 0.31148624766380639, 0.42439290694081355, 0.0714356266890145, -4.4217400395454968e-34, 0.13315368383784371, 0.19157556155186106, 0.8764916419607568, 0.95439418631581918, 1.0333874711811128, 0.27328436849888466, 0.24712823221209271, 0.61993105539075055, 0.56562425481161305, 0.51899963207734534, 0.46024322007828705, 0.80626005763245689, 0.68579939615397534, 0.7489582110183145, 0.41039118142547726, 0.35982887580938316, 0.32146839616670414, 0.079038330468770235, -1.4231337964041975e-33, 0.14301257666056372, 0.20582767230262522, 0.88969324712240816, 0.96736398440795379, 1.0439703692221487, 0.30049120005444091, 0.26313321443595261, 0.60210839523546178, 0.65724834528781906, 0.78696573872633424, 0.57066144574435274, 0.47417644288573929, 0.52654228367292344, 0.82638853851977367, 0.69542656472184405, 0.37182982816836202, 0.42255650023775804, 0.35405859455642025, 0.096156339641068331, -2.2481821953676402e-33, 0.16664112887878788, 0.23085294071796156, 0.89496994439979261, 0.97538728183131307, 1.0534482691906162, 0.3149735164348052, 0.29206850108740645, 0.63986500027964111, 0.75467819888244581, 0.53079789564664537, 0.58616353042888392, 0.46115126689922226, 0.83013030242268238, 0.70805774890279982, 0.42413725864416196, 0.36827079600789081, 0.11190562264022695, -3.2323646637381639e-33, 0.18551991406306964, 0.24767687105373548, 0.90875402966667851, 0.98228102427374453, 1.0619288055512126, 0.34293764259749848, 0.30898878690827608, 0.65118521489032721, 0.78138313342662047, 0.52035711048961653, 0.47627947337509208, 0.59479389045347164, 0.84471822346483194, 0.72307238236273386, 0.42606196304518296, 0.37120629429654045, 0.42708307310156302, 0.1352501715369879, -3.2740757657215288e-33, 0.21401051969231774, 0.28371439032074952, 0.91409292399287301, 0.98673808869488433, 1.069568722527017, 0.34830771768372915, 0.64654105770051218, 0.78291836284297212, 0.53771591690164267, 0.48185096582618259, 0.58707676961498845, 0.8592004722920159, 0.72208309889843214, 0.40989539212857989, 0.15638675029598348, -3.2397649158845009e-33, 0.23675332283747483, 0.31007323793256009, 0.9143566747951416, 0.99723626888672956, 1.0762486756480538, 0.37448484353490125, 0.66154353716535208, 0.78502030352126029, 0.43188440881310936, 0.55152835689044377, 0.49329510644216018, 0.60197224216215639, 0.84441012691987927, 0.71974597128505047, 0.19168580765025447, -2.1866989969185915e-33, 0.27488517135799451, 0.35018028339502294, 0.91789173587698891, 1.0028850418503454, 1.0822624524551392, 0.4174763492319723, 0.65726875198561452, 0.78074475647109676, 0.47975714589809954, 1.0065962914638926, 0.53908678964385393, 0.60284962556839383, 0.84594374258482052, 0.70270171243644086, 0.77316598797302871, 0.24154955751316221, 1.500646772139804e-33, 0.323447686194273, 0.39491232504517149, 0.9292902718366306, 1.0873451939312238, 0.46447443094462049, 1.0094180108483499, 0.93118404673129507, 0.628633147374278, 0.55699875032908897, 0.85598631699289962, 0.70921817541458854, 0.78165951765919528, 0.32317142111398023, 6.1033444614405057e-33, 0.39507836606465879, 0.47616698531236978, 1.091558371546643, 0.93062691611399206, 1.0113678599055125, 0.63075295998642511, 0.54824482560325027, 0.82442496973037671, 0.74104122137992257, 0.42872138583049713, 4.7784080598455312e-33, 0.46101000417407073, 1.0948607043360725, 0.93036408586031771, 1.0105750920228838, 0.6196253490805621, 0.70007156824433836, 0.84867145854049586, 0.5237140559836404, 0.7692177535190996, 0.50955933148192489, 2.7764030077583147e-33, 1.0969078361162741, 0.92486823898269932, 1.0107305897090846, 0.67929067600946613, 0.6002939857921874, 0.80998566333167976, 0.9167852684357799, 0.58889688488919079, 0.54270131764160334, 0.70743070331836666, -4.6342466178705462e-34, 1.0982619668440303, 0.83229406507158676, 0.99384109398843001, 0.73782696779644108, 0.9083890333654171, 0.58689880821129559, 0.65491546198606909, 7.6394040235053352e-34, 1.0980599881587363, 0.8058121899914954, 1.0018199969116242, 0.71467439926942911, 0.92290342865153385, 0.84093446607529088, 0.59310142639175001, -7.9130412063602373e-33, 1.0968010485822515, 0.78552650670599866, 0.98757258831520489, 0.68675045805632784, 0.87764114765691814, 0.50640818504706109, -4.3672385094179912e-33, 1.0929950810502111, 0.79977029045464731, 0.98923881770318578, 0.90906208608734496, 0.41921526607637055, -6.5352092903309695e-33, 1.0821418223368537, 0.76814633455130243, 0.98415365386043263, 0.87276781987354235, 2.8489140731751391e-33, 0.35760876378112866, 1.0848963601189925, 0.8299298638262772, 0.98225709999367794, 0.29859417015360395, -1.4510935158975175e-32, 0.72530483886098052, 1.0860883845552729, 0.99074725027402577, 0.17314071566142264, 0.58201700926688027, -6.7095720452950974e-33, -6.7760060101559748e-33, 0.94969446290959947, 1.0988970021485105, 0.21935021980314018, 0.45426154746202163, 0.83847935938272578, 0.12998059038621074, 0.08992345673832465, 1.0999832324008108, 0.44810500922138846, 0.25957728811026509, 0.75153186770066815, 0.17473453509124326, 1.0086536835851401, 0.52462777317183651, 0.68331130883801694, 0.29314956485933596, 0.9100838925891398, 0.54281364128176335, 0.80376304668597198
            //perturbed
            2.7688766992466025e-34, 9.7415148969186764e-34, 0.062247814458890237, 0.041753019775835079, 1.3239322433552202e-33, 0.082213749052086102, 0.12216608527859919, 1.6955073952921773e-33, 1.8573264530006614e-33, 1.6553123926041605e-33, 2.3691784174050401e-33, 2.1129035763642183e-33, 1.5145377395688431e-33, 0.18081751020239806, 0.093019437671508831, 0.046873199698598537, 0.14738977505765236, 0.044209323122339772, 0.043070285570875153, 0.044141161440648245, 0.037752812268990604, 0.039327372631597628, 0.040226295037831206, 2.5514538526845947e-33, 0.23818858320924607, 0.19302974918168284, 3.5125297751186451e-33, 2.7662849246553665e-33, 3.2895567982721405e-33, 3.027841395561781e-33, 0.12275802244378574, 0.14568629245420073, 0.082570443200828833, 0.088533203657377532, 0.088563661967748744, 0.079052094038635515, 0.080871291910990739, 0.080482637516114425, 0.039939793454502936, 0.25444315443792054, 0.29423167368000269, 0.21264335119294042, 0.038316035357377473, 0.038081907541249356, 3.8025401946947237e-33, 0.039609620184518315, 0.039129963747173327, 4.0103083074627848e-33, 4.519956894425445e-33, 4.2825368506031711e-33, 0.17240802515554829, 0.12947144289894869, 0.13341426968770231, 0.12628425697291581, 0.12192086111621221, 0.12153562254699747, 0.079941975089971834, 0.12105377320052879, 0.26515332861305985, 0.30699534232058834, 0.34866915598001241, 0.22085372751613566, 0.078457401612857358, 0.07707479093287882, 0.037189164732164166, 0.071445471384412637, 0.078987065238272813, 0.036969925344903946, 0.033870623205177829, 0.034594048776916235, 4.6662792305385995e-33, 0.19895105399949245, 0.18007406815842614, 0.16203088258973461, 0.16358072611027216, 0.16307908252515285, 0.11952753767541335, 0.1608863994489734, 0.3261767613555045, 0.27120540682843691, 0.3592167439877848, 0.40105987199730508, 0.11919998169850585, 0.11685077164164623, 0.10859435648332788, 0.07498322839567996, 0.11400029175226778, 0.073211569294768214, 0.068752952338895279, 0.068544855207655672, 0.033912716399629506, 4.8948883617543674e-33, 0.20503460941352969, 0.24765345410231107, 0.20580058099009318, 0.2049066212067614, 0.15852319639755616, 0.20289530556916507, 0.3735656613760886, 0.33266282497041749, 0.28960061514485536, 0.41420561265132561, 0.45309944724111229, 0.15766865582721487, 0.15461224731602463, 0.15403714262083415, 0.11122483759544792, 0.14369714187594296, 0.10435682664098665, 0.1082039097559388, 0.10861168829919092, 0.071305666746213497, 0.034233420993001237, 4.9554833635695805e-33, 0.24815639848178123, 5.0548721372007085e-33, 0.24671910781386783, 0.1821775509021733, 0.29157376971616805, 0.26846893972371866, 0.24281316816773788, 0.19993891591053123, 0.39046105840182321, 0.42933511386845052, 0.33526524396549701, 0.46740991265960913, 0.50295584579301245, 0.195437849147266, 0.18946645652781946, 0.14110422256493488, 0.17849345484878709, 0.14105329647893194, 0.1429990817989493, 0.1058947692606215, 0.14311460624203262, 0.06962795986157598, 0.034291934746450814, 0.03454545996212921, 5.1640137604495627e-33, 0.2903589682564216, 0.2203458468355437, 0.22159162390765377, 5.1389507890669856e-33, 0.28630014773514445, 0.33422407151851408, 0.26582087294725659, 0.23739957500601955, 0.42408201955180613, 0.37928825074386818, 0.46948748648332378, 0.51088797657402629, 0.55166523444529392, 0.1791388394041413, 0.21784806817209337, 0.18095606035024497, 0.181580891704546, 0.10928399801427682, 0.14388052587396516, 0.18261364666704613, 0.071820549837891295, 0.068415454215841359, 0.033793982174434078, 0.33117873733192543, 0.25691057872263406, 0.26796324061947457, 0.034125712786169937, 5.1413451571124172e-33, 0.32830527705305146, 0.32502912589967003, 0.37622064075268474, 0.30338412983091695, 0.46772195796802279, 0.4351257637980202, 0.51333879353112821, 0.5582152594483597, 0.59937832738807117, 0.22658505086359182, 0.26815281208128533, 0.22123019082509113, 0.22880827841978527, 0.14069711171596291, 0.10396119198775225, 0.17813444292936814, 0.20326637788966034, 0.069176500919688647, 0.10511683011055414, 0.37059556520050474, 0.29801157100205089, 0.071407504495874921, 0.035322096441748323, 5.0652413332891237e-33, 0.38850048012586402, 0.36324635792431659, 0.2654857514963771, 0.41732737534706338, 0.34065135371564698, 0.47703934467673109, 0.5110009985304359, 0.55642769287904514, 0.60347447089285777, 0.64535802734320802, 0.26160562607560583, 0.31199679535264863, 0.27122746575178358, 0.25674038073855471, 0.14507737228620049, 0.17983074315520539, 0.21866256904694537, 0.10857626134205506, 0.14656265888870848, 0.072644146461067607, 0.11203349625431702, 0.036392111629045716, 4.9219533027785095e-33, 0.42630556545875403, 0.38352441593917996, 0.30368602255614024, 0.56138343753302122, 4.7643513941580951e-33, 4.5643838268631492e-33, 0.47104815574225811, 0.34667893603966143, 0.40104190216380292, 0.51798526362630992, 0.56213354021088335, 0.60666171520340972, 0.65024563417614789, 0.69035192521465583, 0.31454093852703446, 0.29797218516546659, 0.26269924514348203, 0.18589712977762857, 0.22432804357458588, 0.14873993051930143, 0.071315653621790223, 0.1079577553176555, 0.14584189896981029, 0.035276546957797562, 0.447605123373985, 0.34843286406693957, 0.036150096963717113, 0.037464463433657669, 4.3437274740481812e-33, 5.6382497737447137e-33, 3.5114329843051668e-33, 0.49656699058046461, 0.39236897492373052, 0.43742066374936428, 0.54350288763886878, 0.59350380866731911, 0.6412748990011985, 0.69017305425569819, 0.73354926130498888, 0.36762700944241117, 0.34227804765593489, 0.30787106367387745, 0.26745675420433263, 0.19170488519939641, 0.22893149840621799, 0.18411598117862432, 0.073773245300910145, 0.11039379819239875, 0.15043066725372131, 0.18768287140116782, 0.48447847865271826, 0.075437529431332404, 0.077948522588985297, 0.039427549893970501, 0.040443889581030158, 3.1755978656662657e-33, 0.54083385639554804, 0.53475136964332215, 0.45516886428632319, 0.4285348867846423, 0.58260347319352457, 0.63189918920714871, 0.680407876338886, 0.73184920135927078, 0.77566287636596043, 0.38599186057939289, 0.35437316471842345, 0.31341549722090156, 0.27614036975735801, 0.22386071289641657, 0.24977222154794887, 0.11465403477886492, 0.19408321170342308, 0.15367562100800514, 0.23108172990012971, 0.50478305880976537, 0.1184181983671025, 0.081715870854380618, 0.042209816818624332, 2.7724351337226365e-33, 0.57919366040353626, 0.57310706486744745, 0.49211208766730064, 0.52469077715088974, 0.4463440636294515, 0.62135128959342256, 0.66061203075292085, 0.72244292772774821, 0.77167149140209046, 0.81623728672713036, 0.40309938550343666, 0.36579726998155726, 0.3356078120279451, 0.30614273956822985, 0.26842024880503057, 0.15958722744432882, 0.19860598633445095, 0.24032593888594214, 0.27748689983482977, 0.12246919279110979, 0.084705835511974428, 0.044336041545754414, 2.241951481705072e-33, 0.8553750478620713, 0.6477433015043883, 0.088450046500706217, 0.59847857134812932, 0.54477271039247011, 0.49800484877814211, 0.46174210941717853, 0.69976628151920284, 0.75289398503700178, 0.80835356548110726, 0.42311070869878109, 0.38579840459285925, 0.35336074337904777, 0.31587094705030494, 0.16403650502915373, 0.20623665374065706, 0.24842347252571897, 0.28550002112203587, 0.32392443687630484, 0.12701094649735081, 0.046938695947305202, 1.7697693226865607e-33, 0.84093434303903258, 0.8930135083254751, 0.67194963211265724, 0.13220946434440933, 0.093033117027280746, 0.49924122066128501, 0.13833606416316122, 0.56655065928055914, 0.6170934524211632, 0.53771265350292918, 0.442868920786121, 0.73963398252867307, 0.79507872306453309, 0.40563812633720736, 0.36507784690265099, 0.21243232159035494, 0.1704278042138124, 0.25580867760775777, 0.29270883059346381, 0.33105313293652533, 0.37461840305761651, 0.052267177266913392, 1.0708308775706718e-33, 0.87986582758928156, 0.92946529981962023, 0.66665374133474742, 0.17634887911109234, 0.10294858261513191, 0.50099395861832496, 0.18357304761869939, 0.15258041796863828, 0.96411240501765472, 0.58730215001168617, 0.55585358571653365, 0.45763647734555291, 0.76879277005309465, 0.71870470503840145, 0.82698310099444383, 0.41665556944658505, 0.2655905057334807, 0.22094589491958183, 0.30214153414291595, 0.3447859227142917, 0.38342398566364, 0.42762582507325442, 0.055708962634064066, 4.8808243026867251e-34, 0.91394984354750619, 0.65990580820973921, 0.22890726407338002, 0.10942857306576512, 0.52218110856480293, 0.20185079262732292, 0.16053663813939389, 0.99952288239468401, 0.31077883828944169, 0.39581391579118658, 0.61232675189859442, 0.57957678638654853, 0.47867091682697188, 0.799270586121269, 0.74691000003699048, 0.68666808652927369, 0.85883477682403875, 0.27491039443892012, 0.35723676620886591, 0.43821703395806072, 0.060625002479408517, -1.0219190237506243e-34, 0.94655140210995081, 0.25099255141663079, 0.11637433419607926, 0.53586565731327962, 0.21148648672260034, 0.17019791660922118, 1.0334485954957433, 0.32283335191055729, 0.41380669825198574, 0.450304573947928, 0.6383483259274404, 0.59791661883706604, 0.50251864022870485, 0.83429228114189313, 0.76542771768372286, 0.71413930502903855, 0.88998726201388079, 0.30064233193074102, 0.3697293081634378, 0.065931077292316467, -7.0688244854123607e-34, 0.97505555169836455, 0.26228662582029905, 0.12551393376602443, 0.55276974442915949, 0.22222807671042336, 0.18068807952196428, 1.0654251772361323, 0.35058019217571113, 0.46196635142864489, 0.41013966229100784, 0.45190468487957597, 0.50362954951085404, 1.0961844232095601, 0.666450334340565, 0.61380901930999099, 0.57069532736667117, 0.91187269353331279, 0.79438394633292164, 0.85619617742007403, 0.72804950824929648, 0.31293703149884483, 0.4122725410724995, 0.073956990249216828, -1.5211545420761876e-33, 1.0090470402404967, 0.27419839193604523, 0.13521588342825089, 0.23440314672105511, 0.1936106803217382, 0.36382790136300419, 0.50422503566008803, 0.46648710724512127, 1.0373108090874732, 1.1257876693811115, 0.24890337270603291, 0.67019267906084579, 0.62397228702343976, 0.57628748384204287, 0.94850314151498927, 0.81160226113250911, 0.76266931258498882, 0.87430052967118776, 0.7155729108708575, 0.33950490567879399, 0.37865062131553079, 0.4282861618332135, 0.088069203018742451, -2.1767734402693545e-33, 0.28738537496430644, 0.15548307126981378, 0.2174527507846282, 0.5211188763690785, 0.48046654400548849, 1.064963684089604, 0.97452951102176033, 1.1543547017743112, 0.30254119392937329, 0.27708809531831163, 0.85816266570819355, 0.70091600947907429, 0.64397878050406665, 0.60759787932064202, 0.54724561547076167, 0.90588252180359874, 0.84319376652482569, 0.76971274424274272, 0.39285070232387292, 0.35593407472216954, 0.44535955905522184, 0.49737062832435419, 0.099888342524495757, -2.9551540078422385e-33, 0.16812487744563903, 0.23366197382286466, 0.9937534847266053, 1.0919418866646866, 1.1817789688454532, 0.33479683834195478, 0.29609278564175123, 0.73424758573684579, 0.66441738858773047, 0.61326611432708089, 0.55252157918383626, 0.92785448324273079, 0.78804505861966923, 0.86277820565541719, 0.44756688938366396, 0.39107990586392427, 0.51395032296476206, 0.12057768110030628, -3.3142765290623716e-33, 0.19542154834062284, 0.26597172290694776, 1.0256222681373433, 1.1187692376165448, 1.2081368688544123, 0.35394769799248726, 0.33068914019004997, 0.738083765726679, 0.67718348558323016, 0.62734008712988609, 0.55704996388635464, 0.95036385895713804, 0.81172529929591819, 0.88716014885108474, 0.50478421188343336, 0.44815555650234085, 0.41100523829534291, 0.14059130842416467, -3.8333082875322028e-33, 0.21613561366470355, 0.28998544392620845, 1.0519293506100329, 1.145655625051724, 1.2335039877141096, 0.39214198432852082, 0.35515456144207141, 0.7241328986866119, 0.78527848842260561, 0.93576345790446669, 0.692995131762143, 0.57908321748373537, 0.64098280467119517, 0.98628610032331543, 0.83343227183485935, 0.46846213413952176, 0.52564935661597312, 0.45262417700871621, 0.17662573587811234, -3.1562409965788664e-33, 0.25245067691186179, 0.32841374078125724, 1.0693664433597796, 1.1660792539443281, 1.2580272622738424, 0.41594470590799754, 0.39713900918746142, 0.77260568024645238, 0.90689071951244826, 0.65269024797258357, 0.71797367198674644, 0.57242041510283859, 1.0003193914539974, 0.8581800708550783, 0.53583746418578293, 0.47641946508574079, 0.21043430505426916, -1.4721105255749127e-33, 0.28419333114641987, 0.35767722608233055, 1.0969745250155334, 1.1870605219443848, 1.2813344764941721, 0.45293464251062326, 0.42608468037817632, 0.79608745113726886, 0.95023882304568741, 0.64972113466507164, 0.59714041613851498, 0.73475806388453402, 1.0288260398853326, 0.88663406375863629, 0.54440846538761178, 0.49090217406264319, 0.55250985836553512, 0.25501086046407467, 2.7996615640557448e-33, 0.32863748338765808, 0.40713234199687559, 1.1125006713779886, 1.2048741559576426, 1.303706015633656, 0.4766474605703625, 0.8000981313635922, 0.96146252974826907, 0.67767385855038587, 0.61611829139879903, 0.73555589820885248, 1.0575647251495528, 0.89527682666988428, 0.54303023388245331, 0.28932999798056142, 9.8670260322838984e-33, 0.3668780903340873, 0.4459175848225666, 1.1258027167139717, 1.2290916562017302, 1.325272336907984, 0.51303476921278857, 0.83022462101423311, 0.97084462928568271, 0.57745583095951547, 0.70187758122496369, 0.63978508504422005, 0.76597970650352798, 1.0496660382019032, 0.90307709778747369, 0.33164410965977176, 2.1037669887845383e-32, 0.42005649506987069, 0.50261377770258131, 1.139089215992763, 1.2483730462670886, 1.3459057015420297, 0.57052553731669797, 0.83570963998252445, 0.97436186105662659, 0.63571439457453505, 1.2640186728987231, 0.70315755122853396, 0.78417678210549435, 1.0595903359948782, 0.89554484508652377, 0.97864180986439109, 0.37823956560084993, 3.7666384306754106e-32, 0.48381956498389145, 0.56634050042618955, 1.1669915068044889, 1.365773681352185, 0.63130231039684059, 1.2805750846060437, 1.1785481518308232, 0.82202134203495758, 0.73880482392559021, 1.0869271012609882, 0.91552532019146671, 1.0007675779467036, 0.46168858228297438, 5.0229880588424062e-32, 0.59137652604299273, 0.66310296797937451, 1.384610399914846, 1.1919397502386684, 1.2946262346964652, 0.83722166520996122, 0.74618043482501617, 1.069596002651324, 0.96342211029512281, 0.60753701854274456, 4.9504010896631562e-32, 0.68201203400534793, 1.402788020470338, 1.2018921262486912, 1.3082613204930551, 0.83536032789486281, 0.92600694838856734, 1.1110498138647269, 0.73800636449769064, 1.015932459176859, 0.77195510887272678, 4.9260883020004132e-32, 1.4200467814249587, 1.2102295605242337, 1.320541387105584, 0.92441103375338496, 0.82862408126568465, 1.0779834934752421, 1.2156353564232318, 0.81982680654052575, 0.86213265126128724, 0.96817034338517061, 4.6902946006731709e-32, 1.4366132851178306, 1.1207773883754508, 1.3143014431599218, 1.0142823277978754, 1.2205149481783064, 1.0414539004148398, 0.88098753153040166, 3.8681309073908811e-32, 1.4522770637363773, 1.1174635661703125, 1.3401005933592489, 0.95038331427762779, 1.2528698616921987, 1.1695501265087964, 1.1494603061241648, 2.6015081226953922e-32, 1.4671803748505159, 1.039593697809911, 1.3435868099477781, 1.0665602736187025, 1.2212790063012655, 1.2605673107468753, 1.6957799791564122e-32, 1.4813731648282684, 1.0462070929385312, 1.3689714992355138, 1.24596685973308, 1.2764875484761857, 1.4241420859602987e-32, 1.4965376827494234, 1.1112956842241972, 1.3623952497772931, 1.2240246609651724, 3.2010336686903264e-33, 1.307120079443814, 1.5106105082826442, 1.1863207182301156, 1.3664603753255744, 1.2537636646618924, -1.4070325740769956e-32, 1.2658230108075614, 1.5248018498445366, 1.3707337795466499, 1.0096011303914771, 1.3574990799690587, -1.7647981593033987e-32, -3.5536295659113392e-32, 1.3736345133863457, 1.5283114742090653, 1.2057182050930768, 1.3345836985477431, 1.4144544652192221, 0.72854790068777731, 0.48005834472574449, 1.5251758326385969, 1.3799679657531692, 1.340332441246562, 1.4269137311170677, 0.97492337490280712, 1.5379599360673351, 1.4382796489798761, 1.4515952743713136, 1.4261917022345969, 1.5504626040283263, 1.4749714222470012, 1.5651764321035857
        });

        // std::cout << "f size: " << model.f().size() << std::endl;
        // std::cout << "expected size: " << expected.size() << std::endl;
        double rmse = 0;
        for (int i = 0; i < model.f().size(); ++i) {
            rmse += (model.f()(i) - expected[i]) * (model.f()(i) - expected[i]);
        }
        // std::cout << "Beta: " << model.beta().transpose() << std::endl;
        rmse = std::sqrt(rmse / model.f().size());
        // std::cout << "RMSE: " << rmse << std::endl;
        RMSEs(i) = rmse;
        //EXPECT_TRUE(rmse < 100);
        EXPECT_TRUE(1);
        }
    } // end for Ntest
    // save MRSEs to file
    writeEigenVectorToCSV("RMSE_" + std::to_string(n) + ".csv", RMSEs);
    } // end for n (number of observations)
}
*/
