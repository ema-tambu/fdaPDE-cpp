load "ffrandom"
srandomdev(); // set a true ramdom seed 

int n = 32;
mesh Th = square(n, n); //, flags = 1);
plot(Th, wait = 0);

cout.precision(17);

fespace Vh(Th, P1);  // mixed finite elements but with the same space for both variables
Vh fh, gh, vh; // one test function vh is enough for both FEMs

int Ndofs = Vh.ndof;
cout << "\nNdofs = " << Ndofs << endl;

// Define the PDE parameters
real nu = 1e-6;
real bx = 1.;
real by = 1.;
real BL = 0.1;

real g = 0.;    // Dirichlet boundary condition
real quadratureOrder = 7;
real stabParam = 23.294;
real lambda = 0.001;

// define number of locations in the domain
// int nLocs = 25; //(-> in the for loop)
int locationStart = 5;
int locationEnd = 25;
int locationStep = 5;

// define exact solution
// func uex = x*(y*y) - (y*y)*exp((2*(x - 1))/BL) - x*exp(3*(y - 1)/BL) + exp((2*(x - 1) + 3*(y - 1))/BL);

// define forcing term according to the exact solution
func f = bx*(y*y - exp((3*y - 3)/BL) - 2*y*y*exp((2*x - 2)/BL)/BL + 2*exp((2*x + 3*y - 5)/BL)/BL) + by*(2*x*y - 2*y*exp((2*x - 2)/BL) - 3*x*exp((3*y - 3)/BL)/BL + 3*exp((2*x + 3*y - 5)/BL)/BL) - nu*(2*x - 2*exp((2*x - 2)/BL) - 9*x*exp((3*y - 3)/BL)/(BL*BL) - 4*y*y*exp((2*x - 2)/BL)/(BL*BL) + 13*exp((2*x + 3*y - 5)/BL)/(BL*BL));

// uexh = uex; // Interpolate uex on Vh

// SUPG stabilization parameter
real hTriangle = 1./n;
real normb = sqrt(bx*bx + by*by);
real tauK = hTriangle/(2 * normb) * stabParam;
cout << "\nstabParam " << stabParam << ", tauK " << tauK << "\n" << endl;

// assemble matrices for block linear system

varf stiff(phiJ, phiI) =
    int2d(Th, qforder=quadratureOrder)(
        nu * (dx(phiJ)*dx(phiI) + dy(phiJ)*dy(phiI))
        + bx*dx(phiJ)*phiI + by*dy(phiJ)*phiI
    )
    + int2d(Th, qforder=quadratureOrder)(
        f * phiI
    );
    // neumann homogeneous boundary condition everywhere, dirichlet b.c. in the big system

varf stiffAdjoint(phiJ, phiI) =
    int2d(Th, qforder=quadratureOrder)(
        nu * (dx(phiJ)*dx(phiI) + dy(phiJ)*dy(phiI))
        - bx*dx(phiJ)*phiI - by*dy(phiJ)*phiI
    );
    // neumann homogeneous boundary condition everywhere, dirichlet b.c. in the big system

varf stiffStab(phiJ, phiI) =
    int2d(Th, qforder=quadratureOrder)(
        - tauK*nu*(dxx(phiJ) + dyy(phiJ))*(bx*dx(phiI) + by*dy(phiI))  // diffusion SUPG
        + tauK*(bx*dx(phiJ) + by*dy(phiJ))*(bx*dx(phiI) + by*dy(phiI)) // transport SUPG
    )
    + int2d(Th, qforder=quadratureOrder)(
        + tauK*f*(bx*dx(phiI) + by*dy(phiI))   // forcing SUPG
    );
    // neumann homogeneous boundary condition everywhere, dirichlet b.c. in the big system

varf stiffStabAdjoint(phiJ, phiI) =
    int2d(Th, qforder=quadratureOrder)(
        tauK*nu*(dxx(phiJ) + dyy(phiJ))*(bx*dx(phiI) + by*dy(phiI))  // diffusion SUPG
        + tauK*(bx*dx(phiJ) + by*dy(phiJ))*(bx*dx(phiI) + by*dy(phiI)) // transport SUPG
    );
    // neumann homogeneous boundary condition everywhere, dirichlet b.c. in the big system

varf mass(phiJ, phiI) = 
    int2d(Th, qforder = quadratureOrder)(
        phiJ*phiI
    );
    // neumann homogeneous boundary condition everywhere, dirichlet b.c. in the big system

varf massStab(phiJ, phiI) = 
    int2d(Th, qforder = quadratureOrder)(
        tauK*(phiJ)*(bx*dx(phiI) + by*dy(phiI))
    );
    // neumann homogeneous boundary condition everywhere, dirichlet b.c. in the big system

matrix A = stiff(Vh, Vh);

matrix Aadj = stiffAdjoint(Vh, Vh);

real[int] U = stiff(0, Vh);

matrix S = stiffStab(Vh, Vh);

matrix Sadj = stiffStabAdjoint(Vh, Vh);

real[int] Us = stiffStab(0, Vh);

matrix R = mass(Vh, Vh);

matrix S1 = massStab(Vh, Vh);

// print the dimensions of the matrices (check)
cout << "A = (" << A.n << "x" << A.m << ")" << endl;
cout << "Aadj = (" << Aadj.n << "x" << Aadj.m << ")" << endl;
cout << "S = (" << S.n << "x" << S.m << ")" << endl;
cout << "Sadj = (" << Sadj.n << "x" << Sadj.m << ")" << endl;
cout << "R = (" << R.n << "x" << R.m << ")" << endl;
cout << "S1 = (" << S1.n << "x" << S1.m << ")" << endl;


// BEGIN LOCATION DEPENDENT PART - SR-PDE MODEL (loop over nLocs)
for (int nLocs = locationStart; nLocs <=locationEnd; nLocs +=locationStep){
cout << "\n\n nLocs = " << nLocs << endl;

// read locations
real[int] locs(nLocs*nLocs*2); //(x, y) * nLocs 
{
    ifstream file("../../data/transport/TransportTestCase1/locs" + nLocs + ".txt");
    string line;
    // Read by line.
    for (int k = 0; k < nLocs*nLocs*2; k++){
        getline(file, line);
        locs(k) = atof(line);
    }
}
// build the matrices Psi and Xi and evaluate them at locations
cout << "building Psi and Xi..." << endl;
real t0 = time();

Vh u = 0; // handle function on the FEM space to evaluate lagrangian basis at locations
matrix Psi; Psi.resize(nLocs*nLocs, Ndofs);
matrix Xi; Xi.resize(nLocs*nLocs, Ndofs);
for (int i = 0; i < Ndofs; i++){
    u[][i] = 1; // set basis function i to 1
    //loop over locations 
    for (int j = 0; j < nLocs*nLocs; j++){
        // real xLoc = locs(2*j);
        // real yLoc = locs(2*j+1);
        real yLoc = locs(2*j);
        real xLoc = locs(2*j+1);
        real PsiIJ = u(xLoc, yLoc);
        Psi(j, i) = PsiIJ;
        real XiIJ = - (tauK) * lambda * (bx*dx(u)(xLoc, yLoc) + by*dy(u)(xLoc, yLoc));
        Xi(j, i) = XiIJ;
    }
    u[][i] = 0; // reset basis function i to 0
}
cout << "Psi = (" << Psi.n << "x" << Psi.m << ")" << endl;
cout << "Xi = (" << Xi.n << "x" << Xi.m << ")" << endl;

// Xi = 0.0 * Xi;

// read observations
cout << "importing observations and adding noise..." << endl;
real[int] observations(nLocs*nLocs);
{
    ifstream file("../../data/transport/TransportTestCase1/observations" + nLocs + ".txt");
    string line;
    // Read by line.
    for (int k = 0; k < nLocs*nLocs; k++){
        getline(file, line);
        observations(k) = atof(line);
    }
}
// add noise to the observations 
{
    // maximum value of observations
    real maximum = observations[0];
    for (int i = 0; i < nLocs*nLocs; i++)
        maximum = max(maximum, observations[i]);
    real minimum = observations[0];
    for (int i = 0; i < nLocs*nLocs; i++)
        minimum = min(minimum, observations[i]);
    // variance of the noise = 5% of the range of the observations
    real variance = 0.05 * (maximum - minimum);

    // sample values from U([0, 1])
    int nSamples = (nLocs*nLocs) / 2 + 1;   
    real[int] U1(nSamples);
    real[int] U2(nSamples);
    for(int i = 0; i < nSamples; i++){
        U1[i] = randreal3();
        U2[i] = randreal3();
    }
    // Box Muller Transformation to get samples from N(0, k)
    real[int] X(nSamples);
    real[int] Y(nSamples);
    for(int i = 0; i < nSamples; i++){
        X[i] = variance*sqrt(-2.0 * log(U1[i])) * cos(2.0 * pi * U2[i]);
        Y[i] = variance*sqrt(-2.0 * log(U1[i])) * sin(2.0 * pi * U2[i]);
    }
    // add noise to the observations
    for (int i = 0; i < nLocs*nLocs; i++){
        if (i < nSamples)
            observations(i) += X[i];
        else
            observations(i) += Y[i-nSamples];
    }
}
real t1 = time();
cout << "time to build Psi and Xi = " << t1 - t0 << endl;
cout << "assembling linear system..." << endl;

// assemble the big matrix Sigma

matrix block11 = Psi + Xi;
block11 = Psi' * block11;
block11 = (1.0/(nLocs*nLocs)) * block11;

matrix block12 = Aadj + Sadj;
block12 = lambda * block12;

matrix block21 = A + S;

matrix block22 = - R - S1;

real tblocks = time();
cout << "time to build blocks = " << tblocks - t1 << endl;

matrix Sigma = [[block11, block12], [block21, block22]];

real t2 = time();
cout << "time to assemble Sigma = " << t2 - t1 << endl;

// assemble the big vector b
real[int] b1(Ndofs);
b1 = 0.0;
matrix aux = Psi' + Xi';
aux = (1.0/(nLocs*nLocs))*aux;
b1 = aux * observations;

real[int] b2(Ndofs);
b2 = U + Us;

real[int] b = [b1, b2];

real t3 = time();
cout << "time to assemble b = " << t3 - t2 << endl;

// set Dirichlet boundary conditions in the big system
cout << "setting Dirichlet b.c. in the block system..." << endl;
int NbTriangles = Th.nt;
for (int i = 0; i < NbTriangles; i++){
    for (int j = 0; j < 3; j++){
        if (Th[i][j].label != 0){
            // ok siamo in un nodo di bordo -> Dirichlet b.c.
            int currentDof = Th[i][j];
            // cout << "setting Dirichlet b.c. to line = " << currentDof << endl;

            // possible speedup:
            // più triangoli condividono lo stesso dof,
            // tieni traccia delle righe in cui hai già imposto Dirichlet

            for (int k = 0; k < Ndofs; k++){
                Sigma(currentDof, k) = 0;           // block (1, 1)
                Sigma(currentDof, k + Ndofs) = 0;   // block (1, 2)

                Sigma(currentDof + Ndofs, k) = 0;   // block (2, 1)
                Sigma(currentDof + Ndofs, k + Ndofs) = 0;   // block (2, 2)
            }
            Sigma(currentDof, currentDof) = 1;
            Sigma(currentDof + Ndofs, currentDof + Ndofs) = 1;
            
            // set Dirichlet datum on rhs
            b(currentDof) = g;
            b(currentDof + Ndofs) = 0;  // always homogeneuos Dirichlet b.c. for the second variable
        }
    }
}

real t4 = time();
cout << "time to set Dirichlet b.c. = " << t4 - t3 << endl;

real[int] solution(Ndofs*2);
solution = 0.0;

set(Sigma, solver = UMFPACK);
// set(Sigma, solver = LU);

cout << "solving linear system..." << endl;
solution = Sigma^-1 * b;

real t5 = time();
cout << "time to solve linear system = " << t5 - t4 << endl;

fh[] = solution(0:Ndofs-1);
gh[] = solution(Ndofs:2*Ndofs-1);

plot([fh], value = 1, fill = 1, wait = 0, cmm = "fh");
// plot([gh], value = 1, fill = 1, wait = 1, cmm = "gh");

// load expected solution
cout << "computing RMSE..." << endl;
real[int] expected(Ndofs);
{
    ifstream file("../../data/transport/TransportTestCase1/expected.txt");
    string line;
    // Read by line.
    for (int k = 0; k < Ndofs; k++){
        getline(file, line);
        expected(k) = atof(line);
    }
}

// solution \equiv model.f() in C++
real rmse = 0;
for (int i = 0; i < Ndofs; i++){
    rmse += pow(expected(i) - solution(i), 2);
}
rmse = sqrt(rmse/Ndofs);
cout << "RMSE_"<< nLocs << " = " << rmse << endl;

//save model.f() in a file 
real[int] fhat = solution(0:Ndofs-1);
{
    ofstream file("../../data/transport/TransportTestCase1/modelf_" + nLocs + ".txt");
    file.precision(17);
    for (int k = 0; k < Ndofs; k++){
        file << fhat(k) << endl;
    }
}


} // END LOCATION DEPENDENT PART - SR-PDE MODEL