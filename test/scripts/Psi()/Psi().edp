// script to build the matrix Psi() as in fdaPDE
int n = 5;  // number of nodes per side
int N = 16; // number of locations to evaluate the basis functions

cout << "creating mesh unit_square(" << n << ", " << n << ") ... " << endl;
mesh Th = square(n, n);
plot(Th, wait = 1);

fespace Vh(Th, P1);
int Ndofs = Vh.ndof;
cout << "Ndofs = " << Ndofs << endl;

Vh u = 0;
cout << "u.n = " << u.n << endl;    // should be the same as Ndofs
int nodesPerSide = sqrt(Ndofs); // n + 1

// read locations
real[int] locs(N*2);
{
    ifstream file("../../data/transport/testPsi/locs.txt");
    string line;
    // Read by line.
    for (int k = 0; k < N*2; k++){
        getline(file, line);
        locs(k) = atof(line);
    }
}

matrix Psi;
Psi.resize(N, Ndofs);

cout << "Psi.n = " << Psi.n << ", Psi.m = " << Psi.m << endl;

// print the locs
cout << "The locs are: \n" << locs << endl;

// loop over dofs
for (int i = 0; i < Ndofs; i++){
    u[][i] = 1; // set basis function i to 1
    //loop over locations 
    for (int j = 0; j < N; j++){
        real x = locs(2*j);
        real y = locs(2*j+1);
        real val = u(x, y);
        Psi(j, i) = val;
    }
    u[][i] = 0; // reset basis function i to 0
}

// cout << "Psi = \n\n" << Psi << endl;
cout << "Psi = " << endl;
for (int i = 0; i < Ndofs; i++){
    for (int j = 0; j < N; j++){
        if (Psi(j, i) != 0){
            cout << "Psi(" << j << ", " << i << ") = " << Psi(j, i) << endl;
        }
    }
}

ofstream file("Psi.txt");
for (int i = 0; i < Ndofs; i++){
    for (int j = 0; j < N; j++){
        // file << Psi(j, i) << ", "; // << endl;
        file << Psi(j, i) << endl;
    }
    // file << endl;
}